(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
/**
 * @ngdoc module
 * @name gettext
 * @packageName angular-gettext
 * @description Super simple Gettext for Angular.JS
 *
 * A sample application can be found at https://github.com/rubenv/angular-gettext-example.
 * This is an adaptation of the [TodoMVC](http://todomvc.com/) example. You can use this as a guideline while adding {@link angular-gettext angular-gettext} to your own application.
 */
/**
 * @ngdoc factory
 * @module gettext
 * @name gettextPlurals
 * @param {String} [langCode=en] language code
 * @param {Number} [n=0] number to calculate form for
 * @returns {Number} plural form number
 * @description Provides correct plural form id for the given language
 *
 * Example
 * ```js
 * gettextPlurals('ru', 10); // 1
 * gettextPlurals('en', 1);  // 0
 * gettextPlurals();         // 1
 * ```
 */
angular.module('gettext', []);
/**
 * @ngdoc object
 * @module gettext
 * @name gettext
 * @kind function
 * @param {String} str annotation key
 * @description Gettext constant function for annotating strings
 *
 * ```js
 * angular.module('myApp', ['gettext']).config(function(gettext) {
 *   /// MyApp document title
 *   gettext('my-app.title');
 *   ...
 * })
 * ```
 */
angular.module('gettext').constant('gettext', function (str) {
    /*
     * Does nothing, simply returns the input string.
     *
     * This function serves as a marker for `grunt-angular-gettext` to know that
     * this string should be extracted for translations.
     */
    return str;
});

/**
 * @ngdoc service
 * @module gettext
 * @name gettextCatalog
 * @requires gettextPlurals
 * @requires gettextFallbackLanguage
 * @requires https://docs.angularjs.org/api/ng/service/$http $http
 * @requires https://docs.angularjs.org/api/ng/service/$cacheFactory $cacheFactory
 * @requires https://docs.angularjs.org/api/ng/service/$interpolate $interpolate
 * @requires https://docs.angularjs.org/api/ng/service/$rootScope $rootScope
 * @description Provides set of method to translate stings
 */
angular.module('gettext').factory('gettextCatalog', ["gettextPlurals", "gettextFallbackLanguage", "$http", "$cacheFactory", "$interpolate", "$rootScope", function (gettextPlurals, gettextFallbackLanguage, $http, $cacheFactory, $interpolate, $rootScope) {
    var catalog;
    var noContext = '$$noContext';

    // IE8 returns UPPER CASE tags, even though the source is lower case.
    // This can causes the (key) string in the DOM to have a different case to
    // the string in the `po` files.
    // IE9, IE10 and IE11 reorders the attributes of tags.
    var test = '<span id="test" title="test" class="tested">test</span>';
    var isHTMLModified = (angular.element('<span>' + test + '</span>').html() !== test);

    var prefixDebug = function (string) {
        if (catalog.debug && catalog.currentLanguage !== catalog.baseLanguage) {
            return catalog.debugPrefix + string;
        } else {
            return string;
        }
    };

    var addTranslatedMarkers = function (string) {
        if (catalog.showTranslatedMarkers) {
            return catalog.translatedMarkerPrefix + string + catalog.translatedMarkerSuffix;
        } else {
            return string;
        }
    };

    function broadcastUpdated() {
        /**
         * @ngdoc event
         * @name gettextCatalog#gettextLanguageChanged
         * @eventType broadcast on $rootScope
         * @description Fires language change notification without any additional parameters.
         */
        $rootScope.$broadcast('gettextLanguageChanged');
    }

    catalog = {
        /**
         * @ngdoc property
         * @name gettextCatalog#debug
         * @public
         * @type {Boolean} false
         * @see gettextCatalog#debug
         * @description Whether or not to prefix untranslated strings with `[MISSING]:` or a custom prefix.
         */
        debug: false,
        /**
         * @ngdoc property
         * @name gettextCatalog#debugPrefix
         * @public
         * @type {String} [MISSING]:
         * @description Custom prefix for untranslated strings when {@link gettextCatalog#debug gettextCatalog#debug} set to `true`.
         */
        debugPrefix: '[MISSING]: ',
        /**
         * @ngdoc property
         * @name gettextCatalog#showTranslatedMarkers
         * @public
         * @type {Boolean} false
         * @description Whether or not to wrap all processed text with markers.
         *
         * Example output: `[Welcome]`
         */
        showTranslatedMarkers: false,
        /**
         * @ngdoc property
         * @name gettextCatalog#translatedMarkerPrefix
         * @public
         * @type {String} [
         * @description Custom prefix to mark strings that have been run through {@link angular-gettext angular-gettext}.
         */
        translatedMarkerPrefix: '[',
        /**
         * @ngdoc property
         * @name gettextCatalog#translatedMarkerSuffix
         * @public
         * @type {String} ]
         * @description Custom suffix to mark strings that have been run through {@link angular-gettext angular-gettext}.
         */
        translatedMarkerSuffix: ']',
        /**
         * @ngdoc property
         * @name gettextCatalog#strings
         * @private
         * @type {Object}
         * @description An object of loaded translation strings. Shouldn't be used directly.
         */
        strings: {},
        /**
         * @ngdoc property
         * @name gettextCatalog#baseLanguage
         * @protected
         * @deprecated
         * @since 2.0
         * @type {String} en
         * @description The default language, in which you're application is written.
         *
         * This defaults to English and it's generally a bad idea to use anything else:
         * if your language has different pluralization rules you'll end up with incorrect translations.
         */
        baseLanguage: 'en',
        /**
         * @ngdoc property
         * @name gettextCatalog#currentLanguage
         * @public
         * @type {String}
         * @description Active language.
         */
        currentLanguage: 'en',
        /**
         * @ngdoc property
         * @name gettextCatalog#cache
         * @public
         * @type {String} en
         * @description Language cache for lazy load
         */
        cache: $cacheFactory('strings'),

        /**
         * @ngdoc method
         * @name gettextCatalog#setCurrentLanguage
         * @public
         * @param {String} lang language name
         * @description Sets the current language and makes sure that all translations get updated correctly.
         */
        setCurrentLanguage: function (lang) {
            this.currentLanguage = lang;
            broadcastUpdated();
        },

        /**
         * @ngdoc method
         * @name gettextCatalog#getCurrentLanguage
         * @public
         * @returns {String} current language
         * @description Returns the current language.
         */
        getCurrentLanguage: function () {
            return this.currentLanguage;
        },

        /**
         * @ngdoc method
         * @name gettextCatalog#setStrings
         * @public
         * @param {String} language language name
         * @param {Object.<String>} strings set of strings where the key is the translation `key` and `value` is the translated text
         * @description Processes an object of string definitions. {@link guide:manual-setstrings More details here}.
         */
        setStrings: function (language, strings) {
            if (!this.strings[language]) {
                this.strings[language] = {};
            }

            var defaultPlural = gettextPlurals(language, 1);
            for (var key in strings) {
                var val = strings[key];

                if (isHTMLModified) {
                    // Use the DOM engine to render any HTML in the key (#131).
                    key = angular.element('<span>' + key + '</span>').html();
                }

                if (angular.isString(val) || angular.isArray(val)) {
                    // No context, wrap it in $$noContext.
                    var obj = {};
                    obj[noContext] = val;
                    val = obj;
                }

                if (!this.strings[language][key]) {
                    this.strings[language][key] = {};
                }

                for (var context in val) {
                    var str = val[context];
                    if (!angular.isArray(str)) {
                        // Expand single strings
                        this.strings[language][key][context] = [];
                        this.strings[language][key][context][defaultPlural] = str;
                    } else {
                        this.strings[language][key][context] = str;
                    }
                }
            }

            broadcastUpdated();
        },

        /**
         * @ngdoc method
         * @name gettextCatalog#getStringFormFor
         * @protected
         * @param {String} language language name
         * @param {String} string translation key
         * @param {Number=} n number to build sting form for
         * @param {String=} context translation key context, e.g. {@link doc:context Verb, Noun}
         * @returns {String|Null} translated or annotated string or null if language is not set
         * @description Translate a string with the given language, count and context.
         */
        getStringFormFor: function (language, string, n, context) {
            if (!language) {
                return null;
            }
            var stringTable = this.strings[language] || {};
            var contexts = stringTable[string] || {};
            var plurals = contexts[context || noContext] || [];
            return plurals[gettextPlurals(language, n)];
        },

        /**
         * @ngdoc method
         * @name gettextCatalog#getString
         * @public
         * @param {String} string translation key
         * @param {$rootScope.Scope=} scope scope to do interpolation against
         * @param {String=} context translation key context, e.g. {@link doc:context Verb, Noun}
         * @returns {String} translated or annotated string
         * @description Translate a string with the given scope and context.
         *
         * First it tries {@link gettextCatalog#currentLanguage gettextCatalog#currentLanguage} (e.g. `en-US`) then {@link gettextFallbackLanguage fallback} (e.g. `en`).
         *
         * When `scope` is supplied it uses Angular.JS interpolation, so something like this will do what you expect:
         * ```js
         * var hello = gettextCatalog.getString("Hello {{name}}!", { name: "Ruben" });
         * // var hello will be "Hallo Ruben!" in Dutch.
         * ```
         * Avoid using scopes - this skips interpolation and is a lot faster.
         */
        getString: function (string, scope, context) {
            var fallbackLanguage = gettextFallbackLanguage(this.currentLanguage);
            string = this.getStringFormFor(this.currentLanguage, string, 1, context) ||
                     this.getStringFormFor(fallbackLanguage, string, 1, context) ||
                     prefixDebug(string);
            string = scope ? $interpolate(string)(scope) : string;
            return addTranslatedMarkers(string);
        },

        /**
         * @ngdoc method
         * @name gettextCatalog#getPlural
         * @public
         * @param {Number} n number to build sting form for
         * @param {String} string translation key
         * @param {String} stringPlural plural translation key
         * @param {$rootScope.Scope=} scope scope to do interpolation against
         * @param {String=} context translation key context, e.g. {@link doc:context Verb, Noun}
         * @returns {String} translated or annotated string
         * @see {@link gettextCatalog#getString gettextCatalog#getString} for details
         * @description Translate a plural string with the given context.
         */
        getPlural: function (n, string, stringPlural, scope, context) {
            var fallbackLanguage = gettextFallbackLanguage(this.currentLanguage);
            string = this.getStringFormFor(this.currentLanguage, string, n, context) ||
                     this.getStringFormFor(fallbackLanguage, string, n, context) ||
                     prefixDebug(n === 1 ? string : stringPlural);
            if (scope) {
                scope.$count = n;
                string = $interpolate(string)(scope);
            }
            return addTranslatedMarkers(string);
        },

        /**
         * @ngdoc method
         * @name gettextCatalog#loadRemote
         * @public
         * @param {String} url location of the translations
         * @description Load a set of translation strings from a given URL.
         *
         * This should be a JSON catalog generated with [angular-gettext-tools](https://github.com/rubenv/angular-gettext-tools).
         * {@link guide:lazy-loading More details here}.
         */
        loadRemote: function (url) {
            return $http({
                method: 'GET',
                url: url,
                cache: catalog.cache
            }).then(function (response) {
                var data = response.data;
                for (var lang in data) {
                    catalog.setStrings(lang, data[lang]);
                }
                return response;
            });
        }
    };

    return catalog;
}]);

/**
 * @ngdoc directive
 * @module gettext
 * @name translate
 * @requires gettextCatalog
 * @requires gettextUtil
 * @requires https://docs.angularjs.org/api/ng/service/$parse $parse
 * @requires https://docs.angularjs.org/api/ng/service/$animate $animate
 * @requires https://docs.angularjs.org/api/ng/service/$compile $compile
 * @requires https://docs.angularjs.org/api/ng/service/$window $window
 * @restrict AE
 * @param {String} [translatePlural] plural form
 * @param {Number} translateN value to watch to substitute correct plural form
 * @param {String} translateContext context value, e.g. {@link doc:context Verb, Noun}
 * @description Annotates and translates text inside directive
 *
 * Full interpolation support is available in translated strings, so the following will work as expected:
 * ```js
 * <div translate>Hello {{name}}!</div>
 * ```
 *
 * You can also use custom context parameters while interpolating. This approach allows usage
 * of angular filters as well as custom logic inside your translated messages without unnecessary impact on translations.
 *
 * So for example when you have message like this:
 * ```js
 * <div translate>Last modified {{modificationDate | date:'yyyy-MM-dd HH:mm:ss Z'}} by {{author}}.</div>
 * ```
 * you will have it extracted in exact same version so it would look like this:
 * `Last modified {{modificationDate | date:'yyyy-MM-dd HH:mm:ss Z'}} by {{author}}`.
 * To start with it might be too complicated to read and handle by non technical translator. It's easy to make mistake
 * when copying format for example. Secondly if you decide to change format by some point of the project translation will broke
 * as it won't be the same string anymore.
 *
 * Instead your translator should only be concerned to place {{modificationDate}} correctly and you should have a free hand
 * to modify implementation details on how to present the results. This is how you can achieve the goal:
 * ```js
 * <div translate translate-params-modification-date="modificationDate | date:'yyyy-MM-dd HH:mm:ss Z'">Last modified {{modificationDate}} by {{author}}.</div>
 * ```
 *
 * There's a few more things worth to point out:
 * 1. You can use as many parameters as you want. Each parameter begins with `translate-params-` followed by snake-case parameter name.
 * Each parameter will be available for interpolation in camelCase manner (just like angular directive works by default).
 * ```js
 * <div translate translate-params-my-custom-param="param1" translate-params-name="name">Param {{myCustomParam}} has been changed by {{name}}.</div>
 * ```
 * 2. You can rename your variables from current scope to simple ones if you like.
 * ```js
 * <div translate translate-params-date="veryUnintuitiveNameForDate">Today's date is: {{date}}.</div>
 * ```
 * 3. You can use translate-params only for some interpolations. Rest would be treated as usual.
 * ```js
 * <div translate translate-params-cost="cost | currency">This product: {{product}} costs {{cost}}.</div>
 * ```
 */
angular.module('gettext').directive('translate', ["gettextCatalog", "$parse", "$animate", "$compile", "$window", "gettextUtil", function (gettextCatalog, $parse, $animate, $compile, $window, gettextUtil) {
    var msie = parseInt((/msie (\d+)/.exec(angular.lowercase($window.navigator.userAgent)) || [])[1], 10);
    var PARAMS_PREFIX = 'translateParams';

    function getCtxAttr(key) {
        return gettextUtil.lcFirst(key.replace(PARAMS_PREFIX, ''));
    }

    function handleInterpolationContext(scope, attrs, update) {
        var attributes = Object.keys(attrs).filter(function (key) {
            return gettextUtil.startsWith(key, PARAMS_PREFIX) && key !== PARAMS_PREFIX;
        });

        if (!attributes.length) {
            return null;
        }

        var interpolationContext = angular.extend({}, scope);
        var unwatchers = [];
        attributes.forEach(function (attribute) {
            var unwatch = scope.$watch(attrs[attribute], function (newVal) {
                var key = getCtxAttr(attribute);
                interpolationContext[key] = newVal;
                update(interpolationContext);
            });
            unwatchers.push(unwatch);
        });
        scope.$on('$destroy', function () {
            unwatchers.forEach(function (unwatch) {
                unwatch();
            });
        });
        return interpolationContext;
    }

    return {
        restrict: 'AE',
        terminal: true,
        compile: function compile(element, attrs) {
            // Validate attributes
            gettextUtil.assert(!attrs.translatePlural || attrs.translateN, 'translate-n', 'translate-plural');
            gettextUtil.assert(!attrs.translateN || attrs.translatePlural, 'translate-plural', 'translate-n');

            var msgid = gettextUtil.trim(element.html());
            var translatePlural = attrs.translatePlural;
            var translateContext = attrs.translateContext;

            if (msie <= 8) {
                // Workaround fix relating to angular adding a comment node to
                // anchors. angular/angular.js/#1949 / angular/angular.js/#2013
                if (msgid.slice(-13) === '<!--IE fix-->') {
                    msgid = msgid.slice(0, -13);
                }
            }

            return {
                post: function (scope, element, attrs) {
                    var countFn = $parse(attrs.translateN);
                    var pluralScope = null;
                    var linking = true;

                    function update(interpolationContext) {
                        interpolationContext = interpolationContext || null;

                        // Fetch correct translated string.
                        var translated;
                        if (translatePlural) {
                            scope = pluralScope || (pluralScope = scope.$new());
                            scope.$count = countFn(scope);
                            translated = gettextCatalog.getPlural(scope.$count, msgid, translatePlural, interpolationContext, translateContext);
                        } else {
                            translated = gettextCatalog.getString(msgid, interpolationContext, translateContext);
                        }
                        var oldContents = element.contents();

                        if (!oldContents && !translated){
                            return;
                        }

                        // Avoid redundant swaps
                        if (translated === gettextUtil.trim(oldContents.html())){
                            // Take care of unlinked content
                            if (linking){
                                $compile(oldContents)(scope);
                            }
                            return;
                        }

                        // Swap in the translation
                        var newWrapper = angular.element('<span>' + translated + '</span>');
                        $compile(newWrapper.contents())(scope);
                        var newContents = newWrapper.contents();

                        $animate.enter(newContents, element);
                        $animate.leave(oldContents);
                    }

                    var interpolationContext = handleInterpolationContext(scope, attrs, update);
                    update(interpolationContext);
                    linking = false;

                    if (attrs.translateN) {
                        scope.$watch(attrs.translateN, function () {
                            update(interpolationContext);
                        });
                    }

                    /**
                     * @ngdoc event
                     * @name translate#gettextLanguageChanged
                     * @eventType listen on scope
                     * @description Listens for language updates and changes translation accordingly
                     */
                    scope.$on('gettextLanguageChanged', function () {
                        update(interpolationContext);
                    });

                }
            };
        }
    };
}]);

/**
 * @ngdoc factory
 * @module gettext
 * @name gettextFallbackLanguage
 * @param {String} langCode language code
 * @returns {String|Null} fallback language
 * @description Strips regional code and returns language code only
 *
 * Example
 * ```js
 * gettextFallbackLanguage('ru');     // "null"
 * gettextFallbackLanguage('en_GB');  // "en"
 * gettextFallbackLanguage();         // null
 * ```
 */
angular.module("gettext").factory("gettextFallbackLanguage", function () {
    var cache = {};
    var pattern = /([^_]+)_[^_]+$/;

    return function (langCode) {
        if (cache[langCode]) {
            return cache[langCode];
        }

        var matches = pattern.exec(langCode);
        if (matches) {
            cache[langCode] = matches[1];
            return matches[1];
        }

        return null;
    };
});
/**
 * @ngdoc filter
 * @module gettext
 * @name translate
 * @requires gettextCatalog
 * @param {String} input translation key
 * @param {String} context context to evaluate key against
 * @returns {String} translated string or annotated key
 * @see {@link doc:context Verb, Noun}
 * @description Takes key and returns string
 *
 * Sometimes it's not an option to use an attribute (e.g. when you want to annotate an attribute value).
 * There's a `translate` filter available for this purpose.
 *
 * ```html
 * <input type="text" placeholder="{{'Username'|translate}}" />
 * ```
 * This filter does not support plural strings.
 *
 * You may want to use {@link guide:custom-annotations custom annotations} to avoid using the `translate` filter all the time. * Is
 */
angular.module('gettext').filter('translate', ["gettextCatalog", function (gettextCatalog) {
    function filter(input, context) {
        return gettextCatalog.getString(input, null, context);
    }
    filter.$stateful = true;
    return filter;
}]);

// Do not edit this file, it is autogenerated using genplurals.py!
angular.module("gettext").factory("gettextPlurals", function () {
    var languageCodes = {
        "pt_BR": "pt_BR",
        "pt-BR": "pt_BR"
    };
    return function (langCode, n) {
        switch (getLanguageCode(langCode)) {
            case "ay":  // Aymará
            case "bo":  // Tibetan
            case "cgg": // Chiga
            case "dz":  // Dzongkha
            case "fa":  // Persian
            case "id":  // Indonesian
            case "ja":  // Japanese
            case "jbo": // Lojban
            case "ka":  // Georgian
            case "kk":  // Kazakh
            case "km":  // Khmer
            case "ko":  // Korean
            case "ky":  // Kyrgyz
            case "lo":  // Lao
            case "ms":  // Malay
            case "my":  // Burmese
            case "sah": // Yakut
            case "su":  // Sundanese
            case "th":  // Thai
            case "tt":  // Tatar
            case "ug":  // Uyghur
            case "vi":  // Vietnamese
            case "wo":  // Wolof
            case "zh":  // Chinese
                // 1 form
                return 0;
            case "is":  // Icelandic
                // 2 forms
                return (n%10!=1 || n%100==11) ? 1 : 0;
            case "jv":  // Javanese
                // 2 forms
                return n!=0 ? 1 : 0;
            case "mk":  // Macedonian
                // 2 forms
                return n==1 || n%10==1 ? 0 : 1;
            case "ach": // Acholi
            case "ak":  // Akan
            case "am":  // Amharic
            case "arn": // Mapudungun
            case "br":  // Breton
            case "fil": // Filipino
            case "fr":  // French
            case "gun": // Gun
            case "ln":  // Lingala
            case "mfe": // Mauritian Creole
            case "mg":  // Malagasy
            case "mi":  // Maori
            case "oc":  // Occitan
            case "pt_BR":  // Brazilian Portuguese
            case "tg":  // Tajik
            case "ti":  // Tigrinya
            case "tr":  // Turkish
            case "uz":  // Uzbek
            case "wa":  // Walloon
            case "zh":  // Chinese
                // 2 forms
                return n>1 ? 1 : 0;
            case "lv":  // Latvian
                // 3 forms
                return (n%10==1 && n%100!=11 ? 0 : n != 0 ? 1 : 2);
            case "lt":  // Lithuanian
                // 3 forms
                return (n%10==1 && n%100!=11 ? 0 : n%10>=2 && (n%100<10 || n%100>=20) ? 1 : 2);
            case "be":  // Belarusian
            case "bs":  // Bosnian
            case "hr":  // Croatian
            case "ru":  // Russian
            case "sr":  // Serbian
            case "uk":  // Ukrainian
                // 3 forms
                return (n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);
            case "mnk": // Mandinka
                // 3 forms
                return (n==0 ? 0 : n==1 ? 1 : 2);
            case "ro":  // Romanian
                // 3 forms
                return (n==1 ? 0 : (n==0 || (n%100 > 0 && n%100 < 20)) ? 1 : 2);
            case "pl":  // Polish
                // 3 forms
                return (n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);
            case "cs":  // Czech
            case "sk":  // Slovak
                // 3 forms
                return (n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2;
            case "sl":  // Slovenian
                // 4 forms
                return (n%100==1 ? 1 : n%100==2 ? 2 : n%100==3 || n%100==4 ? 3 : 0);
            case "mt":  // Maltese
                // 4 forms
                return (n==1 ? 0 : n==0 || ( n%100>1 && n%100<11) ? 1 : (n%100>10 && n%100<20 ) ? 2 : 3);
            case "gd":  // Scottish Gaelic
                // 4 forms
                return (n==1 || n==11) ? 0 : (n==2 || n==12) ? 1 : (n > 2 && n < 20) ? 2 : 3;
            case "cy":  // Welsh
                // 4 forms
                return (n==1) ? 0 : (n==2) ? 1 : (n != 8 && n != 11) ? 2 : 3;
            case "kw":  // Cornish
                // 4 forms
                return (n==1) ? 0 : (n==2) ? 1 : (n == 3) ? 2 : 3;
            case "ga":  // Irish
                // 5 forms
                return n==1 ? 0 : n==2 ? 1 : n<7 ? 2 : n<11 ? 3 : 4;
            case "ar":  // Arabic
                // 6 forms
                return (n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100>=3 && n%100<=10 ? 3 : n%100>=11 ? 4 : 5);
            default: // Everything else
                return n != 1 ? 1 : 0;
        }
    };

    /**
     * Method extracts iso639-2 language code from code with locale e.g. pl_PL, en_US, etc.
     * If it's provided with standalone iso639-2 language code it simply returns it.
     * @param {String} langCode
     * @returns {String} iso639-2 language Code
     */
    function getLanguageCode(langCode) {
        if (!languageCodes[langCode]) {
            languageCodes[langCode] = langCode.split(/\-|_/).shift();
        }
        return languageCodes[langCode];
    }
});

/**
 * @ngdoc factory
 * @module gettext
 * @name gettextUtil
 * @description Utility service for common operations and polyfills.
 */
angular.module('gettext').factory('gettextUtil', function gettextUtil() {
    /**
     * @ngdoc method
     * @name gettextUtil#trim
     * @public
     * @param {string} value String to be trimmed.
     * @description Trim polyfill for old browsers (instead of jQuery). Based on AngularJS-v1.2.2 (angular.js#620).
     *
     * Example
     * ```js
     * gettextUtil.assert('  no blanks  '); // "no blanks"
     * ```
     */
    var trim = (function () {
        if (!String.prototype.trim) {
            return function (value) {
                return (typeof value === 'string') ? value.replace(/^\s*/, '').replace(/\s*$/, '') : value;
            };
        }
        return function (value) {
            return (typeof value === 'string') ? value.trim() : value;
        };
    })();

    /**
     * @ngdoc method
     * @name gettextUtil#assert
     * @public
     * @param {bool} condition condition to check
     * @param {String} missing name of the directive missing attribute
     * @param {String} found name of attribute that has been used with directive
     * @description Throws error if condition is not met, which means that directive was used with certain parameter
     * that requires another one (which is missing).
     *
     * Example
     * ```js
     * gettextUtil.assert(!attrs.translatePlural || attrs.translateN, 'translate-n', 'translate-plural');
     * //You should add a translate-n attribute whenever you add a translate-plural attribute.
     * ```
     */
    function assert(condition, missing, found) {
        if (!condition) {
            throw new Error('You should add a ' + missing + ' attribute whenever you add a ' + found + ' attribute.');
        }
    }

    /**
     * @ngdoc method
     * @name gettextUtil#startsWith
     * @public
     * @param {string} target String on which checking will occur.
     * @param {string} query String expected to be at the beginning of target.
     * @returns {boolean} Returns true if object has no ownProperties. For arrays returns true if length == 0.
     * @description Checks if string starts with another string.
     *
     * Example
     * ```js
     * gettextUtil.startsWith('Home sweet home.', 'Home'); //true
     * gettextUtil.startsWith('Home sweet home.', 'sweet'); //false
     * ```
     */
    function startsWith(target, query) {
        return target.indexOf(query) === 0;
    }

    /**
     * @ngdoc method
     * @name gettextUtil#lcFirst
     * @public
     * @param {string} target String to transform.
     * @returns {string} Strings beginning with lowercase letter.
     * @description Makes first letter of the string lower case
     *
     * Example
     * ```js
     * gettextUtil.lcFirst('Home Sweet Home.'); //'home Sweet Home'
     * gettextUtil.lcFirst('ShouldBeCamelCase.'); //'shouldBeCamelCase'
     * ```
     */
    function lcFirst(target) {
        var first = target.charAt(0).toLowerCase();
        return first + target.substr(1);
    }

    return {
        trim: trim,
        assert: assert,
        startsWith: startsWith,
        lcFirst: lcFirst
    };
});

},{}],2:[function(require,module,exports){
require('./dist/angular-gettext.js');
module.exports = 'gettext';

},{"./dist/angular-gettext.js":1}],3:[function(require,module,exports){
/**
 * @license AngularJS v1.6.8
 * (c) 2010-2017 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular) {'use strict';

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

var $sanitizeMinErr = angular.$$minErr('$sanitize');
var bind;
var extend;
var forEach;
var isDefined;
var lowercase;
var noop;
var nodeContains;
var htmlParser;
var htmlSanitizeWriter;

/**
 * @ngdoc module
 * @name ngSanitize
 * @description
 *
 * The `ngSanitize` module provides functionality to sanitize HTML.
 *
 * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
 */

/**
 * @ngdoc service
 * @name $sanitize
 * @kind function
 *
 * @description
 *   Sanitizes an html string by stripping all potentially dangerous tokens.
 *
 *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are
 *   then serialized back to properly escaped html string. This means that no unsafe input can make
 *   it into the returned string.
 *
 *   The whitelist for URL sanitization of attribute values is configured using the functions
 *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider
 *   `$compileProvider`}.
 *
 *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.
 *
 * @param {string} html HTML input.
 * @returns {string} Sanitized HTML.
 *
 * @example
   <example module="sanitizeExample" deps="angular-sanitize.js" name="sanitize-service">
   <file name="index.html">
     <script>
         angular.module('sanitizeExample', ['ngSanitize'])
           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {
             $scope.snippet =
               '<p style="color:blue">an html\n' +
               '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
               'snippet</p>';
             $scope.deliberatelyTrustDangerousSnippet = function() {
               return $sce.trustAsHtml($scope.snippet);
             };
           }]);
     </script>
     <div ng-controller="ExampleController">
        Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
       <table>
         <tr>
           <td>Directive</td>
           <td>How</td>
           <td>Source</td>
           <td>Rendered</td>
         </tr>
         <tr id="bind-html-with-sanitize">
           <td>ng-bind-html</td>
           <td>Automatically uses $sanitize</td>
           <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
           <td><div ng-bind-html="snippet"></div></td>
         </tr>
         <tr id="bind-html-with-trust">
           <td>ng-bind-html</td>
           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
           <td>
           <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
&lt;/div&gt;</pre>
           </td>
           <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
         </tr>
         <tr id="bind-default">
           <td>ng-bind</td>
           <td>Automatically escapes</td>
           <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
           <td><div ng-bind="snippet"></div></td>
         </tr>
       </table>
       </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should sanitize the html snippet by default', function() {
       expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).
         toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
     });

     it('should inline raw snippet if bound to a trusted value', function() {
       expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).
         toBe("<p style=\"color:blue\">an html\n" +
              "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
              "snippet</p>");
     });

     it('should escape snippet without any filter', function() {
       expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).
         toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
              "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
              "snippet&lt;/p&gt;");
     });

     it('should update', function() {
       element(by.model('snippet')).clear();
       element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).
         toBe('new <b>text</b>');
       expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).toBe(
         'new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).toBe(
         "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
     });
   </file>
   </example>
 */


/**
 * @ngdoc provider
 * @name $sanitizeProvider
 * @this
 *
 * @description
 * Creates and configures {@link $sanitize} instance.
 */
function $SanitizeProvider() {
  var svgEnabled = false;

  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {
    if (svgEnabled) {
      extend(validElements, svgElements);
    }
    return function(html) {
      var buf = [];
      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {
        return !/^unsafe:/.test($$sanitizeUri(uri, isImage));
      }));
      return buf.join('');
    };
  }];


  /**
   * @ngdoc method
   * @name $sanitizeProvider#enableSvg
   * @kind function
   *
   * @description
   * Enables a subset of svg to be supported by the sanitizer.
   *
   * <div class="alert alert-warning">
   *   <p>By enabling this setting without taking other precautions, you might expose your
   *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned
   *   outside of the containing element and be rendered over other elements on the page (e.g. a login
   *   link). Such behavior can then result in phishing incidents.</p>
   *
   *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg
   *   tags within the sanitized content:</p>
   *
   *   <br>
   *
   *   <pre><code>
   *   .rootOfTheIncludedContent svg {
   *     overflow: hidden !important;
   *   }
   *   </code></pre>
   * </div>
   *
   * @param {boolean=} flag Enable or disable SVG support in the sanitizer.
   * @returns {boolean|ng.$sanitizeProvider} Returns the currently configured value if called
   *    without an argument or self for chaining otherwise.
   */
  this.enableSvg = function(enableSvg) {
    if (isDefined(enableSvg)) {
      svgEnabled = enableSvg;
      return this;
    } else {
      return svgEnabled;
    }
  };

  //////////////////////////////////////////////////////////////////////////////////////////////////
  // Private stuff
  //////////////////////////////////////////////////////////////////////////////////////////////////

  bind = angular.bind;
  extend = angular.extend;
  forEach = angular.forEach;
  isDefined = angular.isDefined;
  lowercase = angular.lowercase;
  noop = angular.noop;

  htmlParser = htmlParserImpl;
  htmlSanitizeWriter = htmlSanitizeWriterImpl;

  nodeContains = window.Node.prototype.contains || /** @this */ function(arg) {
    // eslint-disable-next-line no-bitwise
    return !!(this.compareDocumentPosition(arg) & 16);
  };

  // Regular Expressions for parsing tags and attributes
  var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
    // Match everything outside of normal chars and " (quote character)
    NON_ALPHANUMERIC_REGEXP = /([^#-~ |!])/g;


  // Good source of info about elements and attributes
  // http://dev.w3.org/html5/spec/Overview.html#semantics
  // http://simon.html5.org/html-elements

  // Safe Void Elements - HTML5
  // http://dev.w3.org/html5/spec/Overview.html#void-elements
  var voidElements = toMap('area,br,col,hr,img,wbr');

  // Elements that you can, intentionally, leave open (and which close themselves)
  // http://dev.w3.org/html5/spec/Overview.html#optional-tags
  var optionalEndTagBlockElements = toMap('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr'),
      optionalEndTagInlineElements = toMap('rp,rt'),
      optionalEndTagElements = extend({},
                                              optionalEndTagInlineElements,
                                              optionalEndTagBlockElements);

  // Safe Block Elements - HTML5
  var blockElements = extend({}, optionalEndTagBlockElements, toMap('address,article,' +
          'aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
          'h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul'));

  // Inline Elements - HTML5
  var inlineElements = extend({}, optionalEndTagInlineElements, toMap('a,abbr,acronym,b,' +
          'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,' +
          'samp,small,span,strike,strong,sub,sup,time,tt,u,var'));

  // SVG Elements
  // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements
  // Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.
  // They can potentially allow for arbitrary javascript to be executed. See #11290
  var svgElements = toMap('circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,' +
          'hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,' +
          'radialGradient,rect,stop,svg,switch,text,title,tspan');

  // Blocked Elements (will be stripped)
  var blockedElements = toMap('script,style');

  var validElements = extend({},
                                     voidElements,
                                     blockElements,
                                     inlineElements,
                                     optionalEndTagElements);

  //Attributes that have href and hence need to be sanitized
  var uriAttrs = toMap('background,cite,href,longdesc,src,xlink:href');

  var htmlAttrs = toMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +
      'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +
      'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +
      'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +
      'valign,value,vspace,width');

  // SVG attributes (without "id" and "name" attributes)
  // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes
  var svgAttrs = toMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +
      'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +
      'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +
      'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +
      'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +
      'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +
      'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +
      'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +
      'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +
      'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +
      'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +
      'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +
      'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +
      'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +
      'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);

  var validAttrs = extend({},
                                  uriAttrs,
                                  svgAttrs,
                                  htmlAttrs);

  function toMap(str, lowercaseKeys) {
    var obj = {}, items = str.split(','), i;
    for (i = 0; i < items.length; i++) {
      obj[lowercaseKeys ? lowercase(items[i]) : items[i]] = true;
    }
    return obj;
  }

  /**
   * Create an inert document that contains the dirty HTML that needs sanitizing
   * Depending upon browser support we use one of three strategies for doing this.
   * Support: Safari 10.x -> XHR strategy
   * Support: Firefox -> DomParser strategy
   */
  var getInertBodyElement /* function(html: string): HTMLBodyElement */ = (function(window, document) {
    var inertDocument;
    if (document && document.implementation) {
      inertDocument = document.implementation.createHTMLDocument('inert');
    } else {
      throw $sanitizeMinErr('noinert', 'Can\'t create an inert html document');
    }
    var inertBodyElement = (inertDocument.documentElement || inertDocument.getDocumentElement()).querySelector('body');

    // Check for the Safari 10.1 bug - which allows JS to run inside the SVG G element
    inertBodyElement.innerHTML = '<svg><g onload="this.parentNode.remove()"></g></svg>';
    if (!inertBodyElement.querySelector('svg')) {
      return getInertBodyElement_XHR;
    } else {
      // Check for the Firefox bug - which prevents the inner img JS from being sanitized
      inertBodyElement.innerHTML = '<svg><p><style><img src="</style><img src=x onerror=alert(1)//">';
      if (inertBodyElement.querySelector('svg img')) {
        return getInertBodyElement_DOMParser;
      } else {
        return getInertBodyElement_InertDocument;
      }
    }

    function getInertBodyElement_XHR(html) {
      // We add this dummy element to ensure that the rest of the content is parsed as expected
      // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the `<head>` tag.
      html = '<remove></remove>' + html;
      try {
        html = encodeURI(html);
      } catch (e) {
        return undefined;
      }
      var xhr = new window.XMLHttpRequest();
      xhr.responseType = 'document';
      xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);
      xhr.send(null);
      var body = xhr.response.body;
      body.firstChild.remove();
      return body;
    }

    function getInertBodyElement_DOMParser(html) {
      // We add this dummy element to ensure that the rest of the content is parsed as expected
      // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the `<head>` tag.
      html = '<remove></remove>' + html;
      try {
        var body = new window.DOMParser().parseFromString(html, 'text/html').body;
        body.firstChild.remove();
        return body;
      } catch (e) {
        return undefined;
      }
    }

    function getInertBodyElement_InertDocument(html) {
      inertBodyElement.innerHTML = html;

      // Support: IE 9-11 only
      // strip custom-namespaced attributes on IE<=11
      if (document.documentMode) {
        stripCustomNsAttrs(inertBodyElement);
      }

      return inertBodyElement;
    }
  })(window, window.document);

  /**
   * @example
   * htmlParser(htmlString, {
   *     start: function(tag, attrs) {},
   *     end: function(tag) {},
   *     chars: function(text) {},
   *     comment: function(text) {}
   * });
   *
   * @param {string} html string
   * @param {object} handler
   */
  function htmlParserImpl(html, handler) {
    if (html === null || html === undefined) {
      html = '';
    } else if (typeof html !== 'string') {
      html = '' + html;
    }

    var inertBodyElement = getInertBodyElement(html);
    if (!inertBodyElement) return '';

    //mXSS protection
    var mXSSAttempts = 5;
    do {
      if (mXSSAttempts === 0) {
        throw $sanitizeMinErr('uinput', 'Failed to sanitize html because the input is unstable');
      }
      mXSSAttempts--;

      // trigger mXSS if it is going to happen by reading and writing the innerHTML
      html = inertBodyElement.innerHTML;
      inertBodyElement = getInertBodyElement(html);
    } while (html !== inertBodyElement.innerHTML);

    var node = inertBodyElement.firstChild;
    while (node) {
      switch (node.nodeType) {
        case 1: // ELEMENT_NODE
          handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));
          break;
        case 3: // TEXT NODE
          handler.chars(node.textContent);
          break;
      }

      var nextNode;
      if (!(nextNode = node.firstChild)) {
        if (node.nodeType === 1) {
          handler.end(node.nodeName.toLowerCase());
        }
        nextNode = getNonDescendant('nextSibling', node);
        if (!nextNode) {
          while (nextNode == null) {
            node = getNonDescendant('parentNode', node);
            if (node === inertBodyElement) break;
            nextNode = getNonDescendant('nextSibling', node);
            if (node.nodeType === 1) {
              handler.end(node.nodeName.toLowerCase());
            }
          }
        }
      }
      node = nextNode;
    }

    while ((node = inertBodyElement.firstChild)) {
      inertBodyElement.removeChild(node);
    }
  }

  function attrToMap(attrs) {
    var map = {};
    for (var i = 0, ii = attrs.length; i < ii; i++) {
      var attr = attrs[i];
      map[attr.name] = attr.value;
    }
    return map;
  }


  /**
   * Escapes all potentially dangerous characters, so that the
   * resulting string can be safely inserted into attribute or
   * element text.
   * @param value
   * @returns {string} escaped text
   */
  function encodeEntities(value) {
    return value.
      replace(/&/g, '&amp;').
      replace(SURROGATE_PAIR_REGEXP, function(value) {
        var hi = value.charCodeAt(0);
        var low = value.charCodeAt(1);
        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
      }).
      replace(NON_ALPHANUMERIC_REGEXP, function(value) {
        return '&#' + value.charCodeAt(0) + ';';
      }).
      replace(/</g, '&lt;').
      replace(/>/g, '&gt;');
  }

  /**
   * create an HTML/XML writer which writes to buffer
   * @param {Array} buf use buf.join('') to get out sanitized html string
   * @returns {object} in the form of {
   *     start: function(tag, attrs) {},
   *     end: function(tag) {},
   *     chars: function(text) {},
   *     comment: function(text) {}
   * }
   */
  function htmlSanitizeWriterImpl(buf, uriValidator) {
    var ignoreCurrentElement = false;
    var out = bind(buf, buf.push);
    return {
      start: function(tag, attrs) {
        tag = lowercase(tag);
        if (!ignoreCurrentElement && blockedElements[tag]) {
          ignoreCurrentElement = tag;
        }
        if (!ignoreCurrentElement && validElements[tag] === true) {
          out('<');
          out(tag);
          forEach(attrs, function(value, key) {
            var lkey = lowercase(key);
            var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');
            if (validAttrs[lkey] === true &&
              (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
              out(' ');
              out(key);
              out('="');
              out(encodeEntities(value));
              out('"');
            }
          });
          out('>');
        }
      },
      end: function(tag) {
        tag = lowercase(tag);
        if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {
          out('</');
          out(tag);
          out('>');
        }
        // eslint-disable-next-line eqeqeq
        if (tag == ignoreCurrentElement) {
          ignoreCurrentElement = false;
        }
      },
      chars: function(chars) {
        if (!ignoreCurrentElement) {
          out(encodeEntities(chars));
        }
      }
    };
  }


  /**
   * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare
   * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want
   * to allow any of these custom attributes. This method strips them all.
   *
   * @param node Root element to process
   */
  function stripCustomNsAttrs(node) {
    while (node) {
      if (node.nodeType === window.Node.ELEMENT_NODE) {
        var attrs = node.attributes;
        for (var i = 0, l = attrs.length; i < l; i++) {
          var attrNode = attrs[i];
          var attrName = attrNode.name.toLowerCase();
          if (attrName === 'xmlns:ns1' || attrName.lastIndexOf('ns1:', 0) === 0) {
            node.removeAttributeNode(attrNode);
            i--;
            l--;
          }
        }
      }

      var nextNode = node.firstChild;
      if (nextNode) {
        stripCustomNsAttrs(nextNode);
      }

      node = getNonDescendant('nextSibling', node);
    }
  }

  function getNonDescendant(propName, node) {
    // An element is clobbered if its `propName` property points to one of its descendants
    var nextNode = node[propName];
    if (nextNode && nodeContains.call(node, nextNode)) {
      throw $sanitizeMinErr('elclob', 'Failed to sanitize html because the element is clobbered: {0}', node.outerHTML || node.outerText);
    }
    return nextNode;
  }
}

function sanitizeText(chars) {
  var buf = [];
  var writer = htmlSanitizeWriter(buf, noop);
  writer.chars(chars);
  return buf.join('');
}


// define ngSanitize module and register $sanitize service
angular.module('ngSanitize', [])
  .provider('$sanitize', $SanitizeProvider)
  .info({ angularVersion: '1.6.8' });

/**
 * @ngdoc filter
 * @name linky
 * @kind function
 *
 * @description
 * Finds links in text input and turns them into html links. Supports `http/https/ftp/sftp/mailto` and
 * plain email address links.
 *
 * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
 *
 * @param {string} text Input text.
 * @param {string} [target] Window (`_blank|_self|_parent|_top`) or named frame to open links in.
 * @param {object|function(url)} [attributes] Add custom attributes to the link element.
 *
 *    Can be one of:
 *
 *    - `object`: A map of attributes
 *    - `function`: Takes the url as a parameter and returns a map of attributes
 *
 *    If the map of attributes contains a value for `target`, it overrides the value of
 *    the target parameter.
 *
 *
 * @returns {string} Html-linkified and {@link $sanitize sanitized} text.
 *
 * @usage
   <span ng-bind-html="linky_expression | linky"></span>
 *
 * @example
   <example module="linkyExample" deps="angular-sanitize.js" name="linky-filter">
     <file name="index.html">
       <div ng-controller="ExampleController">
       Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
       <table>
         <tr>
           <th>Filter</th>
           <th>Source</th>
           <th>Rendered</th>
         </tr>
         <tr id="linky-filter">
           <td>linky filter</td>
           <td>
             <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
           </td>
           <td>
             <div ng-bind-html="snippet | linky"></div>
           </td>
         </tr>
         <tr id="linky-target">
          <td>linky target</td>
          <td>
            <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
          </td>
          <td>
            <div ng-bind-html="snippetWithSingleURL | linky:'_blank'"></div>
          </td>
         </tr>
         <tr id="linky-custom-attributes">
          <td>linky custom attributes</td>
          <td>
            <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"&gt;<br>&lt;/div&gt;</pre>
          </td>
          <td>
            <div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"></div>
          </td>
         </tr>
         <tr id="escaped-html">
           <td>no filter</td>
           <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
           <td><div ng-bind="snippet"></div></td>
         </tr>
       </table>
     </file>
     <file name="script.js">
       angular.module('linkyExample', ['ngSanitize'])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.snippet =
             'Pretty text with some links:\n' +
             'http://angularjs.org/,\n' +
             'mailto:us@somewhere.org,\n' +
             'another@somewhere.org,\n' +
             'and one more: ftp://127.0.0.1/.';
           $scope.snippetWithSingleURL = 'http://angularjs.org/';
         }]);
     </file>
     <file name="protractor.js" type="protractor">
       it('should linkify the snippet with urls', function() {
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
       });

       it('should not linkify snippet without the linky filter', function() {
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
       });

       it('should update', function() {
         element(by.model('snippet')).clear();
         element(by.model('snippet')).sendKeys('new http://link.');
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('new http://link.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
             .toBe('new http://link.');
       });

       it('should work with the target property', function() {
        expect(element(by.id('linky-target')).
            element(by.binding("snippetWithSingleURL | linky:'_blank'")).getText()).
            toBe('http://angularjs.org/');
        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
       });

       it('should optionally add custom attributes', function() {
        expect(element(by.id('linky-custom-attributes')).
            element(by.binding("snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}")).getText()).
            toBe('http://angularjs.org/');
        expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');
       });
     </file>
   </example>
 */
angular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {
  var LINKY_URL_REGEXP =
        /((s?ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,
      MAILTO_REGEXP = /^mailto:/i;

  var linkyMinErr = angular.$$minErr('linky');
  var isDefined = angular.isDefined;
  var isFunction = angular.isFunction;
  var isObject = angular.isObject;
  var isString = angular.isString;

  return function(text, target, attributes) {
    if (text == null || text === '') return text;
    if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);

    var attributesFn =
      isFunction(attributes) ? attributes :
      isObject(attributes) ? function getAttributesObject() {return attributes;} :
      function getEmptyAttributesObject() {return {};};

    var match;
    var raw = text;
    var html = [];
    var url;
    var i;
    while ((match = raw.match(LINKY_URL_REGEXP))) {
      // We can not end in these as they are sometimes found at the end of the sentence
      url = match[0];
      // if we did not match ftp/http/www/mailto then assume mailto
      if (!match[2] && !match[4]) {
        url = (match[3] ? 'http://' : 'mailto:') + url;
      }
      i = match.index;
      addText(raw.substr(0, i));
      addLink(url, match[0].replace(MAILTO_REGEXP, ''));
      raw = raw.substring(i + match[0].length);
    }
    addText(raw);
    return $sanitize(html.join(''));

    function addText(text) {
      if (!text) {
        return;
      }
      html.push(sanitizeText(text));
    }

    function addLink(url, text) {
      var key, linkAttributes = attributesFn(url);
      html.push('<a ');

      for (key in linkAttributes) {
        html.push(key + '="' + linkAttributes[key] + '" ');
      }

      if (isDefined(target) && !('target' in linkAttributes)) {
        html.push('target="',
                  target,
                  '" ');
      }
      html.push('href="',
                url.replace(/"/g, '&quot;'),
                '">');
      addText(text);
      html.push('</a>');
    }
  };
}]);


})(window, window.angular);

},{}],4:[function(require,module,exports){
require('./angular-sanitize');
module.exports = 'ngSanitize';

},{"./angular-sanitize":3}],5:[function(require,module,exports){
/**
 * State-based routing for AngularJS
 * @version v0.3.2
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

/* commonjs package manager support (eg componentjs) */
if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports){
  module.exports = 'ui.router';
}

(function (window, angular, undefined) {
/*jshint globalstrict:true*/
/*global angular:false*/
'use strict';

var isDefined = angular.isDefined,
    isFunction = angular.isFunction,
    isString = angular.isString,
    isObject = angular.isObject,
    isArray = angular.isArray,
    forEach = angular.forEach,
    extend = angular.extend,
    copy = angular.copy,
    toJson = angular.toJson;

function inherit(parent, extra) {
  return extend(new (extend(function() {}, { prototype: parent }))(), extra);
}

function merge(dst) {
  forEach(arguments, function(obj) {
    if (obj !== dst) {
      forEach(obj, function(value, key) {
        if (!dst.hasOwnProperty(key)) dst[key] = value;
      });
    }
  });
  return dst;
}

/**
 * Finds the common ancestor path between two states.
 *
 * @param {Object} first The first state.
 * @param {Object} second The second state.
 * @return {Array} Returns an array of state names in descending order, not including the root.
 */
function ancestors(first, second) {
  var path = [];

  for (var n in first.path) {
    if (first.path[n] !== second.path[n]) break;
    path.push(first.path[n]);
  }
  return path;
}

/**
 * IE8-safe wrapper for `Object.keys()`.
 *
 * @param {Object} object A JavaScript object.
 * @return {Array} Returns the keys of the object as an array.
 */
function objectKeys(object) {
  if (Object.keys) {
    return Object.keys(object);
  }
  var result = [];

  forEach(object, function(val, key) {
    result.push(key);
  });
  return result;
}

/**
 * IE8-safe wrapper for `Array.prototype.indexOf()`.
 *
 * @param {Array} array A JavaScript array.
 * @param {*} value A value to search the array for.
 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
 */
function indexOf(array, value) {
  if (Array.prototype.indexOf) {
    return array.indexOf(value, Number(arguments[2]) || 0);
  }
  var len = array.length >>> 0, from = Number(arguments[2]) || 0;
  from = (from < 0) ? Math.ceil(from) : Math.floor(from);

  if (from < 0) from += len;

  for (; from < len; from++) {
    if (from in array && array[from] === value) return from;
  }
  return -1;
}

/**
 * Merges a set of parameters with all parameters inherited between the common parents of the
 * current state and a given destination state.
 *
 * @param {Object} currentParams The value of the current state parameters ($stateParams).
 * @param {Object} newParams The set of parameters which will be composited with inherited params.
 * @param {Object} $current Internal definition of object representing the current state.
 * @param {Object} $to Internal definition of object representing state to transition to.
 */
function inheritParams(currentParams, newParams, $current, $to) {
  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

  for (var i in parents) {
    if (!parents[i] || !parents[i].params) continue;
    parentParams = objectKeys(parents[i].params);
    if (!parentParams.length) continue;

    for (var j in parentParams) {
      if (indexOf(inheritList, parentParams[j]) >= 0) continue;
      inheritList.push(parentParams[j]);
      inherited[parentParams[j]] = currentParams[parentParams[j]];
    }
  }
  return extend({}, inherited, newParams);
}

/**
 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
 *
 * @param {Object} a The first object.
 * @param {Object} b The second object.
 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
 *                     it defaults to the list of keys in `a`.
 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
 */
function equalForKeys(a, b, keys) {
  if (!keys) {
    keys = [];
    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
  }

  for (var i=0; i<keys.length; i++) {
    var k = keys[i];
    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
  }
  return true;
}

/**
 * Returns the subset of an object, based on a list of keys.
 *
 * @param {Array} keys
 * @param {Object} values
 * @return {Boolean} Returns a subset of `values`.
 */
function filterByKeys(keys, values) {
  var filtered = {};

  forEach(keys, function (name) {
    filtered[name] = values[name];
  });
  return filtered;
}

// like _.indexBy
// when you know that your index values will be unique, or you want last-one-in to win
function indexBy(array, propName) {
  var result = {};
  forEach(array, function(item) {
    result[item[propName]] = item;
  });
  return result;
}

// extracted from underscore.js
// Return a copy of the object only containing the whitelisted properties.
function pick(obj) {
  var copy = {};
  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
  forEach(keys, function(key) {
    if (key in obj) copy[key] = obj[key];
  });
  return copy;
}

// extracted from underscore.js
// Return a copy of the object omitting the blacklisted properties.
function omit(obj) {
  var copy = {};
  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
  for (var key in obj) {
    if (indexOf(keys, key) == -1) copy[key] = obj[key];
  }
  return copy;
}

function pluck(collection, key) {
  var result = isArray(collection) ? [] : {};

  forEach(collection, function(val, i) {
    result[i] = isFunction(key) ? key(val) : val[key];
  });
  return result;
}

function filter(collection, callback) {
  var array = isArray(collection);
  var result = array ? [] : {};
  forEach(collection, function(val, i) {
    if (callback(val, i)) {
      result[array ? result.length : i] = val;
    }
  });
  return result;
}

function map(collection, callback) {
  var result = isArray(collection) ? [] : {};

  forEach(collection, function(val, i) {
    result[i] = callback(val, i);
  });
  return result;
}

// issue #2676 #2889
function silenceUncaughtInPromise (promise) {
  return promise.then(undefined, function() {}) && promise;
}

/**
 * @ngdoc overview
 * @name ui.router.util
 *
 * @description
 * # ui.router.util sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 *
 */
angular.module('ui.router.util', ['ng']);

/**
 * @ngdoc overview
 * @name ui.router.router
 * 
 * @requires ui.router.util
 *
 * @description
 * # ui.router.router sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 */
angular.module('ui.router.router', ['ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router.state
 * 
 * @requires ui.router.router
 * @requires ui.router.util
 *
 * @description
 * # ui.router.state sub-module
 *
 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 * 
 */
angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router
 *
 * @requires ui.router.state
 *
 * @description
 * # ui.router
 * 
 * ## The main module for ui.router 
 * There are several sub-modules included with the ui.router module, however only this module is needed
 * as a dependency within your angular app. The other modules are for organization purposes. 
 *
 * The modules are:
 * * ui.router - the main "umbrella" module
 * * ui.router.router - 
 * 
 * *You'll need to include **only** this module as the dependency within your angular app.*
 * 
 * <pre>
 * <!doctype html>
 * <html ng-app="myApp">
 * <head>
 *   <script src="js/angular.js"></script>
 *   <!-- Include the ui-router script -->
 *   <script src="js/angular-ui-router.min.js"></script>
 *   <script>
 *     // ...and add 'ui.router' as a dependency
 *     var myApp = angular.module('myApp', ['ui.router']);
 *   </script>
 * </head>
 * <body>
 * </body>
 * </html>
 * </pre>
 */
angular.module('ui.router', ['ui.router.state']);

angular.module('ui.router.compat', ['ui.router']);

/**
 * @ngdoc object
 * @name ui.router.util.$resolve
 *
 * @requires $q
 * @requires $injector
 *
 * @description
 * Manages resolution of (acyclic) graphs of promises.
 */
$Resolve.$inject = ['$q', '$injector'];
function $Resolve(  $q,    $injector) {
  
  var VISIT_IN_PROGRESS = 1,
      VISIT_DONE = 2,
      NOTHING = {},
      NO_DEPENDENCIES = [],
      NO_LOCALS = NOTHING,
      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });
  

  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#study
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Studies a set of invocables that are likely to be used multiple times.
   * <pre>
   * $resolve.study(invocables)(locals, parent, self)
   * </pre>
   * is equivalent to
   * <pre>
   * $resolve.resolve(invocables, locals, parent, self)
   * </pre>
   * but the former is more efficient (in fact `resolve` just calls `study` 
   * internally).
   *
   * @param {object} invocables Invocable objects
   * @return {function} a function to pass in locals, parent and self
   */
  this.study = function (invocables) {
    if (!isObject(invocables)) throw new Error("'invocables' must be an object");
    var invocableKeys = objectKeys(invocables || {});
    
    // Perform a topological sort of invocables to build an ordered plan
    var plan = [], cycle = [], visited = {};
    function visit(value, key) {
      if (visited[key] === VISIT_DONE) return;
      
      cycle.push(key);
      if (visited[key] === VISIT_IN_PROGRESS) {
        cycle.splice(0, indexOf(cycle, key));
        throw new Error("Cyclic dependency: " + cycle.join(" -> "));
      }
      visited[key] = VISIT_IN_PROGRESS;
      
      if (isString(value)) {
        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);
      } else {
        var params = $injector.annotate(value);
        forEach(params, function (param) {
          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
        });
        plan.push(key, value, params);
      }
      
      cycle.pop();
      visited[key] = VISIT_DONE;
    }
    forEach(invocables, visit);
    invocables = cycle = visited = null; // plan is all that's required
    
    function isResolve(value) {
      return isObject(value) && value.then && value.$$promises;
    }
    
    return function (locals, parent, self) {
      if (isResolve(locals) && self === undefined) {
        self = parent; parent = locals; locals = null;
      }
      if (!locals) locals = NO_LOCALS;
      else if (!isObject(locals)) {
        throw new Error("'locals' must be an object");
      }       
      if (!parent) parent = NO_PARENT;
      else if (!isResolve(parent)) {
        throw new Error("'parent' must be a promise returned by $resolve.resolve()");
      }
      
      // To complete the overall resolution, we have to wait for the parent
      // promise and for the promise for each invokable in our plan.
      var resolution = $q.defer(),
          result = resolution.promise,
          promises = result.$$promises = {},
          values = extend({}, locals),
          wait = 1 + plan.length/3,
          merged = false;
          
      function done() {
        // Merge parent values we haven't got yet and publish our own $$values
        if (!--wait) {
          if (!merged) merge(values, parent.$$values); 
          result.$$values = values;
          result.$$promises = result.$$promises || true; // keep for isResolve()
          delete result.$$inheritedValues;
          resolution.resolve(values);
        }
      }
      
      function fail(reason) {
        result.$$failure = reason;
        resolution.reject(reason);
      }

      // Short-circuit if parent has already failed
      if (isDefined(parent.$$failure)) {
        fail(parent.$$failure);
        return result;
      }
      
      if (parent.$$inheritedValues) {
        merge(values, omit(parent.$$inheritedValues, invocableKeys));
      }

      // Merge parent values if the parent has already resolved, or merge
      // parent promises and wait if the parent resolve is still in progress.
      extend(promises, parent.$$promises);
      if (parent.$$values) {
        merged = merge(values, omit(parent.$$values, invocableKeys));
        result.$$inheritedValues = omit(parent.$$values, invocableKeys);
        done();
      } else {
        if (parent.$$inheritedValues) {
          result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
        }        
        parent.then(done, fail);
      }
      
      // Process each invocable in the plan, but ignore any where a local of the same name exists.
      for (var i=0, ii=plan.length; i<ii; i+=3) {
        if (locals.hasOwnProperty(plan[i])) done();
        else invoke(plan[i], plan[i+1], plan[i+2]);
      }
      
      function invoke(key, invocable, params) {
        // Create a deferred for this invocation. Failures will propagate to the resolution as well.
        var invocation = $q.defer(), waitParams = 0;
        function onfailure(reason) {
          invocation.reject(reason);
          fail(reason);
        }
        // Wait for any parameter that we have a promise for (either from parent or from this
        // resolve; in that case study() will have made sure it's ordered before us in the plan).
        forEach(params, function (dep) {
          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
            waitParams++;
            promises[dep].then(function (result) {
              values[dep] = result;
              if (!(--waitParams)) proceed();
            }, onfailure);
          }
        });
        if (!waitParams) proceed();
        function proceed() {
          if (isDefined(result.$$failure)) return;
          try {
            invocation.resolve($injector.invoke(invocable, self, values));
            invocation.promise.then(function (result) {
              values[key] = result;
              done();
            }, onfailure);
          } catch (e) {
            onfailure(e);
          }
        }
        // Publish promise synchronously; invocations further down in the plan may depend on it.
        promises[key] = invocation.promise;
      }
      
      return result;
    };
  };
  
  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#resolve
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Resolves a set of invocables. An invocable is a function to be invoked via 
   * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
   * An invocable can either return a value directly,
   * or a `$q` promise. If a promise is returned it will be resolved and the 
   * resulting value will be used instead. Dependencies of invocables are resolved 
   * (in this order of precedence)
   *
   * - from the specified `locals`
   * - from another invocable that is part of this `$resolve` call
   * - from an invocable that is inherited from a `parent` call to `$resolve` 
   *   (or recursively
   * - from any ancestor `$resolve` of that parent).
   *
   * The return value of `$resolve` is a promise for an object that contains 
   * (in this order of precedence)
   *
   * - any `locals` (if specified)
   * - the resolved return values of all injectables
   * - any values inherited from a `parent` call to `$resolve` (if specified)
   *
   * The promise will resolve after the `parent` promise (if any) and all promises 
   * returned by injectables have been resolved. If any invocable 
   * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
   * invocable is rejected, the `$resolve` promise is immediately rejected with the 
   * same error. A rejection of a `parent` promise (if specified) will likewise be 
   * propagated immediately. Once the `$resolve` promise has been rejected, no 
   * further invocables will be called.
   * 
   * Cyclic dependencies between invocables are not permitted and will cause `$resolve`
   * to throw an error. As a special case, an injectable can depend on a parameter 
   * with the same name as the injectable, which will be fulfilled from the `parent` 
   * injectable of the same name. This allows inherited values to be decorated. 
   * Note that in this case any other injectable in the same `$resolve` with the same
   * dependency would see the decorated value, not the inherited value.
   *
   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
   * exception.
   *
   * Invocables are invoked eagerly as soon as all dependencies are available. 
   * This is true even for dependencies inherited from a `parent` call to `$resolve`.
   *
   * As a special case, an invocable can be a string, in which case it is taken to 
   * be a service name to be passed to `$injector.get()`. This is supported primarily 
   * for backwards-compatibility with the `resolve` property of `$routeProvider` 
   * routes.
   *
   * @param {object} invocables functions to invoke or 
   * `$injector` services to fetch.
   * @param {object} locals  values to make available to the injectables
   * @param {object} parent  a promise returned by another call to `$resolve`.
   * @param {object} self  the `this` for the invoked methods
   * @return {object} Promise for an object that contains the resolved return value
   * of all invocables, as well as any inherited and local values.
   */
  this.resolve = function (invocables, locals, parent, self) {
    return this.study(invocables)(locals, parent, self);
  };
}

angular.module('ui.router.util').service('$resolve', $Resolve);


/**
 * @ngdoc object
 * @name ui.router.util.$templateFactory
 *
 * @requires $http
 * @requires $templateCache
 * @requires $injector
 *
 * @description
 * Service. Manages loading of templates.
 */
$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
function $TemplateFactory(  $http,   $templateCache,   $injector) {

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromConfig
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a configuration object. 
   *
   * @param {object} config Configuration object for which to load a template. 
   * The following properties are search in the specified order, and the first one 
   * that is defined is used to create the template:
   *
   * @param {string|object} config.template html string template or function to 
   * load via {@link ui.router.util.$templateFactory#fromString fromString}.
   * @param {string|object} config.templateUrl url to load or a function returning 
   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
   * @param {Function} config.templateProvider function to invoke via 
   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
   * @param {object} params  Parameters to pass to the template function.
   * @param {object} locals Locals to pass to `invoke` if the template is loaded 
   * via a `templateProvider`. Defaults to `{ params: params }`.
   *
   * @return {string|object}  The template html as a string, or a promise for 
   * that string,or `null` if no template is configured.
   */
  this.fromConfig = function (config, params, locals) {
    return (
      isDefined(config.template) ? this.fromString(config.template, params) :
      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
      null
    );
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromString
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a string or a function returning a string.
   *
   * @param {string|object} template html template as a string or function that 
   * returns an html template as a string.
   * @param {object} params Parameters to pass to the template function.
   *
   * @return {string|object} The template html as a string, or a promise for that 
   * string.
   */
  this.fromString = function (template, params) {
    return isFunction(template) ? template(params) : template;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromUrl
   * @methodOf ui.router.util.$templateFactory
   * 
   * @description
   * Loads a template from the a URL via `$http` and `$templateCache`.
   *
   * @param {string|Function} url url of the template to load, or a function 
   * that returns a url.
   * @param {Object} params Parameters to pass to the url function.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
  this.fromUrl = function (url, params) {
    if (isFunction(url)) url = url(params);
    if (url == null) return null;
    else return $http
        .get(url, { cache: $templateCache, headers: { Accept: 'text/html' }})
        .then(function(response) { return response.data; });
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromProvider
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template by invoking an injectable provider function.
   *
   * @param {Function} provider Function to invoke via `$injector.invoke`
   * @param {Object} params Parameters for the template.
   * @param {Object} locals Locals to pass to `invoke`. Defaults to 
   * `{ params: params }`.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
  this.fromProvider = function (provider, params, locals) {
    return $injector.invoke(provider, null, locals || { params: params });
  };
}

angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

var $$UMFP; // reference to $UrlMatcherFactoryProvider

/**
 * @ngdoc object
 * @name ui.router.util.type:UrlMatcher
 *
 * @description
 * Matches URLs against patterns and extracts named parameters from the path or the search
 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
 * do not influence whether or not a URL is matched, but their values are passed through into
 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
 *
 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
 * syntax, which optionally allows a regular expression for the parameter to be specified:
 *
 * * `':'` name - colon placeholder
 * * `'*'` name - catch-all placeholder
 * * `'{' name '}'` - curly placeholder
 * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
 *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
 *
 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
 * must be unique within the pattern (across both path and search parameters). For colon
 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
 * number of characters other than '/'. For catch-all placeholders the path parameter matches
 * any number of characters.
 *
 * Examples:
 *
 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
 * * `'/user/{id:[^/]*}'` - Same as the previous example.
 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
 *   parameter consists of 1 to 8 hex digits.
 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
 *   path into the parameter 'path'.
 * * `'/files/*path'` - ditto.
 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
 *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
 *
 * @param {string} pattern  The pattern to compile into a matcher.
 * @param {Object} config  A configuration object hash:
 * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
 *   an existing UrlMatcher
 *
 * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
 * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
 *
 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
 *   non-null) will start with this prefix.
 *
 * @property {string} source  The pattern that was passed into the constructor
 *
 * @property {string} sourcePath  The path portion of the source property
 *
 * @property {string} sourceSearch  The search portion of the source property
 *
 * @property {string} regex  The constructed regex that will be used to match against the url when
 *   it is time to determine which url will match.
 *
 * @returns {Object}  New `UrlMatcher` object
 */
function UrlMatcher(pattern, config, parentMatcher) {
  config = extend({ params: {} }, isObject(config) ? config : {});

  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
  //   '*' name
  //   ':' name
  //   '{' name '}'
  //   '{' name ':' regexp '}'
  // The regular expression is somewhat complicated due to the need to allow curly braces
  // inside the regular expression. The placeholder regexp breaks down as follows:
  //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
  //    \{([\w\[\]]+)(?:\:\s*( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
  //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
  //    [^{}\\]+                       - anything other than curly braces or backslash
  //    \\.                            - a backslash escape
  //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
  var placeholder       = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      compiled = '^', last = 0, m,
      segments = this.segments = [],
      parentParams = parentMatcher ? parentMatcher.params : {},
      params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),
      paramNames = [];

  function addParameter(id, type, config, location) {
    paramNames.push(id);
    if (parentParams[id]) return parentParams[id];
    if (!/^\w+([-.]+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
    if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
    params[id] = new $$UMFP.Param(id, type, config, location);
    return params[id];
  }

  function quoteRegExp(string, pattern, squash, optional) {
    var surroundPattern = ['',''], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
    if (!pattern) return result;
    switch(squash) {
      case false: surroundPattern = ['(', ')' + (optional ? "?" : "")]; break;
      case true:
        result = result.replace(/\/$/, '');
        surroundPattern = ['(?:\/(', ')|\/)?'];
      break;
      default:    surroundPattern = ['(' + squash + "|", ')?']; break;
    }
    return result + surroundPattern[0] + pattern + surroundPattern[1];
  }

  this.source = pattern;

  // Split into static segments separated by path parameter placeholders.
  // The number of segments is always 1 more than the number of parameters.
  function matchDetails(m, isSearch) {
    var id, regexp, segment, type, cfg, arrayMode;
    id          = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
    cfg         = config.params[id];
    segment     = pattern.substring(last, m.index);
    regexp      = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);

    if (regexp) {
      type      = $$UMFP.type(regexp) || inherit($$UMFP.type("string"), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });
    }

    return {
      id: id, regexp: regexp, segment: segment, type: type, cfg: cfg
    };
  }

  var p, param, segment;
  while ((m = placeholder.exec(pattern))) {
    p = matchDetails(m, false);
    if (p.segment.indexOf('?') >= 0) break; // we're into the search part

    param = addParameter(p.id, p.type, p.cfg, "path");
    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
    segments.push(p.segment);
    last = placeholder.lastIndex;
  }
  segment = pattern.substring(last);

  // Find any search parameter names and remove them from the last segment
  var i = segment.indexOf('?');

  if (i >= 0) {
    var search = this.sourceSearch = segment.substring(i);
    segment = segment.substring(0, i);
    this.sourcePath = pattern.substring(0, last + i);

    if (search.length > 0) {
      last = 0;
      while ((m = searchPlaceholder.exec(search))) {
        p = matchDetails(m, true);
        param = addParameter(p.id, p.type, p.cfg, "search");
        last = placeholder.lastIndex;
        // check if ?&
      }
    }
  } else {
    this.sourcePath = pattern;
    this.sourceSearch = '';
  }

  compiled += quoteRegExp(segment) + (config.strict === false ? '\/?' : '') + '$';
  segments.push(segment);

  this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
  this.prefix = segments[0];
  this.$$paramNames = paramNames;
}

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#concat
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns a new matcher for a pattern constructed by appending the path part and adding the
 * search parameters of the specified pattern to this pattern. The current pattern is not
 * modified. This can be understood as creating a pattern for URLs that are relative to (or
 * suffixes of) the current pattern.
 *
 * @example
 * The following two matchers are equivalent:
 * <pre>
 * new UrlMatcher('/user/{id}?q').concat('/details?date');
 * new UrlMatcher('/user/{id}/details?q&date');
 * </pre>
 *
 * @param {string} pattern  The pattern to append.
 * @param {Object} config  An object hash of the configuration for the matcher.
 * @returns {UrlMatcher}  A matcher for the concatenated pattern.
 */
UrlMatcher.prototype.concat = function (pattern, config) {
  // Because order of search parameters is irrelevant, we can add our own search
  // parameters to the end of the new pattern. Parse the new pattern by itself
  // and then join the bits together, but it's much easier to do this on a string level.
  var defaultConfig = {
    caseInsensitive: $$UMFP.caseInsensitive(),
    strict: $$UMFP.strictMode(),
    squash: $$UMFP.defaultSquashPolicy()
  };
  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
};

UrlMatcher.prototype.toString = function () {
  return this.source;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#exec
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Tests the specified path against this matcher, and returns an object containing the captured
 * parameter values, or null if the path does not match. The returned object contains the values
 * of any search parameters that are mentioned in the pattern, but their value may be null if
 * they are not present in `searchParams`. This means that search parameters are always treated
 * as optional.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
 *   x: '1', q: 'hello'
 * });
 * // returns { id: 'bob', q: 'hello', r: null }
 * </pre>
 *
 * @param {string} path  The URL path to match, e.g. `$location.path()`.
 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
 * @returns {Object}  The captured parameter values.
 */
UrlMatcher.prototype.exec = function (path, searchParams) {
  var m = this.regexp.exec(path);
  if (!m) return null;
  searchParams = searchParams || {};

  var paramNames = this.parameters(), nTotal = paramNames.length,
    nPath = this.segments.length - 1,
    values = {}, i, j, cfg, paramName;

  if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

  function decodePathArray(string) {
    function reverseString(str) { return str.split("").reverse().join(""); }
    function unquoteDashes(str) { return str.replace(/\\-/g, "-"); }

    var split = reverseString(string).split(/-(?!\\)/);
    var allReversed = map(split, reverseString);
    return map(allReversed, unquoteDashes).reverse();
  }

  var param, paramVal;
  for (i = 0; i < nPath; i++) {
    paramName = paramNames[i];
    param = this.params[paramName];
    paramVal = m[i+1];
    // if the param value matches a pre-replace pair, replace the value before decoding.
    for (j = 0; j < param.replace.length; j++) {
      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
    }
    if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
    if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
    values[paramName] = param.value(paramVal);
  }
  for (/**/; i < nTotal; i++) {
    paramName = paramNames[i];
    values[paramName] = this.params[paramName].value(searchParams[paramName]);
    param = this.params[paramName];
    paramVal = searchParams[paramName];
    for (j = 0; j < param.replace.length; j++) {
      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
    }
    if (isDefined(paramVal)) paramVal = param.type.decode(paramVal);
    values[paramName] = param.value(paramVal);
  }

  return values;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#parameters
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns the names of all path and search parameters of this pattern in an unspecified order.
 *
 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
 *    pattern has no parameters, an empty array is returned.
 */
UrlMatcher.prototype.parameters = function (param) {
  if (!isDefined(param)) return this.$$paramNames;
  return this.params[param] || null;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#validates
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Checks an object hash of parameters to validate their correctness according to the parameter
 * types of this `UrlMatcher`.
 *
 * @param {Object} params The object hash of parameters to validate.
 * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
 */
UrlMatcher.prototype.validates = function (params) {
  return this.params.$$validates(params);
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#format
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Creates a URL that matches this pattern by substituting the specified values
 * for the path and search parameters. Null values for path parameters are
 * treated as empty strings.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
 * // returns '/user/bob?q=yes'
 * </pre>
 *
 * @param {Object} values  the values to substitute for the parameters in this pattern.
 * @returns {string}  the formatted URL (path and optionally search part).
 */
UrlMatcher.prototype.format = function (values) {
  values = values || {};
  var segments = this.segments, params = this.parameters(), paramset = this.params;
  if (!this.validates(values)) return null;

  var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];

  function encodeDashes(str) { // Replace dashes with encoded "\-"
    return encodeURIComponent(str).replace(/-/g, function(c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });
  }

  for (i = 0; i < nTotal; i++) {
    var isPathParam = i < nPath;
    var name = params[i], param = paramset[name], value = param.value(values[name]);
    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
    var squash = isDefaultValue ? param.squash : false;
    var encoded = param.type.encode(value);

    if (isPathParam) {
      var nextSegment = segments[i + 1];
      var isFinalPathParam = i + 1 === nPath;

      if (squash === false) {
        if (encoded != null) {
          if (isArray(encoded)) {
            result += map(encoded, encodeDashes).join("-");
          } else {
            result += encodeURIComponent(encoded);
          }
        }
        result += nextSegment;
      } else if (squash === true) {
        var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
        result += nextSegment.match(capture)[1];
      } else if (isString(squash)) {
        result += squash + nextSegment;
      }

      if (isFinalPathParam && param.squash === true && result.slice(-1) === '/') result = result.slice(0, -1);
    } else {
      if (encoded == null || (isDefaultValue && squash !== false)) continue;
      if (!isArray(encoded)) encoded = [ encoded ];
      if (encoded.length === 0) continue;
      encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
      result += (search ? '&' : '?') + (name + '=' + encoded);
      search = true;
    }
  }

  return result;
};

/**
 * @ngdoc object
 * @name ui.router.util.type:Type
 *
 * @description
 * Implements an interface to define custom parameter types that can be decoded from and encoded to
 * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
 * objects when matching or formatting URLs, or comparing or validating parameter values.
 *
 * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
 * information on registering custom types.
 *
 * @param {Object} config  A configuration object which contains the custom type definition.  The object's
 *        properties will override the default methods and/or pattern in `Type`'s public interface.
 * @example
 * <pre>
 * {
 *   decode: function(val) { return parseInt(val, 10); },
 *   encode: function(val) { return val && val.toString(); },
 *   equals: function(a, b) { return this.is(a) && a === b; },
 *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
 *   pattern: /\d+/
 * }
 * </pre>
 *
 * @property {RegExp} pattern The regular expression pattern used to match values of this type when
 *           coming from a substring of a URL.
 *
 * @returns {Object}  Returns a new `Type` object.
 */
function Type(config) {
  extend(this, config);
}

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#is
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Detects whether a value is of a particular type. Accepts a native (decoded) value
 * and determines whether it matches the current `Type` object.
 *
 * @param {*} val  The value to check.
 * @param {string} key  Optional. If the type check is happening in the context of a specific
 *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
 *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
 * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
 */
Type.prototype.is = function(val, key) {
  return true;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#encode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
 * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
 * only needs to be a representation of `val` that has been coerced to a string.
 *
 * @param {*} val  The value to encode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
 */
Type.prototype.encode = function(val, key) {
  return val;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#decode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Converts a parameter value (from URL string or transition param) to a custom/native value.
 *
 * @param {string} val  The URL parameter value to decode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {*}  Returns a custom representation of the URL parameter value.
 */
Type.prototype.decode = function(val, key) {
  return val;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#equals
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Determines whether two decoded values are equivalent.
 *
 * @param {*} a  A value to compare against.
 * @param {*} b  A value to compare against.
 * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
 */
Type.prototype.equals = function(a, b) {
  return a == b;
};

Type.prototype.$subPattern = function() {
  var sub = this.pattern.toString();
  return sub.substr(1, sub.length - 2);
};

Type.prototype.pattern = /.*/;

Type.prototype.toString = function() { return "{Type:" + this.name + "}"; };

/** Given an encoded string, or a decoded object, returns a decoded object */
Type.prototype.$normalize = function(val) {
  return this.is(val) ? val : this.decode(val);
};

/*
 * Wraps an existing custom Type as an array of Type, depending on 'mode'.
 * e.g.:
 * - urlmatcher pattern "/path?{queryParam[]:int}"
 * - url: "/path?queryParam=1&queryParam=2
 * - $stateParams.queryParam will be [1, 2]
 * if `mode` is "auto", then
 * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
 * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
 */
Type.prototype.$asArray = function(mode, isSearch) {
  if (!mode) return this;
  if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");

  function ArrayType(type, mode) {
    function bindTo(type, callbackName) {
      return function() {
        return type[callbackName].apply(type, arguments);
      };
    }

    // Wrap non-array value as array
    function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }
    // Unwrap array value for "auto" mode. Return undefined for empty array.
    function arrayUnwrap(val) {
      switch(val.length) {
        case 0: return undefined;
        case 1: return mode === "auto" ? val[0] : val;
        default: return val;
      }
    }
    function falsey(val) { return !val; }

    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
    function arrayHandler(callback, allTruthyMode) {
      return function handleArray(val) {
        if (isArray(val) && val.length === 0) return val;
        val = arrayWrap(val);
        var result = map(val, callback);
        if (allTruthyMode === true)
          return filter(result, falsey).length === 0;
        return arrayUnwrap(result);
      };
    }

    // Wraps type (.equals) functions to operate on each value of an array
    function arrayEqualsHandler(callback) {
      return function handleArray(val1, val2) {
        var left = arrayWrap(val1), right = arrayWrap(val2);
        if (left.length !== right.length) return false;
        for (var i = 0; i < left.length; i++) {
          if (!callback(left[i], right[i])) return false;
        }
        return true;
      };
    }

    this.encode = arrayHandler(bindTo(type, 'encode'));
    this.decode = arrayHandler(bindTo(type, 'decode'));
    this.is     = arrayHandler(bindTo(type, 'is'), true);
    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
    this.pattern = type.pattern;
    this.$normalize = arrayHandler(bindTo(type, '$normalize'));
    this.name = type.name;
    this.$arrayMode = mode;
  }

  return new ArrayType(this, mode);
};



/**
 * @ngdoc object
 * @name ui.router.util.$urlMatcherFactory
 *
 * @description
 * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
 * is also available to providers under the name `$urlMatcherFactoryProvider`.
 */
function $UrlMatcherFactory() {
  $$UMFP = this;

  var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;

  // Use tildes to pre-encode slashes.
  // If the slashes are simply URLEncoded, the browser can choose to pre-decode them,
  // and bidirectional encoding/decoding fails.
  // Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character
  function valToString(val) { return val != null ? val.toString().replace(/(~|\/)/g, function (m) { return {'~':'~~', '/':'~2F'}[m]; }) : val; }
  function valFromString(val) { return val != null ? val.toString().replace(/(~~|~2F)/g, function (m) { return {'~~':'~', '~2F':'/'}[m]; }) : val; }

  var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
    "string": {
      encode: valToString,
      decode: valFromString,
      // TODO: in 1.0, make string .is() return false if value is undefined/null by default.
      // In 0.2.x, string params are optional by default for backwards compat
      is: function(val) { return val == null || !isDefined(val) || typeof val === "string"; },
      pattern: /[^/]*/
    },
    "int": {
      encode: valToString,
      decode: function(val) { return parseInt(val, 10); },
      is: function(val) { return isDefined(val) && this.decode(val.toString()) === val; },
      pattern: /\d+/
    },
    "bool": {
      encode: function(val) { return val ? 1 : 0; },
      decode: function(val) { return parseInt(val, 10) !== 0; },
      is: function(val) { return val === true || val === false; },
      pattern: /0|1/
    },
    "date": {
      encode: function (val) {
        if (!this.is(val))
          return undefined;
        return [ val.getFullYear(),
          ('0' + (val.getMonth() + 1)).slice(-2),
          ('0' + val.getDate()).slice(-2)
        ].join("-");
      },
      decode: function (val) {
        if (this.is(val)) return val;
        var match = this.capture.exec(val);
        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
      },
      is: function(val) { return val instanceof Date && !isNaN(val.valueOf()); },
      equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },
      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
    },
    "json": {
      encode: angular.toJson,
      decode: angular.fromJson,
      is: angular.isObject,
      equals: angular.equals,
      pattern: /[^/]*/
    },
    "any": { // does not encode/decode
      encode: angular.identity,
      decode: angular.identity,
      equals: angular.equals,
      pattern: /.*/
    }
  };

  function getDefaultConfig() {
    return {
      strict: isStrictMode,
      caseInsensitive: isCaseInsensitive
    };
  }

  function isInjectable(value) {
    return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));
  }

  /**
   * [Internal] Get the default value of a parameter, which may be an injectable function.
   */
  $UrlMatcherFactory.$$getDefaultValue = function(config) {
    if (!isInjectable(config.value)) return config.value;
    if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
    return injector.invoke(config.value);
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#caseInsensitive
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URL matching should be case sensitive (the default behavior), or not.
   *
   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
   * @returns {boolean} the current value of caseInsensitive
   */
  this.caseInsensitive = function(value) {
    if (isDefined(value))
      isCaseInsensitive = value;
    return isCaseInsensitive;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#strictMode
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URLs should match trailing slashes, or not (the default behavior).
   *
   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
   * @returns {boolean} the current value of strictMode
   */
  this.strictMode = function(value) {
    if (isDefined(value))
      isStrictMode = value;
    return isStrictMode;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Sets the default behavior when generating or matching URLs with default parameter values.
   *
   * @param {string} value A string that defines the default parameter URL squashing behavior.
   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
   *             parameter is surrounded by slashes, squash (remove) one slash from the URL
   *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
   *             the parameter value from the URL and replace it with this string.
   */
  this.defaultSquashPolicy = function(value) {
    if (!isDefined(value)) return defaultSquashPolicy;
    if (value !== true && value !== false && !isString(value))
      throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
    defaultSquashPolicy = value;
    return value;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#compile
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
   *
   * @param {string} pattern  The URL pattern.
   * @param {Object} config  The config object hash.
   * @returns {UrlMatcher}  The UrlMatcher.
   */
  this.compile = function (pattern, config) {
    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#isMatcher
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
   *
   * @param {Object} object  The object to perform the type check against.
   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
   *          implementing all the same methods.
   */
  this.isMatcher = function (o) {
    if (!isObject(o)) return false;
    var result = true;

    forEach(UrlMatcher.prototype, function(val, name) {
      if (isFunction(val)) {
        result = result && (isDefined(o[name]) && isFunction(o[name]));
      }
    });
    return result;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#type
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
   * generate URLs with typed parameters.
   *
   * @param {string} name  The type name.
   * @param {Object|Function} definition   The type definition. See
   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   * @param {Object|Function} definitionFn (optional) A function that is injected before the app
   *        runtime starts.  The result of this function is merged into the existing `definition`.
   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   *
   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
   *
   * @example
   * This is a simple example of a custom type that encodes and decodes items from an
   * array, using the array index as the URL-encoded value:
   *
   * <pre>
   * var list = ['John', 'Paul', 'George', 'Ringo'];
   *
   * $urlMatcherFactoryProvider.type('listItem', {
   *   encode: function(item) {
   *     // Represent the list item in the URL using its corresponding index
   *     return list.indexOf(item);
   *   },
   *   decode: function(item) {
   *     // Look up the list item by index
   *     return list[parseInt(item, 10)];
   *   },
   *   is: function(item) {
   *     // Ensure the item is valid by checking to see that it appears
   *     // in the list
   *     return list.indexOf(item) > -1;
   *   }
   * });
   *
   * $stateProvider.state('list', {
   *   url: "/list/{item:listItem}",
   *   controller: function($scope, $stateParams) {
   *     console.log($stateParams.item);
   *   }
   * });
   *
   * // ...
   *
   * // Changes URL to '/list/3', logs "Ringo" to the console
   * $state.go('list', { item: "Ringo" });
   * </pre>
   *
   * This is a more complex example of a type that relies on dependency injection to
   * interact with services, and uses the parameter name from the URL to infer how to
   * handle encoding and decoding parameter values:
   *
   * <pre>
   * // Defines a custom type that gets a value from a service,
   * // where each service gets different types of values from
   * // a backend API:
   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
   *
   *   // Matches up services to URL parameter names
   *   var services = {
   *     user: Users,
   *     post: Posts
   *   };
   *
   *   return {
   *     encode: function(object) {
   *       // Represent the object in the URL using its unique ID
   *       return object.id;
   *     },
   *     decode: function(value, key) {
   *       // Look up the object by ID, using the parameter
   *       // name (key) to call the correct service
   *       return services[key].findById(value);
   *     },
   *     is: function(object, key) {
   *       // Check that object is a valid dbObject
   *       return angular.isObject(object) && object.id && services[key];
   *     }
   *     equals: function(a, b) {
   *       // Check the equality of decoded objects by comparing
   *       // their unique IDs
   *       return a.id === b.id;
   *     }
   *   };
   * });
   *
   * // In a config() block, you can then attach URLs with
   * // type-annotated parameters:
   * $stateProvider.state('users', {
   *   url: "/users",
   *   // ...
   * }).state('users.item', {
   *   url: "/{user:dbObject}",
   *   controller: function($scope, $stateParams) {
   *     // $stateParams.user will now be an object returned from
   *     // the Users service
   *   },
   *   // ...
   * });
   * </pre>
   */
  this.type = function (name, definition, definitionFn) {
    if (!isDefined(definition)) return $types[name];
    if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");

    $types[name] = new Type(extend({ name: name }, definition));
    if (definitionFn) {
      typeQueue.push({ name: name, def: definitionFn });
      if (!enqueue) flushTypeQueue();
    }
    return this;
  };

  // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
  function flushTypeQueue() {
    while(typeQueue.length) {
      var type = typeQueue.shift();
      if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
      angular.extend($types[type.name], injector.invoke(type.def));
    }
  }

  // Register default types. Store them in the prototype of $types.
  forEach(defaultTypes, function(type, name) { $types[name] = new Type(extend({name: name}, type)); });
  $types = inherit($types, {});

  /* No need to document $get, since it returns this */
  this.$get = ['$injector', function ($injector) {
    injector = $injector;
    enqueue = false;
    flushTypeQueue();

    forEach(defaultTypes, function(type, name) {
      if (!$types[name]) $types[name] = new Type(type);
    });
    return this;
  }];

  this.Param = function Param(id, type, config, location) {
    var self = this;
    config = unwrapShorthand(config);
    type = getType(config, type, location);
    var arrayMode = getArrayMode();
    type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
    if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined)
      config.value = ""; // for 0.2.x; in 0.3.0+ do not automatically default to ""
    var isOptional = config.value !== undefined;
    var squash = getSquashPolicy(config, isOptional);
    var replace = getReplace(config, arrayMode, isOptional, squash);

    function unwrapShorthand(config) {
      var keys = isObject(config) ? objectKeys(config) : [];
      var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 &&
                        indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
      if (isShorthand) config = { value: config };
      config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };
      return config;
    }

    function getType(config, urlType, location) {
      if (config.type && urlType) throw new Error("Param '"+id+"' has two type configurations.");
      if (urlType) return urlType;
      if (!config.type) return (location === "config" ? $types.any : $types.string);

      if (angular.isString(config.type))
        return $types[config.type];
      if (config.type instanceof Type)
        return config.type;
      return new Type(config.type);
    }

    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
    function getArrayMode() {
      var arrayDefaults = { array: (location === "search" ? "auto" : false) };
      var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
      return extend(arrayDefaults, arrayParamNomenclature, config).array;
    }

    /**
     * returns false, true, or the squash value to indicate the "default parameter url squash policy".
     */
    function getSquashPolicy(config, isOptional) {
      var squash = config.squash;
      if (!isOptional || squash === false) return false;
      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
      if (squash === true || isString(squash)) return squash;
      throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
    }

    function getReplace(config, arrayMode, isOptional, squash) {
      var replace, configuredKeys, defaultPolicy = [
        { from: "",   to: (isOptional || arrayMode ? undefined : "") },
        { from: null, to: (isOptional || arrayMode ? undefined : "") }
      ];
      replace = isArray(config.replace) ? config.replace : [];
      if (isString(squash))
        replace.push({ from: squash, to: undefined });
      configuredKeys = map(replace, function(item) { return item.from; } );
      return filter(defaultPolicy, function(item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);
    }

    /**
     * [Internal] Get the default value of a parameter, which may be an injectable function.
     */
    function $$getDefaultValue() {
      if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
      var defaultValue = injector.invoke(config.$$fn);
      if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))
        throw new Error("Default value (" + defaultValue + ") for parameter '" + self.id + "' is not an instance of Type (" + self.type.name + ")");
      return defaultValue;
    }

    /**
     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
     * default value, which may be the result of an injectable function.
     */
    function $value(value) {
      function hasReplaceVal(val) { return function(obj) { return obj.from === val; }; }
      function $replace(value) {
        var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) { return obj.to; });
        return replacement.length ? replacement[0] : value;
      }
      value = $replace(value);
      return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);
    }

    function toString() { return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}"; }

    extend(this, {
      id: id,
      type: type,
      location: location,
      array: arrayMode,
      squash: squash,
      replace: replace,
      isOptional: isOptional,
      value: $value,
      dynamic: undefined,
      config: config,
      toString: toString
    });
  };

  function ParamSet(params) {
    extend(this, params || {});
  }

  ParamSet.prototype = {
    $$new: function() {
      return inherit(this, extend(new ParamSet(), { $$parent: this}));
    },
    $$keys: function () {
      var keys = [], chain = [], parent = this,
        ignore = objectKeys(ParamSet.prototype);
      while (parent) { chain.push(parent); parent = parent.$$parent; }
      chain.reverse();
      forEach(chain, function(paramset) {
        forEach(objectKeys(paramset), function(key) {
            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
        });
      });
      return keys;
    },
    $$values: function(paramValues) {
      var values = {}, self = this;
      forEach(self.$$keys(), function(key) {
        values[key] = self[key].value(paramValues && paramValues[key]);
      });
      return values;
    },
    $$equals: function(paramValues1, paramValues2) {
      var equal = true, self = this;
      forEach(self.$$keys(), function(key) {
        var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
        if (!self[key].type.equals(left, right)) equal = false;
      });
      return equal;
    },
    $$validates: function $$validate(paramValues) {
      var keys = this.$$keys(), i, param, rawVal, normalized, encoded;
      for (i = 0; i < keys.length; i++) {
        param = this[keys[i]];
        rawVal = paramValues[keys[i]];
        if ((rawVal === undefined || rawVal === null) && param.isOptional)
          break; // There was no parameter value, but the param is optional
        normalized = param.type.$normalize(rawVal);
        if (!param.type.is(normalized))
          return false; // The value was not of the correct Type, and could not be decoded to the correct Type
        encoded = param.type.encode(normalized);
        if (angular.isString(encoded) && !param.type.pattern.exec(encoded))
          return false; // The value was of the correct type, but when encoded, did not match the Type's regexp
      }
      return true;
    },
    $$parent: undefined
  };

  this.ParamSet = ParamSet;
}

// Register as a provider so it's available to other providers
angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
angular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);

/**
 * @ngdoc object
 * @name ui.router.router.$urlRouterProvider
 *
 * @requires ui.router.util.$urlMatcherFactoryProvider
 * @requires $locationProvider
 *
 * @description
 * `$urlRouterProvider` has the responsibility of watching `$location`. 
 * When `$location` changes it runs through a list of rules one by one until a 
 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
 *
 * There are several methods on `$urlRouterProvider` that make it useful to use directly
 * in your module config.
 */
$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];
function $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {
  var rules = [], otherwise = null, interceptDeferred = false, listener;

  // Returns a string that is a prefix of all strings matching the RegExp
  function regExpPrefix(re) {
    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
    return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
  }

  // Interpolates matched values into a String.replace()-style pattern
  function interpolate(pattern, match) {
    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
      return match[what === '$' ? 0 : Number(what)];
    });
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#rule
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines rules that are used by `$urlRouterProvider` to find matches for
   * specific URLs.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // Here's an example of how you might allow case insensitive urls
   *   $urlRouterProvider.rule(function ($injector, $location) {
   *     var path = $location.path(),
   *         normalized = path.toLowerCase();
   *
   *     if (path !== normalized) {
   *       return normalized;
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {function} rule Handler function that takes `$injector` and `$location`
   * services as arguments. You can use them to return a valid path as a string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
  this.rule = function (rule) {
    if (!isFunction(rule)) throw new Error("'rule' must be a function");
    rules.push(rule);
    return this;
  };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouterProvider#otherwise
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines a path that is used when an invalid route is requested.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // if the path doesn't match any of the urls you configured
   *   // otherwise will take care of routing the user to the
   *   // specified url
   *   $urlRouterProvider.otherwise('/index');
   *
   *   // Example of using function rule as param
   *   $urlRouterProvider.otherwise(function ($injector, $location) {
   *     return '/a/valid/url';
   *   });
   * });
   * </pre>
   *
   * @param {string|function} rule The url path you want to redirect to or a function 
   * rule that returns the url path. The function version is passed two params: 
   * `$injector` and `$location` services, and must return a url string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
  this.otherwise = function (rule) {
    if (isString(rule)) {
      var redirect = rule;
      rule = function () { return redirect; };
    }
    else if (!isFunction(rule)) throw new Error("'rule' must be a function");
    otherwise = rule;
    return this;
  };


  function handleIfMatch($injector, handler, match) {
    if (!match) return false;
    var result = $injector.invoke(handler, handler, { $match: match });
    return isDefined(result) ? result : true;
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#when
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Registers a handler for a given url matching. 
   * 
   * If the handler is a string, it is
   * treated as a redirect, and is interpolated according to the syntax of match
   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
   *
   * If the handler is a function, it is injectable. It gets invoked if `$location`
   * matches. You have the option of inject the match object as `$match`.
   *
   * The handler can return
   *
   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
   *   will continue trying to find another one that matches.
   * - **string** which is treated as a redirect and passed to `$location.url()`
   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
   *     if ($state.$current.navigable !== state ||
   *         !equalForKeys($match, $stateParams) {
   *      $state.transitionTo(state, $match, false);
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {string|object} what The incoming path that you want to redirect.
   * @param {string|function} handler The path you want to redirect your user to.
   */
  this.when = function (what, handler) {
    var redirect, handlerIsString = isString(handler);
    if (isString(what)) what = $urlMatcherFactory.compile(what);

    if (!handlerIsString && !isFunction(handler) && !isArray(handler))
      throw new Error("invalid 'handler' in when()");

    var strategies = {
      matcher: function (what, handler) {
        if (handlerIsString) {
          redirect = $urlMatcherFactory.compile(handler);
          handler = ['$match', function ($match) { return redirect.format($match); }];
        }
        return extend(function ($injector, $location) {
          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
        }, {
          prefix: isString(what.prefix) ? what.prefix : ''
        });
      },
      regex: function (what, handler) {
        if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

        if (handlerIsString) {
          redirect = handler;
          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
        }
        return extend(function ($injector, $location) {
          return handleIfMatch($injector, handler, what.exec($location.path()));
        }, {
          prefix: regExpPrefix(what)
        });
      }
    };

    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

    for (var n in check) {
      if (check[n]) return this.rule(strategies[n](what, handler));
    }

    throw new Error("invalid 'what' in when()");
  };

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#deferIntercept
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Disables (or enables) deferring location change interception.
   *
   * If you wish to customize the behavior of syncing the URL (for example, if you wish to
   * defer a transition but maintain the current URL), call this method at configuration time.
   * Then, at run time, call `$urlRouter.listen()` after you have configured your own
   * `$locationChangeSuccess` event handler.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *
   *   // Prevent $urlRouter from automatically intercepting URL changes;
   *   // this allows you to configure custom behavior in between
   *   // location changes and route synchronization:
   *   $urlRouterProvider.deferIntercept();
   *
   * }).run(function ($rootScope, $urlRouter, UserService) {
   *
   *   $rootScope.$on('$locationChangeSuccess', function(e) {
   *     // UserService is an example service for managing user state
   *     if (UserService.isLoggedIn()) return;
   *
   *     // Prevent $urlRouter's default handler from firing
   *     e.preventDefault();
   *
   *     UserService.handleLogin().then(function() {
   *       // Once the user has logged in, sync the current URL
   *       // to the router:
   *       $urlRouter.sync();
   *     });
   *   });
   *
   *   // Configures $urlRouter's listener *after* your custom listener
   *   $urlRouter.listen();
   * });
   * </pre>
   *
   * @param {boolean} defer Indicates whether to defer location change interception. Passing
            no parameter is equivalent to `true`.
   */
  this.deferIntercept = function (defer) {
    if (defer === undefined) defer = true;
    interceptDeferred = defer;
  };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouter
   *
   * @requires $location
   * @requires $rootScope
   * @requires $injector
   * @requires $browser
   *
   * @description
   *
   */
  this.$get = $get;
  $get.$inject = ['$location', '$rootScope', '$injector', '$browser', '$sniffer'];
  function $get(   $location,   $rootScope,   $injector,   $browser,   $sniffer) {

    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;

    function appendBasePath(url, isHtml5, absolute) {
      if (baseHref === '/') return url;
      if (isHtml5) return baseHref.slice(0, -1) + url;
      if (absolute) return baseHref.slice(1) + url;
      return url;
    }

    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
    function update(evt) {
      if (evt && evt.defaultPrevented) return;
      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
      lastPushedUrl = undefined;
      // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573
      //if (ignoreUpdate) return true;

      function check(rule) {
        var handled = rule($injector, $location);

        if (!handled) return false;
        if (isString(handled)) $location.replace().url(handled);
        return true;
      }
      var n = rules.length, i;

      for (i = 0; i < n; i++) {
        if (check(rules[i])) return;
      }
      // always check otherwise last to allow dynamic updates to the set of rules
      if (otherwise) check(otherwise);
    }

    function listen() {
      listener = listener || $rootScope.$on('$locationChangeSuccess', update);
      return listener;
    }

    if (!interceptDeferred) listen();

    return {
      /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#sync
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
       * with the transition by calling `$urlRouter.sync()`.
       *
       * @example
       * <pre>
       * angular.module('app', ['ui.router'])
       *   .run(function($rootScope, $urlRouter) {
       *     $rootScope.$on('$locationChangeSuccess', function(evt) {
       *       // Halt state change from even starting
       *       evt.preventDefault();
       *       // Perform custom logic
       *       var meetsRequirement = ...
       *       // Continue with the update and state transition if logic allows
       *       if (meetsRequirement) $urlRouter.sync();
       *     });
       * });
       * </pre>
       */
      sync: function() {
        update();
      },

      listen: function() {
        return listen();
      },

      update: function(read) {
        if (read) {
          location = $location.url();
          return;
        }
        if ($location.url() === location) return;

        $location.url(location);
        $location.replace();
      },

      push: function(urlMatcher, params, options) {
         var url = urlMatcher.format(params || {});

        // Handle the special hash param, if needed
        if (url !== null && params && params['#']) {
            url += '#' + params['#'];
        }

        $location.url(url);
        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
        if (options && options.replace) $location.replace();
      },

      /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#href
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * A URL generation method that returns the compiled URL for a given
       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
       *
       * @example
       * <pre>
       * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
       *   person: "bob"
       * });
       * // $bob == "/about/bob";
       * </pre>
       *
       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
       * @param {object=} params An object of parameter values to fill the matcher's required parameters.
       * @param {object=} options Options object. The options are:
       *
       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
       *
       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
       */
      href: function(urlMatcher, params, options) {
        if (!urlMatcher.validates(params)) return null;

        var isHtml5 = $locationProvider.html5Mode();
        if (angular.isObject(isHtml5)) {
          isHtml5 = isHtml5.enabled;
        }

        isHtml5 = isHtml5 && $sniffer.history;
        
        var url = urlMatcher.format(params);
        options = options || {};

        if (!isHtml5 && url !== null) {
          url = "#" + $locationProvider.hashPrefix() + url;
        }

        // Handle special hash param, if needed
        if (url !== null && params && params['#']) {
          url += '#' + params['#'];
        }

        url = appendBasePath(url, isHtml5, options.absolute);

        if (!options.absolute || !url) {
          return url;
        }

        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();
        port = (port === 80 || port === 443 ? '' : ':' + port);

        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');
      }
    };
  }
}

angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$stateProvider
 *
 * @requires ui.router.router.$urlRouterProvider
 * @requires ui.router.util.$urlMatcherFactoryProvider
 *
 * @description
 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
 * on state.
 *
 * A state corresponds to a "place" in the application in terms of the overall UI and
 * navigation. A state describes (via the controller / template / view properties) what
 * the UI looks like and does at that place.
 *
 * States often have things in common, and the primary way of factoring out these
 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
 * nested states.
 *
 * The `$stateProvider` provides interfaces to declare these states for your app.
 */
$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];
function $StateProvider(   $urlRouterProvider,   $urlMatcherFactory) {

  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';

  // Builds state properties from definition passed to registerState()
  var stateBuilder = {

    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
    // state.children = [];
    // if (parent) parent.children.push(state);
    parent: function(state) {
      if (isDefined(state.parent) && state.parent) return findState(state.parent);
      // regex matches any valid composite state name
      // would match "contact.list" but not "contacts"
      var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
      return compositeName ? findState(compositeName[1]) : root;
    },

    // inherit 'data' from parent and override by own values (if any)
    data: function(state) {
      if (state.parent && state.parent.data) {
        state.data = state.self.data = inherit(state.parent.data, state.data);
      }
      return state.data;
    },

    // Build a URLMatcher if necessary, either via a relative or absolute URL
    url: function(state) {
      var url = state.url, config = { params: state.params || {} };

      if (isString(url)) {
        if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);
        return (state.parent.navigable || root).url.concat(url, config);
      }

      if (!url || $urlMatcherFactory.isMatcher(url)) return url;
      throw new Error("Invalid url '" + url + "' in state '" + state + "'");
    },

    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
    navigable: function(state) {
      return state.url ? state : (state.parent ? state.parent.navigable : null);
    },

    // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
    ownParams: function(state) {
      var params = state.url && state.url.params || new $$UMFP.ParamSet();
      forEach(state.params || {}, function(config, id) {
        if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
      });
      return params;
    },

    // Derive parameters for this state and ensure they're a super-set of parent's parameters
    params: function(state) {
      var ownParams = pick(state.ownParams, state.ownParams.$$keys());
      return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();
    },

    // If there is no explicit multi-view configuration, make one up so we don't have
    // to handle both cases in the view directive later. Note that having an explicit
    // 'views' property will mean the default unnamed view properties are ignored. This
    // is also a good time to resolve view names to absolute names, so everything is a
    // straight lookup at link time.
    views: function(state) {
      var views = {};

      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
        if (name.indexOf('@') < 0) name += '@' + state.parent.name;
        view.resolveAs = view.resolveAs || state.resolveAs || '$resolve';
        views[name] = view;
      });
      return views;
    },

    // Keep a full path from the root down to this state as this is needed for state activation.
    path: function(state) {
      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
    },

    // Speed up $state.contains() as it's used a lot
    includes: function(state) {
      var includes = state.parent ? extend({}, state.parent.includes) : {};
      includes[state.name] = true;
      return includes;
    },

    $delegates: {}
  };

  function isRelative(stateName) {
    return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
  }

  function findState(stateOrName, base) {
    if (!stateOrName) return undefined;

    var isStr = isString(stateOrName),
        name  = isStr ? stateOrName : stateOrName.name,
        path  = isRelative(name);

    if (path) {
      if (!base) throw new Error("No reference point given for path '"  + name + "'");
      base = findState(base);
      
      var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

      for (; i < pathLength; i++) {
        if (rel[i] === "" && i === 0) {
          current = base;
          continue;
        }
        if (rel[i] === "^") {
          if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
          current = current.parent;
          continue;
        }
        break;
      }
      rel = rel.slice(i).join(".");
      name = current.name + (current.name && rel ? "." : "") + rel;
    }
    var state = states[name];

    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
      return state;
    }
    return undefined;
  }

  function queueState(parentName, state) {
    if (!queue[parentName]) {
      queue[parentName] = [];
    }
    queue[parentName].push(state);
  }

  function flushQueuedChildren(parentName) {
    var queued = queue[parentName] || [];
    while(queued.length) {
      registerState(queued.shift());
    }
  }

  function registerState(state) {
    // Wrap a new object around the state so we can store our private details easily.
    state = inherit(state, {
      self: state,
      resolve: state.resolve || {},
      toString: function() { return this.name; }
    });

    var name = state.name;
    if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
    if (states.hasOwnProperty(name)) throw new Error("State '" + name + "' is already defined");

    // Get parent name
    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))
        : (isString(state.parent)) ? state.parent
        : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name
        : '';

    // If parent is not registered yet, add state to queue and register later
    if (parentName && !states[parentName]) {
      return queueState(parentName, state.self);
    }

    for (var key in stateBuilder) {
      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
    }
    states[name] = state;

    // Register the state in the global state list and with $urlRouter if necessary.
    if (!state[abstractKey] && state.url) {
      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
          $state.transitionTo(state, $match, { inherit: true, location: false });
        }
      }]);
    }

    // Register any queued children
    flushQueuedChildren(name);

    return state;
  }

  // Checks text to see if it looks like a glob.
  function isGlob (text) {
    return text.indexOf('*') > -1;
  }

  // Returns true if glob matches current $state name.
  function doesStateMatchGlob (glob) {
    var globSegments = glob.split('.'),
        segments = $state.$current.name.split('.');

    //match single stars
    for (var i = 0, l = globSegments.length; i < l; i++) {
      if (globSegments[i] === '*') {
        segments[i] = '*';
      }
    }

    //match greedy starts
    if (globSegments[0] === '**') {
       segments = segments.slice(indexOf(segments, globSegments[1]));
       segments.unshift('**');
    }
    //match greedy ends
    if (globSegments[globSegments.length - 1] === '**') {
       segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
       segments.push('**');
    }

    if (globSegments.length != segments.length) {
      return false;
    }

    return segments.join('') === globSegments.join('');
  }


  // Implicit root state that is always active
  root = registerState({
    name: '',
    url: '^',
    views: null,
    'abstract': true
  });
  root.navigable = null;


  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#decorator
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Allows you to extend (carefully) or override (at your own peril) the 
   * `stateBuilder` object used internally by `$stateProvider`. This can be used 
   * to add custom functionality to ui-router, for example inferring templateUrl 
   * based on the state name.
   *
   * When passing only a name, it returns the current (original or decorated) builder
   * function that matches `name`.
   *
   * The builder functions that can be decorated are listed below. Though not all
   * necessarily have a good use case for decoration, that is up to you to decide.
   *
   * In addition, users can attach custom decorators, which will generate new 
   * properties within the state's internal definition. There is currently no clear 
   * use-case for this beyond accessing internal states (i.e. $state.$current), 
   * however, expect this to become increasingly relevant as we introduce additional 
   * meta-programming features.
   *
   * **Warning**: Decorators should not be interdependent because the order of 
   * execution of the builder functions in non-deterministic. Builder functions 
   * should only be dependent on the state definition object and super function.
   *
   *
   * Existing builder functions and current return values:
   *
   * - **parent** `{object}` - returns the parent state object.
   * - **data** `{object}` - returns state data, including any inherited data that is not
   *   overridden by own values (if any).
   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
   *   or `null`.
   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
   *   navigable).
   * - **params** `{object}` - returns an array of state params that are ensured to 
   *   be a super-set of parent's params.
   * - **views** `{object}` - returns a views object where each key is an absolute view 
   *   name (i.e. "viewName@stateName") and each value is the config object 
   *   (template, controller) for the view. Even when you don't use the views object 
   *   explicitly on a state config, one is still created for you internally.
   *   So by decorating this builder function you have access to decorating template 
   *   and controller properties.
   * - **ownParams** `{object}` - returns an array of params that belong to the state, 
   *   not including any params defined by ancestor states.
   * - **path** `{string}` - returns the full path from the root down to this state. 
   *   Needed for state activation.
   * - **includes** `{object}` - returns an object that includes every state that 
   *   would pass a `$state.includes()` test.
   *
   * @example
   * <pre>
   * // Override the internal 'views' builder with a function that takes the state
   * // definition, and a reference to the internal function being overridden:
   * $stateProvider.decorator('views', function (state, parent) {
   *   var result = {},
   *       views = parent(state);
   *
   *   angular.forEach(views, function (config, name) {
   *     var autoName = (state.name + '.' + name).replace('.', '/');
   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
   *     result[name] = config;
   *   });
   *   return result;
   * });
   *
   * $stateProvider.state('home', {
   *   views: {
   *     'contact.list': { controller: 'ListController' },
   *     'contact.item': { controller: 'ItemController' }
   *   }
   * });
   *
   * // ...
   *
   * $state.go('home');
   * // Auto-populates list and item views with /partials/home/contact/list.html,
   * // and /partials/home/contact/item.html, respectively.
   * </pre>
   *
   * @param {string} name The name of the builder function to decorate. 
   * @param {object} func A function that is responsible for decorating the original 
   * builder function. The function receives two parameters:
   *
   *   - `{object}` - state - The state config object.
   *   - `{object}` - super - The original builder function.
   *
   * @return {object} $stateProvider - $stateProvider instance
   */
  this.decorator = decorator;
  function decorator(name, func) {
    /*jshint validthis: true */
    if (isString(name) && !isDefined(func)) {
      return stateBuilder[name];
    }
    if (!isFunction(func) || !isString(name)) {
      return this;
    }
    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
      stateBuilder.$delegates[name] = stateBuilder[name];
    }
    stateBuilder[name] = func;
    return this;
  }

  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#state
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Registers a state configuration under a given state name. The stateConfig object
   * has the following acceptable properties.
   *
   * @param {string} name A unique state name, e.g. "home", "about", "contacts".
   * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
   * @param {object} stateConfig State configuration object.
   * @param {string|function=} stateConfig.template
   * <a id='template'></a>
   *   html template as a string or a function that returns
   *   an html template as a string which should be used by the uiView directives. This property 
   *   takes precedence over templateUrl.
   *   
   *   If `template` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
   *     applying the current state
   *
   * <pre>template:
   *   "<h1>inline template definition</h1>" +
   *   "<div ui-view></div>"</pre>
   * <pre>template: function(params) {
   *       return "<h1>generated template</h1>"; }</pre>
   * </div>
   *
   * @param {string|function=} stateConfig.templateUrl
   * <a id='templateUrl'></a>
   *
   *   path or function that returns a path to an html
   *   template that should be used by uiView.
   *   
   *   If `templateUrl` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
   *     applying the current state
   *
   * <pre>templateUrl: "home.html"</pre>
   * <pre>templateUrl: function(params) {
   *     return myTemplates[params.pageId]; }</pre>
   *
   * @param {function=} stateConfig.templateProvider
   * <a id='templateProvider'></a>
   *    Provider function that returns HTML content string.
   * <pre> templateProvider:
   *       function(MyTemplateService, params) {
   *         return MyTemplateService.getTemplate(params.pageId);
   *       }</pre>
   *
   * @param {string|function=} stateConfig.controller
   * <a id='controller'></a>
   *
   *  Controller fn that should be associated with newly
   *   related scope or the name of a registered controller if passed as a string.
   *   Optionally, the ControllerAs may be declared here.
   * <pre>controller: "MyRegisteredController"</pre>
   * <pre>controller:
   *     "MyRegisteredController as fooCtrl"}</pre>
   * <pre>controller: function($scope, MyService) {
   *     $scope.data = MyService.getData(); }</pre>
   *
   * @param {function=} stateConfig.controllerProvider
   * <a id='controllerProvider'></a>
   *
   * Injectable provider function that returns the actual controller or string.
   * <pre>controllerProvider:
   *   function(MyResolveData) {
   *     if (MyResolveData.foo)
   *       return "FooCtrl"
   *     else if (MyResolveData.bar)
   *       return "BarCtrl";
   *     else return function($scope) {
   *       $scope.baz = "Qux";
   *     }
   *   }</pre>
   *
   * @param {string=} stateConfig.controllerAs
   * <a id='controllerAs'></a>
   * 
   * A controller alias name. If present the controller will be
   *   published to scope under the controllerAs name.
   * <pre>controllerAs: "myCtrl"</pre>
   *
   * @param {string|object=} stateConfig.parent
   * <a id='parent'></a>
   * Optionally specifies the parent state of this state.
   *
   * <pre>parent: 'parentState'</pre>
   * <pre>parent: parentState // JS variable</pre>
   *
   * @param {object=} stateConfig.resolve
   * <a id='resolve'></a>
   *
   * An optional map&lt;string, function&gt; of dependencies which
   *   should be injected into the controller. If any of these dependencies are promises, 
   *   the router will wait for them all to be resolved before the controller is instantiated.
   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
   *   and the values of the resolved promises are injected into any controllers that reference them.
   *   If any  of the promises are rejected the $stateChangeError event is fired.
   *
   *   The map object is:
   *   
   *   - key - {string}: name of dependency to be injected into controller
   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
   *     it is injected and return value it treated as dependency. If result is a promise, it is 
   *     resolved before its value is injected into controller.
   *
   * <pre>resolve: {
   *     myResolve1:
   *       function($http, $stateParams) {
   *         return $http.get("/api/foos/"+stateParams.fooID);
   *       }
   *     }</pre>
   *
   * @param {string=} stateConfig.url
   * <a id='url'></a>
   *
   *   A url fragment with optional parameters. When a state is navigated or
   *   transitioned to, the `$stateParams` service will be populated with any 
   *   parameters that were passed.
   *
   *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for
   *   more details on acceptable patterns )
   *
   * examples:
   * <pre>url: "/home"
   * url: "/users/:userid"
   * url: "/books/{bookid:[a-zA-Z_-]}"
   * url: "/books/{categoryid:int}"
   * url: "/books/{publishername:string}/{categoryid:int}"
   * url: "/messages?before&after"
   * url: "/messages?{before:date}&{after:date}"
   * url: "/messages/:mailboxid?{before:date}&{after:date}"
   * </pre>
   *
   * @param {object=} stateConfig.views
   * <a id='views'></a>
   * an optional map&lt;string, object&gt; which defined multiple views, or targets views
   * manually/explicitly.
   *
   * Examples:
   *
   * Targets three named `ui-view`s in the parent state's template
   * <pre>views: {
   *     header: {
   *       controller: "headerCtrl",
   *       templateUrl: "header.html"
   *     }, body: {
   *       controller: "bodyCtrl",
   *       templateUrl: "body.html"
   *     }, footer: {
   *       controller: "footCtrl",
   *       templateUrl: "footer.html"
   *     }
   *   }</pre>
   *
   * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
   * <pre>views: {
   *     'header@top': {
   *       controller: "msgHeaderCtrl",
   *       templateUrl: "msgHeader.html"
   *     }, 'body': {
   *       controller: "messagesCtrl",
   *       templateUrl: "messages.html"
   *     }
   *   }</pre>
   *
   * @param {boolean=} [stateConfig.abstract=false]
   * <a id='abstract'></a>
   * An abstract state will never be directly activated,
   *   but can provide inherited properties to its common children states.
   * <pre>abstract: true</pre>
   *
   * @param {function=} stateConfig.onEnter
   * <a id='onEnter'></a>
   *
   * Callback function for when a state is entered. Good way
   *   to trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explicitly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onEnter: function(MyService, $stateParams) {
   *     MyService.foo($stateParams.myParam);
   * }</pre>
   *
   * @param {function=} stateConfig.onExit
   * <a id='onExit'></a>
   *
   * Callback function for when a state is exited. Good way to
   *   trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explicitly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onExit: function(MyService, $stateParams) {
   *     MyService.cleanup($stateParams.myParam);
   * }</pre>
   *
   * @param {boolean=} [stateConfig.reloadOnSearch=true]
   * <a id='reloadOnSearch'></a>
   *
   * If `false`, will not retrigger the same state
   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
   *   Useful for when you'd like to modify $location.search() without triggering a reload.
   * <pre>reloadOnSearch: false</pre>
   *
   * @param {object=} stateConfig.data
   * <a id='data'></a>
   *
   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
   *   prototypally inherited.  In other words, adding a data property to a state adds it to
   *   the entire subtree via prototypal inheritance.
   *
   * <pre>data: {
   *     requiredRole: 'foo'
   * } </pre>
   *
   * @param {object=} stateConfig.params
   * <a id='params'></a>
   *
   * A map which optionally configures parameters declared in the `url`, or
   *   defines additional non-url parameters.  For each parameter being
   *   configured, add a configuration object keyed to the name of the parameter.
   *
   *   Each parameter configuration object may contain the following properties:
   *
   *   - ** value ** - {object|function=}: specifies the default value for this
   *     parameter.  This implicitly sets this parameter as optional.
   *
   *     When UI-Router routes to a state and no value is
   *     specified for this parameter in the URL or transition, the
   *     default value will be used instead.  If `value` is a function,
   *     it will be injected and invoked, and the return value used.
   *
   *     *Note*: `undefined` is treated as "no default value" while `null`
   *     is treated as "the default value is `null`".
   *
   *     *Shorthand*: If you only need to configure the default value of the
   *     parameter, you may use a shorthand syntax.   In the **`params`**
   *     map, instead mapping the param name to a full parameter configuration
   *     object, simply set map it to the default parameter value, e.g.:
   *
   * <pre>// define a parameter's default value
   * params: {
   *     param1: { value: "defaultValue" }
   * }
   * // shorthand default values
   * params: {
   *     param1: "defaultValue",
   *     param2: "param2Default"
   * }</pre>
   *
   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
   *     treated as an array of values.  If you specified a Type, the value will be
   *     treated as an array of the specified Type.  Note: query parameter values
   *     default to a special `"auto"` mode.
   *
   *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
   *     value (e.g.: `{ foo: '1' }`).
   *
   * <pre>params: {
   *     param1: { array: true }
   * }</pre>
   *
   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
   *     configured default squash policy.
   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
   *
   *   There are three squash settings:
   *
   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
   *       This can allow for cleaner looking URLs.
   *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
   *
   * <pre>params: {
   *     param1: {
   *       value: "defaultId",
   *       squash: true
   * } }
   * // squash "defaultValue" to "~"
   * params: {
   *     param1: {
   *       value: "defaultValue",
   *       squash: "~"
   * } }
   * </pre>
   *
   *
   * @example
   * <pre>
   * // Some state name examples
   *
   * // stateName can be a single top-level name (must be unique).
   * $stateProvider.state("home", {});
   *
   * // Or it can be a nested state name. This state is a child of the
   * // above "home" state.
   * $stateProvider.state("home.newest", {});
   *
   * // Nest states as deeply as needed.
   * $stateProvider.state("home.newest.abc.xyz.inception", {});
   *
   * // state() returns $stateProvider, so you can chain state declarations.
   * $stateProvider
   *   .state("home", {})
   *   .state("about", {})
   *   .state("contacts", {});
   * </pre>
   *
   */
  this.state = state;
  function state(name, definition) {
    /*jshint validthis: true */
    if (isObject(name)) definition = name;
    else definition.name = name;
    registerState(definition);
    return this;
  }

  /**
   * @ngdoc object
   * @name ui.router.state.$state
   *
   * @requires $rootScope
   * @requires $q
   * @requires ui.router.state.$view
   * @requires $injector
   * @requires ui.router.util.$resolve
   * @requires ui.router.state.$stateParams
   * @requires ui.router.router.$urlRouter
   *
   * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
   * you'd like to test against the current active state.
   * @property {object} current A reference to the state's config object. However 
   * you passed it in. Useful for accessing custom data.
   * @property {object} transition Currently pending transition. A promise that'll 
   * resolve or reject.
   *
   * @description
   * `$state` service is responsible for representing states as well as transitioning
   * between them. It also provides interfaces to ask for current state or even states
   * you're coming from.
   */
  this.$get = $get;
  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];
  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $urlRouter,   $location,   $urlMatcherFactory) {

    var TransitionSupersededError = new Error('transition superseded');

    var TransitionSuperseded = silenceUncaughtInPromise($q.reject(TransitionSupersededError));
    var TransitionPrevented = silenceUncaughtInPromise($q.reject(new Error('transition prevented')));
    var TransitionAborted = silenceUncaughtInPromise($q.reject(new Error('transition aborted')));
    var TransitionFailed = silenceUncaughtInPromise($q.reject(new Error('transition failed')));

    // Handles the case where a state which is the target of a transition is not found, and the user
    // can optionally retry or defer the transition
    function handleRedirect(redirect, state, params, options) {
      /**
       * @ngdoc event
       * @name ui.router.state.$state#$stateNotFound
       * @eventOf ui.router.state.$state
       * @eventType broadcast on root scope
       * @description
       * Fired when a requested state **cannot be found** using the provided state name during transition.
       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
       *
       * @param {Object} event Event object.
       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
       * @param {State} fromState Current state object.
       * @param {Object} fromParams Current state params.
       *
       * @example
       *
       * <pre>
       * // somewhere, assume lazy.state has not been defined
       * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
       *
       * // somewhere else
       * $scope.$on('$stateNotFound',
       * function(event, unfoundState, fromState, fromParams){
       *     console.log(unfoundState.to); // "lazy.state"
       *     console.log(unfoundState.toParams); // {a:1, b:2}
       *     console.log(unfoundState.options); // {inherit:false} + default options
       * })
       * </pre>
       */
      var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);

      if (evt.defaultPrevented) {
        $urlRouter.update();
        return TransitionAborted;
      }

      if (!evt.retry) {
        return null;
      }

      // Allow the handler to return a promise to defer state lookup retry
      if (options.$retry) {
        $urlRouter.update();
        return TransitionFailed;
      }
      var retryTransition = $state.transition = $q.when(evt.retry);

      retryTransition.then(function() {
        if (retryTransition !== $state.transition) {
          $rootScope.$broadcast('$stateChangeCancel', redirect.to, redirect.toParams, state, params);
          return TransitionSuperseded;
        }
        redirect.options.$retry = true;
        return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
      }, function() {
        return TransitionAborted;
      });
      $urlRouter.update();

      return retryTransition;
    }

    root.locals = { resolve: null, globals: { $stateParams: {} } };

    $state = {
      params: {},
      current: root.self,
      $current: root,
      transition: null
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#reload
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method that force reloads the current state. All resolves are re-resolved,
     * controllers reinstantiated, and events re-fired.
     *
     * @example
     * <pre>
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     $state.reload();
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>
     *
     * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.
     * @example
     * <pre>
     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' 
     * //and current state is 'contacts.detail.item'
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     //will reload 'contact.detail' and 'contact.detail.item' states
     *     $state.reload('contact.detail');
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>

     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
    $state.reload = function reload(state) {
      return $state.transitionTo($state.current, $stateParams, { reload: state || true, inherit: false, notify: true});
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#go
     * @methodOf ui.router.state.$state
     *
     * @description
     * Convenience method for transitioning to a new state. `$state.go` calls 
     * `$state.transitionTo` internally but automatically sets options to 
     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
     * This allows you to easily use an absolute or relative to path and specify 
     * only the parameters you'd like to update (while letting unspecified parameters 
     * inherit from the currently active ancestor states).
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.go('contact.detail');
     *   };
     * });
     * </pre>
     * <img src='../ngdoc_assets/StateGoExamples.png'/>
     *
     * @param {string} to Absolute state name or relative state path. Some examples:
     *
     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
     * - `$state.go('^')` - will go to a parent state
     * - `$state.go('^.sibling')` - will go to a sibling state
     * - `$state.go('.child.grandchild')` - will go to grandchild state
     *
     * @param {object=} params A map of the parameters that will be sent to the state, 
     * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
     * defined parameters. Only parameters specified in the state definition can be overridden, new 
     * parameters will be ignored. This allows, for example, going to a sibling state that shares parameters
     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
     * will get you all current parameters, etc.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false|string|object}, If `true` will force transition even if no state or params
     *    have changed.  It will reload the resolves and views of the current state and parent states.
     *    If `reload` is a string (or state object), the state object is fetched (by name, or object reference); and \
     *    the transition reloads the resolves and views for that matched state, and all its children states.
     *
     * @returns {promise} A promise representing the state of the new transition.
     *
     * Possible success values:
     *
     * - $state.current
     *
     * <br/>Possible rejection values:
     *
     * - 'transition superseded' - when a newer transition has been started after this one
     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
     *   when a `$stateNotFound` `event.retry` promise errors.
     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
     * - *resolve error* - when an error has occurred with a `resolve`
     *
     */
    $state.go = function go(to, params, options) {
      return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#transitionTo
     * @methodOf ui.router.state.$state
     *
     * @description
     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.transitionTo('contact.detail');
     *   };
     * });
     * </pre>
     *
     * @param {string} to State name.
     * @param {object=} toParams A map of the parameters that will be sent to the state,
     * will populate $stateParams.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *    if String, then will reload the state with the name given in reload, and any children.
     *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.
     *
     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
    $state.transitionTo = function transitionTo(to, toParams, options) {
      toParams = toParams || {};
      options = extend({
        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
      }, options || {});

      var from = $state.$current, fromParams = $state.params, fromPath = from.path;
      var evt, toState = findState(to, options.relative);

      // Store the hash param for later (since it will be stripped out by various methods)
      var hash = toParams['#'];

      if (!isDefined(toState)) {
        var redirect = { to: to, toParams: toParams, options: options };
        var redirectResult = handleRedirect(redirect, from.self, fromParams, options);

        if (redirectResult) {
          return redirectResult;
        }

        // Always retry once if the $stateNotFound was not prevented
        // (handles either redirect changed or state lazy-definition)
        to = redirect.to;
        toParams = redirect.toParams;
        options = redirect.options;
        toState = findState(to, options.relative);

        if (!isDefined(toState)) {
          if (!options.relative) throw new Error("No such state '" + to + "'");
          throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
        }
      }
      if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
      if (!toState.params.$$validates(toParams)) return TransitionFailed;

      toParams = toState.params.$$values(toParams);
      to = toState;

      var toPath = to.path;

      // Starting from the root of the path, keep all levels that haven't changed
      var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];

      if (!options.reload) {
        while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
          locals = toLocals[keep] = state.locals;
          keep++;
          state = toPath[keep];
        }
      } else if (isString(options.reload) || isObject(options.reload)) {
        if (isObject(options.reload) && !options.reload.name) {
          throw new Error('Invalid reload state object');
        }
        
        var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);
        if (options.reload && !reloadState) {
          throw new Error("No such reload state '" + (isString(options.reload) ? options.reload : options.reload.name) + "'");
        }

        while (state && state === fromPath[keep] && state !== reloadState) {
          locals = toLocals[keep] = state.locals;
          keep++;
          state = toPath[keep];
        }
      }

      // If we're going to the same state and all locals are kept, we've got nothing to do.
      // But clear 'transition', as we still want to cancel any other pending transitions.
      // TODO: We may not want to bump 'transition' if we're called from a location change
      // that we've initiated ourselves, because we might accidentally abort a legitimate
      // transition initiated from code?
      if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {
        if (hash) toParams['#'] = hash;
        $state.params = toParams;
        copy($state.params, $stateParams);
        copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);
        if (options.location && to.navigable && to.navigable.url) {
          $urlRouter.push(to.navigable.url, toParams, {
            $$avoidResync: true, replace: options.location === 'replace'
          });
          $urlRouter.update(true);
        }
        $state.transition = null;
        return $q.when($state.current);
      }

      // Filter parameters before we pass them to event handlers etc.
      toParams = filterByKeys(to.params.$$keys(), toParams || {});
      
      // Re-add the saved hash before we start returning things or broadcasting $stateChangeStart
      if (hash) toParams['#'] = hash;
      
      // Broadcast start event and cancel the transition if requested
      if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeStart
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when the state transition **begins**. You can use `event.preventDefault()`
         * to prevent the transition from happening and then the transition promise will be
         * rejected with a `'transition prevented'` value.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         *
         * @example
         *
         * <pre>
         * $rootScope.$on('$stateChangeStart',
         * function(event, toState, toParams, fromState, fromParams){
         *     event.preventDefault();
         *     // transitionTo() promise will be rejected with
         *     // a 'transition prevented' error
         * })
         * </pre>
         */
        if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams, options).defaultPrevented) {
          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
          //Don't update and resync url if there's been a new transition started. see issue #2238, #600
          if ($state.transition == null) $urlRouter.update();
          return TransitionPrevented;
        }
      }

      // Resolve locals for the remaining states, but don't update any global state just
      // yet -- if anything fails to resolve the current state needs to remain untouched.
      // We also set up an inheritance chain for the locals here. This allows the view directive
      // to quickly look up the correct definition for each view in the current state. Even
      // though we create the locals object itself outside resolveState(), it is initially
      // empty and gets filled asynchronously. We need to keep track of the promise for the
      // (fully resolved) current locals, and pass this down the chain.
      var resolved = $q.when(locals);

      for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
        locals = toLocals[l] = inherit(locals);
        resolved = resolveState(state, toParams, state === to, resolved, locals, options);
      }

      // Once everything is resolved, we are ready to perform the actual transition
      // and return a promise for the new state. We also keep track of what the
      // current promise is, so that we can detect overlapping transitions and
      // keep only the outcome of the last transition.
      var transition = $state.transition = resolved.then(function () {
        var l, entering, exiting;

        if ($state.transition !== transition) {
          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
          return TransitionSuperseded;
        }

        // Exit 'from' states not kept
        for (l = fromPath.length - 1; l >= keep; l--) {
          exiting = fromPath[l];
          if (exiting.self.onExit) {
            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
          }
          exiting.locals = null;
        }

        // Enter 'to' states not kept
        for (l = keep; l < toPath.length; l++) {
          entering = toPath[l];
          entering.locals = toLocals[l];
          if (entering.self.onEnter) {
            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
          }
        }

        // Run it again, to catch any transitions in callbacks
        if ($state.transition !== transition) {
          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
          return TransitionSuperseded;
        }

        // Update globals in $state
        $state.$current = to;
        $state.current = to.self;
        $state.params = toParams;
        copy($state.params, $stateParams);
        $state.transition = null;

        if (options.location && to.navigable) {
          $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
            $$avoidResync: true, replace: options.location === 'replace'
          });
        }

        if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeSuccess
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired once the state transition is **complete**.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         */
          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
        }
        $urlRouter.update(true);

        return $state.current;
      }).then(null, function (error) {
        // propagate TransitionSuperseded error without emitting $stateChangeCancel
        // as it was already emitted in the success handler above
        if (error === TransitionSupersededError) return TransitionSuperseded;

        if ($state.transition !== transition) {
          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
          return TransitionSuperseded;
        }

        $state.transition = null;
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeError
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when an **error occurs** during transition. It's important to note that if you
         * have any errors in your resolve functions (javascript errors, non-existent services, etc)
         * they will not throw traditionally. You must listen for this $stateChangeError event to
         * catch **ALL** errors.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         * @param {Error} error The resolve error object.
         */
        evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);

        if (!evt.defaultPrevented) {
          $urlRouter.update();
        }

        return $q.reject(error);
      });

      return transition;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#is
     * @methodOf ui.router.state.$state
     *
     * @description
     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
     * but only checks for the full state name. If params is supplied then it will be
     * tested for strict equality against the current active params object, so all params
     * must match with none missing and no extras.
     *
     * @example
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // absolute name
     * $state.is('contact.details.item'); // returns true
     * $state.is(contactDetailItemStateObject); // returns true
     *
     * // relative name (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
     * </pre>
     *
     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
     * to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
     * test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it is the state.
     */
    $state.is = function is(stateOrName, params, options) {
      options = extend({ relative: $state.$current }, options || {});
      var state = findState(stateOrName, options.relative);

      if (!isDefined(state)) { return undefined; }
      if ($state.$current !== state) { return false; }
      return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#includes
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method to determine if the current active state is equal to or is the child of the
     * state stateName. If any params are passed then they will be tested for a match as well.
     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
     *
     * @example
     * Partial and relative names
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // Using partial names
     * $state.includes("contacts"); // returns true
     * $state.includes("contacts.details"); // returns true
     * $state.includes("contacts.details.item"); // returns true
     * $state.includes("contacts.list"); // returns false
     * $state.includes("about"); // returns false
     *
     * // Using relative names (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
     * </pre>
     *
     * Basic globbing patterns
     * <pre>
     * $state.$current.name = 'contacts.details.item.url';
     *
     * $state.includes("*.details.*.*"); // returns true
     * $state.includes("*.details.**"); // returns true
     * $state.includes("**.item.**"); // returns true
     * $state.includes("*.details.item.url"); // returns true
     * $state.includes("*.details.*.url"); // returns true
     * $state.includes("*.details.*"); // returns false
     * $state.includes("item.**"); // returns false
     * </pre>
     *
     * @param {string} stateOrName A partial name, relative name, or glob pattern
     * to be searched for within the current state name.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
     * that you'd like to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
     * .includes will test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it does include the state
     */
    $state.includes = function includes(stateOrName, params, options) {
      options = extend({ relative: $state.$current }, options || {});
      if (isString(stateOrName) && isGlob(stateOrName)) {
        if (!doesStateMatchGlob(stateOrName)) {
          return false;
        }
        stateOrName = $state.$current.name;
      }

      var state = findState(stateOrName, options.relative);
      if (!isDefined(state)) { return undefined; }
      if (!isDefined($state.$current.includes[state.name])) { return false; }
      if (!params) { return true; }

      var keys = objectKeys(params);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i], paramDef = state.params[key];
        if (paramDef && !paramDef.type.equals($stateParams[key], params[key])) {
          return false;
        }
      }

      return true;
    };


    /**
     * @ngdoc function
     * @name ui.router.state.$state#href
     * @methodOf ui.router.state.$state
     *
     * @description
     * A url generation method that returns the compiled url for the given state populated with the given params.
     *
     * @example
     * <pre>
     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
     * </pre>
     *
     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
     * @param {object=} params An object of parameter values to fill the state's required parameters.
     * @param {object=} options Options object. The options are:
     *
     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
     *    ancestor with a valid url).
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
     * 
     * @returns {string} compiled state url
     */
    $state.href = function href(stateOrName, params, options) {
      options = extend({
        lossy:    true,
        inherit:  true,
        absolute: false,
        relative: $state.$current
      }, options || {});

      var state = findState(stateOrName, options.relative);

      if (!isDefined(state)) return null;
      if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);
      
      var nav = (state && options.lossy) ? state.navigable : state;

      if (!nav || nav.url === undefined || nav.url === null) {
        return null;
      }
      return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {
        absolute: options.absolute
      });
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#get
     * @methodOf ui.router.state.$state
     *
     * @description
     * Returns the state configuration object for any specific state or all states.
     *
     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
     * the requested state. If not provided, returns an array of ALL state configs.
     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
     * @returns {Object|Array} State configuration object or array of all objects.
     */
    $state.get = function (stateOrName, context) {
      if (arguments.length === 0) return map(objectKeys(states), function(name) { return states[name].self; });
      var state = findState(stateOrName, context || $state.$current);
      return (state && state.self) ? state.self : null;
    };

    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
      // Make a restricted $stateParams with only the parameters that apply to this state if
      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
      // we also need $stateParams to be available for any $injector calls we make during the
      // dependency resolution process.
      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);
      var locals = { $stateParams: $stateParams };

      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
      // We're also including $stateParams in this; that way the parameters are restricted
      // to the set that should be visible to the state, and are independent of when we update
      // the global $state and $stateParams values.
      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
      var promises = [dst.resolve.then(function (globals) {
        dst.globals = globals;
      })];
      if (inherited) promises.push(inherited);

      function resolveViews() {
        var viewsPromises = [];

        // Resolve template and dependencies for all views.
        forEach(state.views, function (view, name) {
          var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
          injectables.$template = [ function () {
            return $view.load(name, { view: view, locals: dst.globals, params: $stateParams, notify: options.notify }) || '';
          }];

          viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {
            // References to the controller (only instantiated at link time)
            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
              var injectLocals = angular.extend({}, injectables, dst.globals);
              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
            } else {
              result.$$controller = view.controller;
            }
            // Provide access to the state itself for internal use
            result.$$state = state;
            result.$$controllerAs = view.controllerAs;
            result.$$resolveAs = view.resolveAs;
            dst[name] = result;
          }));
        });

        return $q.all(viewsPromises).then(function(){
          return dst.globals;
        });
      }

      // Wait for all the promises and then return the activation object
      return $q.all(promises).then(resolveViews).then(function (values) {
        return dst;
      });
    }

    return $state;
  }

  function shouldSkipReload(to, toParams, from, fromParams, locals, options) {
    // Return true if there are no differences in non-search (path/object) params, false if there are differences
    function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {
      // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.
      function notSearchParam(key) {
        return fromAndToState.params[key].location != "search";
      }
      var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);
      var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));
      var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);
      return nonQueryParamSet.$$equals(fromParams, toParams);
    }

    // If reload was not explicitly requested
    // and we're transitioning to the same state we're already in
    // and    the locals didn't change
    //     or they changed in a way that doesn't merit reloading
    //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)
    // Then return true.
    if (!options.reload && to === from &&
      (locals === from.locals || (to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams)))) {
      return true;
    }
  }
}

angular.module('ui.router.state')
  .factory('$stateParams', function () { return {}; })
  .constant("$state.runtime", { autoinject: true })
  .provider('$state', $StateProvider)
  // Inject $state to initialize when entering runtime. #2574
  .run(['$injector', function ($injector) {
    // Allow tests (stateSpec.js) to turn this off by defining this constant
    if ($injector.get("$state.runtime").autoinject) {
      $injector.get('$state');
    }
  }]);


$ViewProvider.$inject = [];
function $ViewProvider() {

  this.$get = $get;
  /**
   * @ngdoc object
   * @name ui.router.state.$view
   *
   * @requires ui.router.util.$templateFactory
   * @requires $rootScope
   *
   * @description
   *
   */
  $get.$inject = ['$rootScope', '$templateFactory'];
  function $get(   $rootScope,   $templateFactory) {
    return {
      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
      /**
       * @ngdoc function
       * @name ui.router.state.$view#load
       * @methodOf ui.router.state.$view
       *
       * @description
       *
       * @param {string} name name
       * @param {object} options option object.
       */
      load: function load(name, options) {
        var result, defaults = {
          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
        };
        options = extend(defaults, options);

        if (options.view) {
          result = $templateFactory.fromConfig(options.view, options.params, options.locals);
        }
        return result;
      }
    };
  }
}

angular.module('ui.router.state').provider('$view', $ViewProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$uiViewScrollProvider
 *
 * @description
 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
 */
function $ViewScrollProvider() {

  var useAnchorScroll = false;

  /**
   * @ngdoc function
   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
   * @methodOf ui.router.state.$uiViewScrollProvider
   *
   * @description
   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
   * scrolling based on the url anchor.
   */
  this.useAnchorScroll = function () {
    useAnchorScroll = true;
  };

  /**
   * @ngdoc object
   * @name ui.router.state.$uiViewScroll
   *
   * @requires $anchorScroll
   * @requires $timeout
   *
   * @description
   * When called with a jqLite element, it scrolls the element into view (after a
   * `$timeout` so the DOM has time to refresh).
   *
   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
   */
  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
    if (useAnchorScroll) {
      return $anchorScroll;
    }

    return function ($element) {
      return $timeout(function () {
        $element[0].scrollIntoView();
      }, 0, false);
    };
  }];
}

angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-view
 *
 * @requires ui.router.state.$state
 * @requires $compile
 * @requires $controller
 * @requires $injector
 * @requires ui.router.state.$uiViewScroll
 * @requires $document
 *
 * @restrict ECA
 *
 * @description
 * The ui-view directive tells $state where to place your templates.
 *
 * @param {string=} name A view name. The name should be unique amongst the other views in the
 * same state. You can have views of the same name that live in different states.
 *
 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
 * scroll ui-view elements into view when they are populated during a state activation.
 *
 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
 *
 * @param {string=} onload Expression to evaluate whenever the view updates.
 *
 * @example
 * A view can be unnamed or named.
 * <pre>
 * <!-- Unnamed -->
 * <div ui-view></div>
 *
 * <!-- Named -->
 * <div ui-view="viewName"></div>
 * </pre>
 *
 * You can only have one unnamed view within any template (or root html). If you are only using a
 * single view and it is unnamed then you can populate it like so:
 * <pre>
 * <div ui-view></div>
 * $stateProvider.state("home", {
 *   template: "<h1>HELLO!</h1>"
 * })
 * </pre>
 *
 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#methods_state `views`}
 * config property, by name, in this case an empty name:
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 *
 * But typically you'll only use the views property if you name your view or have more than one view
 * in the same template. There's not really a compelling reason to name a view if its the only one,
 * but you could if you wanted, like so:
 * <pre>
 * <div ui-view="main"></div>
 * </pre>
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "main": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 *
 * Really though, you'll use views to set up multiple views:
 * <pre>
 * <div ui-view></div>
 * <div ui-view="chart"></div>
 * <div ui-view="data"></div>
 * </pre>
 *
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     },
 *     "chart": {
 *       template: "<chart_thing/>"
 *     },
 *     "data": {
 *       template: "<data_thing/>"
 *     }
 *   }    
 * })
 * </pre>
 *
 * Examples for `autoscroll`:
 *
 * <pre>
 * <!-- If autoscroll present with no expression,
 *      then scroll ui-view into view -->
 * <ui-view autoscroll/>
 *
 * <!-- If autoscroll present with valid expression,
 *      then scroll ui-view into view if expression evaluates to true -->
 * <ui-view autoscroll='true'/>
 * <ui-view autoscroll='false'/>
 * <ui-view autoscroll='scopeVariable'/>
 * </pre>
 *
 * Resolve data:
 *
 * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this
 * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.
 *
 * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the
 * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which
 * depends on `$resolve` data.
 *
 * Example usage of $resolve in a view template
 * <pre>
 * $stateProvider.state('home', {
 *   template: '<my-component user="$resolve.user"></my-component>',
 *   resolve: {
 *     user: function(UserService) { return UserService.fetchUser(); }
 *   }
 * });
 * </pre>
 */
$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate', '$q'];
function $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate,   $q) {

  function getService() {
    return ($injector.has) ? function(service) {
      return $injector.has(service) ? $injector.get(service) : null;
    } : function(service) {
      try {
        return $injector.get(service);
      } catch (e) {
        return null;
      }
    };
  }

  var service = getService(),
      $animator = service('$animator'),
      $animate = service('$animate');

  // Returns a set of DOM manipulation functions based on which Angular version
  // it should use
  function getRenderer(attrs, scope) {
    var statics = function() {
      return {
        enter: function (element, target, cb) { target.after(element); cb(); },
        leave: function (element, cb) { element.remove(); cb(); }
      };
    };

    if ($animate) {
      return {
        enter: function(element, target, cb) {
          if (angular.version.minor > 2) {
            $animate.enter(element, null, target).then(cb);
          } else {
            $animate.enter(element, null, target, cb);
          }
        },
        leave: function(element, cb) {
          if (angular.version.minor > 2) {
            $animate.leave(element).then(cb);
          } else {
            $animate.leave(element, cb);
          }
        }
      };
    }

    if ($animator) {
      var animate = $animator && $animator(scope, attrs);

      return {
        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },
        leave: function(element, cb) { animate.leave(element); cb(); }
      };
    }

    return statics();
  }

  var directive = {
    restrict: 'ECA',
    terminal: true,
    priority: 400,
    transclude: 'element',
    compile: function (tElement, tAttrs, $transclude) {
      return function (scope, $element, attrs) {
        var previousEl, currentEl, currentScope, latestLocals,
            onloadExp     = attrs.onload || '',
            autoScrollExp = attrs.autoscroll,
            renderer      = getRenderer(attrs, scope),
            inherited     = $element.inheritedData('$uiView');

        scope.$on('$stateChangeSuccess', function() {
          updateView(false);
        });

        updateView(true);

        function cleanupLastView() {
          if (previousEl) {
            previousEl.remove();
            previousEl = null;
          }

          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }

          if (currentEl) {
            var $uiViewData = currentEl.data('$uiViewAnim');
            renderer.leave(currentEl, function() {
              $uiViewData.$$animLeave.resolve();
              previousEl = null;
            });

            previousEl = currentEl;
            currentEl = null;
          }
        }

        function updateView(firstTime) {
          var newScope,
              name            = getUiViewName(scope, attrs, $element, $interpolate),
              previousLocals  = name && $state.$current && $state.$current.locals[name];

          if (!firstTime && previousLocals === latestLocals) return; // nothing to do
          newScope = scope.$new();
          latestLocals = $state.$current.locals[name];

          /**
           * @ngdoc event
           * @name ui.router.state.directive:ui-view#$viewContentLoading
           * @eventOf ui.router.state.directive:ui-view
           * @eventType emits on ui-view directive scope
           * @description
           *
           * Fired once the view **begins loading**, *before* the DOM is rendered.
           *
           * @param {Object} event Event object.
           * @param {string} viewName Name of the view.
           */
          newScope.$emit('$viewContentLoading', name);

          var clone = $transclude(newScope, function(clone) {
            var animEnter = $q.defer(), animLeave = $q.defer();
            var viewAnimData = {
              $animEnter: animEnter.promise,
              $animLeave: animLeave.promise,
              $$animLeave: animLeave
            };

            clone.data('$uiViewAnim', viewAnimData);
            renderer.enter(clone, $element, function onUiViewEnter() {
              animEnter.resolve();
              if(currentScope) {
                currentScope.$emit('$viewContentAnimationEnded');
              }

              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                $uiViewScroll(clone);
              }
            });
            cleanupLastView();
          });

          currentEl = clone;
          currentScope = newScope;
          /**
           * @ngdoc event
           * @name ui.router.state.directive:ui-view#$viewContentLoaded
           * @eventOf ui.router.state.directive:ui-view
           * @eventType emits on ui-view directive scope
           * @description
           * Fired once the view is **loaded**, *after* the DOM is rendered.
           *
           * @param {Object} event Event object.
           * @param {string} viewName Name of the view.
           */
          currentScope.$emit('$viewContentLoaded', name);
          currentScope.$eval(onloadExp);
        }
      };
    }
  };

  return directive;
}

$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];
function $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {
  return {
    restrict: 'ECA',
    priority: -400,
    compile: function (tElement) {
      var initial = tElement.html();
      return function (scope, $element, attrs) {
        var current = $state.$current,
            name = getUiViewName(scope, attrs, $element, $interpolate),
            locals  = current && current.locals[name];

        if (! locals) {
          return;
        }

        $element.data('$uiView', { name: name, state: locals.$$state });
        $element.html(locals.$template ? locals.$template : initial);

        var resolveData = angular.extend({}, locals);
        scope[locals.$$resolveAs] = resolveData;

        var link = $compile($element.contents());

        if (locals.$$controller) {
          locals.$scope = scope;
          locals.$element = $element;
          var controller = $controller(locals.$$controller, locals);
          if (locals.$$controllerAs) {
            scope[locals.$$controllerAs] = controller;
            scope[locals.$$controllerAs][locals.$$resolveAs] = resolveData;
          }
          if (isFunction(controller.$onInit)) controller.$onInit();
          $element.data('$ngControllerController', controller);
          $element.children().data('$ngControllerController', controller);
        }

        link(scope);
      };
    }
  };
}

/**
 * Shared ui-view code for both directives:
 * Given scope, element, and its attributes, return the view's name
 */
function getUiViewName(scope, attrs, element, $interpolate) {
  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
  var uiViewCreatedBy = element.inheritedData('$uiView');
  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (uiViewCreatedBy ? uiViewCreatedBy.state.name : ''));
}

angular.module('ui.router.state').directive('uiView', $ViewDirective);
angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

function parseStateRef(ref, current) {
  var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
  if (preparsed) ref = current + '(' + preparsed[1] + ')';
  parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
  if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
  return { state: parsed[1], paramExpr: parsed[3] || null };
}

function stateContext(el) {
  var stateData = el.parent().inheritedData('$uiView');

  if (stateData && stateData.state && stateData.state.name) {
    return stateData.state;
  }
}

function getTypeInfo(el) {
  // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
  var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';
  var isForm = el[0].nodeName === "FORM";

  return {
    attr: isForm ? "action" : (isSvg ? 'xlink:href' : 'href'),
    isAnchor: el.prop("tagName").toUpperCase() === "A",
    clickable: !isForm
  };
}

function clickHook(el, $state, $timeout, type, current) {
  return function(e) {
    var button = e.which || e.button, target = current();

    if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {
      // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
      var transition = $timeout(function() {
        $state.go(target.state, target.params, target.options);
      });
      e.preventDefault();

      // if the state has no URL, ignore one preventDefault from the <a> directive.
      var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1: 0;

      e.preventDefault = function() {
        if (ignorePreventDefaultCount-- <= 0) $timeout.cancel(transition);
      };
    }
  };
}

function defaultOpts(el, $state) {
  return { relative: stateContext(el) || $state.$current, inherit: true };
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref
 *
 * @requires ui.router.state.$state
 * @requires $timeout
 *
 * @restrict A
 *
 * @description
 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated
 * URL, the directive will automatically generate & update the `href` attribute via
 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking
 * the link will trigger a state transition with optional parameters.
 *
 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be
 * handled natively by the browser.
 *
 * You can also use relative state paths within ui-sref, just like the relative
 * paths passed to `$state.go()`. You just need to be aware that the path is relative
 * to the state that the link lives in, in other words the state that loaded the
 * template containing the link.
 *
 * You can specify options to pass to {@link ui.router.state.$state#methods_go $state.go()}
 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
 * and `reload`.
 *
 * @example
 * Here's an example of how you'd use ui-sref and how it would compile. If you have the
 * following template:
 * <pre>
 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
 *
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
 *     </li>
 * </ul>
 * </pre>
 *
 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
 * <pre>
 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
 *
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
 *     </li>
 * </ul>
 *
 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
 * </pre>
 *
 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}
 */
$StateRefDirective.$inject = ['$state', '$timeout'];
function $StateRefDirective($state, $timeout) {
  return {
    restrict: 'A',
    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
    link: function(scope, element, attrs, uiSrefActive) {
      var ref    = parseStateRef(attrs.uiSref, $state.current.name);
      var def    = { state: ref.state, href: null, params: null };
      var type   = getTypeInfo(element);
      var active = uiSrefActive[1] || uiSrefActive[0];
      var unlinkInfoFn = null;
      var hookFn;

      def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});

      var update = function(val) {
        if (val) def.params = angular.copy(val);
        def.href = $state.href(ref.state, def.params, def.options);

        if (unlinkInfoFn) unlinkInfoFn();
        if (active) unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);
        if (def.href !== null) attrs.$set(type.attr, def.href);
      };

      if (ref.paramExpr) {
        scope.$watch(ref.paramExpr, function(val) { if (val !== def.params) update(val); }, true);
        def.params = angular.copy(scope.$eval(ref.paramExpr));
      }
      update();

      if (!type.clickable) return;
      hookFn = clickHook(element, $state, $timeout, type, function() { return def; });
      element[element.on ? 'on' : 'bind']("click", hookFn);
      scope.$on('$destroy', function() {
        element[element.off ? 'off' : 'unbind']("click", hookFn);
      });
    }
  };
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-state
 *
 * @requires ui.router.state.uiSref
 *
 * @restrict A
 *
 * @description
 * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,
 * params and override options.
 *
 * @param {string} ui-state 'stateName' can be any valid absolute or relative state
 * @param {Object} ui-state-params params to pass to {@link ui.router.state.$state#methods_href $state.href()}
 * @param {Object} ui-state-opts options to pass to {@link ui.router.state.$state#methods_go $state.go()}
 */
$StateRefDynamicDirective.$inject = ['$state', '$timeout'];
function $StateRefDynamicDirective($state, $timeout) {
  return {
    restrict: 'A',
    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
    link: function(scope, element, attrs, uiSrefActive) {
      var type   = getTypeInfo(element);
      var active = uiSrefActive[1] || uiSrefActive[0];
      var group  = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];
      var watch  = '[' + group.map(function(val) { return val || 'null'; }).join(', ') + ']';
      var def    = { state: null, params: null, options: null, href: null };
      var unlinkInfoFn = null;
      var hookFn;

      function runStateRefLink (group) {
        def.state = group[0]; def.params = group[1]; def.options = group[2];
        def.href = $state.href(def.state, def.params, def.options);

        if (unlinkInfoFn) unlinkInfoFn();
        if (active) unlinkInfoFn = active.$$addStateInfo(def.state, def.params);
        if (def.href) attrs.$set(type.attr, def.href);
      }

      scope.$watch(watch, runStateRefLink, true);
      runStateRefLink(scope.$eval(watch));

      if (!type.clickable) return;
      hookFn = clickHook(element, $state, $timeout, type, function() { return def; });
      element[element.on ? 'on' : 'bind']("click", hookFn);
      scope.$on('$destroy', function() {
        element[element.off ? 'off' : 'unbind']("click", hookFn);
      });
    }
  };
}


/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * A directive working alongside ui-sref to add classes to an element when the
 * related ui-sref directive's state is active, and removing them when it is inactive.
 * The primary use-case is to simplify the special appearance of navigation menus
 * relying on `ui-sref`, by having the "active" state's menu button appear different,
 * distinguishing it from the inactive menu items.
 *
 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
 * ui-sref-active found at the same level or above the ui-sref will be used.
 *
 * Will activate when the ui-sref's target state or any child state is active. If you
 * need to activate only when the ui-sref target state is active and *not* any of
 * it's children, then you will use
 * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
 *
 * @example
 * Given the following template:
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item">
 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 *
 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
 * the resulting HTML will appear as (note the 'active' class):
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item active">
 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 * The class name is interpolated **once** during the directives link time (any further changes to the
 * interpolated value are ignored).
 *
 * Multiple classes may be specified in a space-separated format:
 * <pre>
 * <ul>
 *   <li ui-sref-active='class1 class2 class3'>
 *     <a ui-sref="app.user">link</a>
 *   </li>
 * </ul>
 * </pre>
 *
 * It is also possible to pass ui-sref-active an expression that evaluates
 * to an object hash, whose keys represent active class names and whose
 * values represent the respective state names/globs.
 * ui-sref-active will match if the current active state **includes** any of
 * the specified state names/globs, even the abstract ones.
 *
 * @Example
 * Given the following template, with "admin" being an abstract state:
 * <pre>
 * <div ui-sref-active="{'active': 'admin.*'}">
 *   <a ui-sref-active="active" ui-sref="admin.roles">Roles</a>
 * </div>
 * </pre>
 *
 * When the current state is "admin.roles" the "active" class will be applied
 * to both the <div> and <a> elements. It is important to note that the state
 * names/globs passed to ui-sref-active shadow the state provided by ui-sref.
 */

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active-eq
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
 * when the exact target state used in the `ui-sref` is active; no child states.
 *
 */
$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
function $StateRefActiveDirective($state, $stateParams, $interpolate) {
  return  {
    restrict: "A",
    controller: ['$scope', '$element', '$attrs', '$timeout', function ($scope, $element, $attrs, $timeout) {
      var states = [], activeClasses = {}, activeEqClass, uiSrefActive;

      // There probably isn't much point in $observing this
      // uiSrefActive and uiSrefActiveEq share the same directive object with some
      // slight difference in logic routing
      activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);

      try {
        uiSrefActive = $scope.$eval($attrs.uiSrefActive);
      } catch (e) {
        // Do nothing. uiSrefActive is not a valid expression.
        // Fall back to using $interpolate below
      }
      uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);
      if (isObject(uiSrefActive)) {
        forEach(uiSrefActive, function(stateOrName, activeClass) {
          if (isString(stateOrName)) {
            var ref = parseStateRef(stateOrName, $state.current.name);
            addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);
          }
        });
      }

      // Allow uiSref to communicate with uiSrefActive[Equals]
      this.$$addStateInfo = function (newState, newParams) {
        // we already got an explicit state provided by ui-sref-active, so we
        // shadow the one that comes from ui-sref
        if (isObject(uiSrefActive) && states.length > 0) {
          return;
        }
        var deregister = addState(newState, newParams, uiSrefActive);
        update();
        return deregister;
      };

      $scope.$on('$stateChangeSuccess', update);

      function addState(stateName, stateParams, activeClass) {
        var state = $state.get(stateName, stateContext($element));
        var stateHash = createStateHash(stateName, stateParams);

        var stateInfo = {
          state: state || { name: stateName },
          params: stateParams,
          hash: stateHash
        };

        states.push(stateInfo);
        activeClasses[stateHash] = activeClass;

        return function removeState() {
          var idx = states.indexOf(stateInfo);
          if (idx !== -1) states.splice(idx, 1);
        };
      }

      /**
       * @param {string} state
       * @param {Object|string} [params]
       * @return {string}
       */
      function createStateHash(state, params) {
        if (!isString(state)) {
          throw new Error('state should be a string');
        }
        if (isObject(params)) {
          return state + toJson(params);
        }
        params = $scope.$eval(params);
        if (isObject(params)) {
          return state + toJson(params);
        }
        return state;
      }

      // Update route state
      function update() {
        for (var i = 0; i < states.length; i++) {
          if (anyMatch(states[i].state, states[i].params)) {
            addClass($element, activeClasses[states[i].hash]);
          } else {
            removeClass($element, activeClasses[states[i].hash]);
          }

          if (exactMatch(states[i].state, states[i].params)) {
            addClass($element, activeEqClass);
          } else {
            removeClass($element, activeEqClass);
          }
        }
      }

      function addClass(el, className) { $timeout(function () { el.addClass(className); }); }
      function removeClass(el, className) { el.removeClass(className); }
      function anyMatch(state, params) { return $state.includes(state.name, params); }
      function exactMatch(state, params) { return $state.is(state.name, params); }

      update();
    }]
  };
}

angular.module('ui.router.state')
  .directive('uiSref', $StateRefDirective)
  .directive('uiSrefActive', $StateRefActiveDirective)
  .directive('uiSrefActiveEq', $StateRefActiveDirective)
  .directive('uiState', $StateRefDynamicDirective);

/**
 * @ngdoc filter
 * @name ui.router.state.filter:isState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
 */
$IsStateFilter.$inject = ['$state'];
function $IsStateFilter($state) {
  var isFilter = function (state, params) {
    return $state.is(state, params);
  };
  isFilter.$stateful = true;
  return isFilter;
}

/**
 * @ngdoc filter
 * @name ui.router.state.filter:includedByState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
 */
$IncludedByStateFilter.$inject = ['$state'];
function $IncludedByStateFilter($state) {
  var includesFilter = function (state, params, options) {
    return $state.includes(state, params, options);
  };
  includesFilter.$stateful = true;
  return  includesFilter;
}

angular.module('ui.router.state')
  .filter('isState', $IsStateFilter)
  .filter('includedByState', $IncludedByStateFilter);
})(window, window.angular);
},{}],6:[function(require,module,exports){
(function (global){
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.5';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Gets the value at `key`, unless `key` is "__proto__".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    return key == '__proto__'
      ? undefined
      : object[key];
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });

        return result;
      }

      if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });

        return result;
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],7:[function(require,module,exports){
(function () {
  angular.module('ChemistryX10').config([
    '$stateProvider',
    '$urlRouterProvider',
    '$httpProvider',
    'appConfiguratorProvider',
    function(
      $stateProvider,
      $urlRouterProvider,
      $httpProvider,
      appConfiguratorProvider
      ){

      appConfiguratorProvider
        .updateParentsDesc()
        .updateReactionsLimit()
        .updateFromServer()
        .updateLang();

      $urlRouterProvider.otherwise("/start");
      $stateProvider
      .state('start', {
        url: '/start',
        templateUrl: './partials/categories/home.html'
      })
      .state('solvingTasks', {
        url: '/solvingTasks',
        templateUrl: './partials/categories/solvingTasks.html',
        controller: 'SimpleProblemsController'
      })
      .state('table', {
        url: '/table',
        templateUrl: './partials/categories/table.html',
        controller: 'TableCtrl'
      })
      .state('table.elemDescription', {
        url: '/elementDescription/:element_id',
        templateUrl: './partials/categories/elementDescription.html',
        controller: 'ElementDescriptionCtrl'
      })
      .state('solvingReactions', {
        url: '/solvingReactions',
        templateUrl: './partials/categories/solvingReactions.html',
        controller: 'ReactionsController'
      })
      .state('molarMass', {
        url: '/molarMass',
        templateUrl: './partials/categories/molarMass.html',
        controller: 'MolarMassCtrl'
      })
      .state('alignmentCoefficients', {
        url: '/alignmentCoefficients',
        templateUrl: './partials/categories/alignmentCoefficients.html',
        controller: 'AlignmentCoefficientCtrl'
      })
      .state('table.tableInfo', {
        url: '/tableInfo',
        templateUrl: './partials/other/tableInfo.html',
        controller: 'TableInfoController'
      })
      .state('protect', {
        url: '/protect',
        templateUrl: './partials/categories/protect.html',
        controller: 'ProtectPageController'
      })
      .state('protectClock', {
        url: '/protect/clock',
        templateUrl: './partials/categories/protect/clock.html',
        controller: 'ProtectClockController'
      })
      .state('protectCall', {
        url: '/protect/call',
        templateUrl: './partials/categories/protect/call.html',
        controller: 'ProtectCallController'
      })
      .state('solvingChains', {
        url: '/solvingChains',
        templateUrl: './partials/categories/solvingChains.html',
        controller: 'ReactionsController'
      })
      .state('solubilityTable', {
        url: '/solubilityTable',
        templateUrl: './partials/categories/solubilityTable.html',
        controller: 'SolubilityTableCtrl'
      })
      .state('solubilityTable.info', {
        url: 'solubilityTableInfo',
        templateUrl: './partials/other/solubilityTableInfo.html'
      })

      // Формулы
      .state('formulas', {
        url: '/formulas',
        templateUrl: './partials/categories/formulas.html',
        controller: 'FormulasCtrl'
      })
      .state('formulas.formulaLol', {
        url: '/formulaLol/leftvar=:lvar&rightvar=:rvar',
        templateUrl: './partials/categories/formulas/formulaLol.html',
        controller: 'FormulaLolCtrl'
      })

      // Шпаргалки, формулы
      .state('theory', {
        url: '/theory',
        templateUrl: './partials/categories/theory.html',
        controller: 'TheoryController'
      })
      .state('tables', {
        url: '/theory/tables',
        templateUrl: './partials/categories/theory/tables.html'
      })
      .state('activitiesTable', {
        url: '/theory/tables/activitiesTable',
        templateUrl: './partials/categories/activitiesTable.html'
      })
      .state('cribs', {
        url: '/theory/cribs',
        templateUrl: './partials/categories/theory/cribs.html'
      })
      .state('cribsOrganic', {
        url: '/theory/cribs/organic',
        templateUrl: './partials/categories/theory/cribs/organic.html',
        controller: 'CribsListController'
      })
      .state('cribsInorganic', {
        url: '/theory/cribs/inorganic',
        templateUrl: './partials/categories/theory/cribs/inorganic.html',
        controller: 'CribsListController'
      })
      .state('cribsOrganicContent', {
        url: '/theory/cribs/organic/:cribId',
        templateUrl: './partials/categories/theory/crib-content.html',
        controller: 'CribContentController'
      })
      .state('cribsInorganicContent', {
        url: '/theory/cribs/inorganic/:cribId',
        templateUrl: './partials/categories/theory/crib-content.html',
        controller: 'CribContentController'
      })

      // Руководство
      .state('guides', {
        url: '/guides',
        templateUrl: './partials/categories/guides.html'
      })
      .state('protectGuide', {
        url: '/guides/protect',
        templateUrl: './partials/categories/guides/protect.html'
      })
      .state('solverGuide', {
        url: '/guides/solver',
        templateUrl: './partials/categories/guides/solver.html'
      })
      .state('reactionsGuide', {
        url: '/guides/reactions',
        templateUrl: './partials/categories/guides/reactions.html'
      })
      .state('chainsGuide', {
        url: '/guides/chains',
        templateUrl: './partials/categories/guides/chains.html'
      })
      .state('molarGuide', {
        url: '/guides/molar',
        templateUrl: './partials/categories/guides/molar.html'
      })
      .state('coefGuide', {
        url: '/guides/coef',
        templateUrl: './partials/categories/guides/coef.html'
      })

      // Лэндинг покупки pro-версии
      .state('goto-pro', {
        url: '/goto-pro',
        templateUrl: './partials/categories/goto-pro.html',
        controller: 'GotoProController'
      })
      .state('goto-pro-parents', {
        url: '/goto-pro-parents',
        templateUrl: './partials/categories/goto-pro-parents.html',
        controller: 'GotoProController'
      })

      // Настройки
      .state('settings', {
        url: '/settings',
        templateUrl: './partials/categories/settings.html',
        controller: 'SettingsController'
      });
  }]);
})();

},{}],8:[function(require,module,exports){
(function() {
	'use strict';
	require('angular-gettext');
    require('angular-ui-router');
    require('angular-sanitize');

    // require('./translations/translations.js');
    

    angular.module('ChemistryX10', [
        'ui.router',
        'mobile-angular-ui',
        'mobile-angular-ui.gestures',
        'ngSanitize',
        'gettext'
    ]);
    require('./constants/ions.constant.js');
    require('./constants/periodic_table.constant.js');
    

    require('./services/app_configurator.service.js');
    require('./services/equation_parser.service.js');
    require('./services/ions.service.js');
    require('./services/periodic_table.service.js');
    require('./services/alignment_coefficient.service.js');
    require('./services/reactions_solving.service.js');

    require('./controllers/accordion.controller.js');
    require('./controllers/alignment_coefficient.controller.js');
    require('./controllers/crib_content.controller.js');
    require('./controllers/cribs_list.controller.js');
    require('./controllers/element_description.controller.js');
    require('./controllers/formula_lol.controller.js');
    require('./controllers/formulas.controller.js');
    require('./controllers/go_to_pro.controller.js');
    require('./controllers/molar_mass.controller.js');
    require('./controllers/protect_call.controller.js');
    require('./controllers/protect_clock.controller.js');
    require('./controllers/protect_page.controller.js');
    require('./controllers/settings.controller.js');
    require('./controllers/simple_problems.controller.js');
    require('./controllers/solubility_table.controller.js');
    require('./controllers/table.controller.js');
    require('./controllers/table_info.controller.js');
    require('./controllers/theory.controller.js');
    require('./controllers/reactions.controller.js');

    require('./filters_and_directives.js');
    
    require('./app.config.js');
    require('./app.run.js');
})();
},{"./app.config.js":7,"./app.run.js":9,"./constants/ions.constant.js":10,"./constants/periodic_table.constant.js":11,"./controllers/accordion.controller.js":12,"./controllers/alignment_coefficient.controller.js":13,"./controllers/crib_content.controller.js":14,"./controllers/cribs_list.controller.js":15,"./controllers/element_description.controller.js":16,"./controllers/formula_lol.controller.js":17,"./controllers/formulas.controller.js":18,"./controllers/go_to_pro.controller.js":19,"./controllers/molar_mass.controller.js":20,"./controllers/protect_call.controller.js":21,"./controllers/protect_clock.controller.js":22,"./controllers/protect_page.controller.js":23,"./controllers/reactions.controller.js":24,"./controllers/settings.controller.js":25,"./controllers/simple_problems.controller.js":26,"./controllers/solubility_table.controller.js":27,"./controllers/table.controller.js":28,"./controllers/table_info.controller.js":29,"./controllers/theory.controller.js":30,"./filters_and_directives.js":31,"./services/alignment_coefficient.service.js":33,"./services/app_configurator.service.js":34,"./services/equation_parser.service.js":35,"./services/ions.service.js":36,"./services/periodic_table.service.js":37,"./services/reactions_solving.service.js":38,"angular-gettext":2,"angular-sanitize":4,"angular-ui-router":5}],9:[function(require,module,exports){
(function() {
    var _ = require('lodash');

    angular.module('ChemistryX10').run([
        'appConfigurator',
        '$touch',
        '$rootScope',
        '$anchorScroll',
        '$window',
        '$location',
        '$http',
        '$log',
        '$interval',
        '$timeout',
        '$state',
        'gettextCatalog',
        '$periodic_table',
        '$ions',
        function(
            appConfigurator,
            $touch,
            $rootScope,
            $anchorScroll,
            $window,
            $location,
            $http,
            $log,
            $interval,
            $timeout,
            $state,
            gettextCatalog,
            $periodic_table,
            $ions
        ) {
            gettextCatalog.setCurrentLanguage(appConfigurator.getLang());

            $rootScope.$on('mobile-angular-ui.state.changed.uiSidebarLeft', function(e, newVal, oldVal) {
                elem = document.getElementsByClassName('app-layout')[0];
                if (newVal === true) {
                    var bind = $touch.bind(elem, {
                        start: function() {
                            $rootScope.Ui.turnOff("uiSidebarLeft");
                        }
                    });
                    // - только так, а не через ng-show (баг в ios)
                    elem.style.display = 'block';
                } else {
                    var unbind = $touch.bind(elem, {
                        start: function() {
                            unbind();
                        }
                    });
                    elem.style.display = 'none';
                }
            });

            // ЗАЩИТА ОТ УЧИТЕЛЯ
            /*
              1. Не в отдельном контроллере специально, потому что из view растянуть на весь экран без жестких костылей со стилями никак
              2. Существует 3 типа защиты: default, android, ios. Android и ios платные, default бесплатная. По сути надо было делить так: платные - айос/андроид, бесплатные - айос/андройд, но бесплатные часы (default) одинаковые и там, и там, а вот звонок мамы везде разный
            */

            $rootScope.protect = {};

            $rootScope.protect.getType = function() {
                if (localStorage.getItem('protectType') == undefined) {
                    localStorage.setItem('protectType', 'default');
                }
                return localStorage.getItem('protectType');
            };

            $rootScope.protect.getMode = function() {
                return localStorage.getItem('protectMode') == 'on';
            };

            $rootScope.protect.charge = 'default';
            $rootScope.protect.type = $rootScope.protect.getType();
            $rootScope.protect.mode = $rootScope.protect.getMode();
            $rootScope.protect.isOpened = false;
            $rootScope.protect.blockShow = {};
            $rootScope.protect.blockShow.protect = [];
            $rootScope.protect.blockShow.callPage = [];
            $rootScope.protect.blockShow.answer = [];
            $rootScope.protect.blockShow.blank = {};

            $rootScope.protect.saveMode = function() {
                //сохранение, включена или выключена защита, в localstorage
                if ($rootScope.protect.mode) {
                    localStorage.setItem('protectMode', 'on');
                } else localStorage.setItem('protectMode', 'off');
            };

            $rootScope.protect.clock = {};
            $rootScope.protect.clock.interval = null;
            $rootScope.protect.clock.start = function() {
                // переменные и функции для canvas-часов
                var i = 0;
                var CColor = "#5D5D5D"; //Цвет стрелок
                var CBackground = "black"; //Цвет фона
                var CSeconds = "#1fdf57"; //Цвет секундной стрелки
                var CSize = 300; //Размер поля
                var CCenter = CSize / 2; //Радиус круга
                var CTSize = CCenter - 10; //Расстояние от центра где рисуются отметки минут
                var CMSize = CTSize * 0.7; //Длинна минутной стрелки
                var CSSize = CTSize * 0.8; //Длинна секундной стрелки
                var CHSize = CTSize * 0.6; //Длинна часовой стрелки
                var clockProtect;

                function ctxline(x1, y1, len, angle, color, wid) { //Функция рисования линии под углом
                    var x2 = (CCenter + (len * Math.cos(angle)));
                    var y2 = (CCenter + (len * Math.sin(angle)));
                    ctx.beginPath();
                    ctx.strokeStyle = color;
                    ctx.lineWidth = wid;
                    ctx.moveTo(x1, y1);
                    ctx.lineTo(x2, y2);
                    ctx.stroke();
                }

                function ctxcircle(x, y, rd, color) { //Функция рисования круга
                    ctx.beginPath();
                    ctx.arc(x, y, rd, 0, 2 * Math.PI, false);
                    ctx.fillStyle = color;
                    ctx.fill();
                    ctx.lineWidth = 1;
                    ctx.strokeStyle = color;
                    ctx.stroke();
                }

                function tick() { //Функция рисования стрелок
                    //Стираем предыдущие стрелки
                    ctxcircle(CCenter, CCenter, CSSize, CBackground);
                    //Вычисляем поворот
                    i = 360 / 3600 * ((new Date().getMinutes() * 60) + new Date().getSeconds());
                    //Рисуем стрелку
                    ctxline(CCenter, CCenter, CMSize, ((i - 90) / 180 * Math.PI), CColor, 4); //Минутная
                    i = 360 / 720 * ((new Date().getHours() * 60) + new Date().getMinutes());
                    ctxline(CCenter, CCenter, CHSize, ((i - 90) / 180 * Math.PI), CColor, 5); // Часовая
                    ctxcircle(CCenter, CCenter, 9, CColor); //Круг от стрелки
                    i = 360 / (60 * 1000) * ((new Date().getSeconds() * 1000) + new Date().getMilliseconds());
                    ctxline(CCenter, CCenter, CSSize, ((i - 90) / 180 * Math.PI), CSeconds, 3); //Секундная
                    ctxcircle(CCenter, CCenter, 6, CSeconds); //Круг от секундной стрелки
                }
                clockProtect = document.getElementById("clock-protect");
                var ctx = clockProtect.getContext('2d');
                ctx.fillStyle = CBackground;
                ctx.fillRect(0, 0, clockProtect.width, clockProtect.height);
                for (iv = 0; iv < 12; iv++) { // Рисуем часовые метки
                    i = 360 / 12 * iv;
                    ctxcircle((CCenter + (CTSize * Math.cos((i - 90) / 180 * Math.PI))), (CCenter + (CTSize * Math.sin((i - 90) / 180 * Math.PI))), 5, CColor);
                }
                for (iv = 0; iv < 60; iv++) { // Рисуем минутные метки
                    i = 360 / 60 * iv;
                    ctxcircle((CCenter + (CTSize * Math.cos((i - 90) / 180 * Math.PI))), (CCenter + (CTSize * Math.sin((i - 90) / 180 * Math.PI))), 2, CColor);
                }
                $rootScope.protect.clock.interval = $interval(tick, 10);
            };

            $rootScope.protect.blacklist = [
                /*"table",
                "solubilityTable"*/
            ];

            $rootScope.protect.isInBlacklist = function() {
                var inBlackList = false;
                for (var i = 0; i < $rootScope.protect.blacklist.length; i++) {
                    if ($location.path() == '/' + $rootScope.protect.blacklist[i] || $location.path().indexOf('/' + $rootScope.protect.blacklist[i] + '/') >= 0) {
                        inBlackList = true;
                        break;
                    }
                }
                return inBlackList;
            };

            $rootScope.protect.show = function() {
                if ($rootScope.protect.mode && !$rootScope.protect.isInBlacklist()) {
                    $rootScope.protect.blockShow.protect[$rootScope.protect.type] = true;
                    if ($rootScope.protect.type == 'default') {
                        $rootScope.protect.clock.start();
                    } else {
                        $rootScope.protect.blockShow.callPage[$rootScope.protect.type] = true;
                        $rootScope.protect.blockShow.answer[$rootScope.protect.type] = false;
                    }
                    $rootScope.protect.isOpened = true;
                }
            };

            $rootScope.protect.hide = function() {
                $rootScope.protect.blockShow.protect[$rootScope.protect.type] = false;
                if ($rootScope.protect.type == 'default') {
                    // перестаем крутить стрелки и жрать ресурсы
                    $interval.cancel($rootScope.protect.clock.interval);
                } else {
                    $rootScope.protect.blockShow.callPage[$rootScope.protect.type] = false;
                    $rootScope.protect.blockShow.answer[$rootScope.protect.type] = false;
                    $rootScope.protect.blockShow.blank[$rootScope.protect.type] = false;
                    $interval.cancel($rootScope.protect.call.interval);
                }
                $rootScope.protect.isOpened = false;
            };

            $rootScope.protect.call = {};
            $rootScope.protect.call.interval = null;
            $rootScope.protect.call.accept = function() {
                $rootScope.protect.blockShow.callPage[$rootScope.protect.type] = false;
                $rootScope.protect.blockShow.answer[$rootScope.protect.type] = true;
                $rootScope.callTimer = 0;
                $rootScope.protect.call.interval = $interval(function() {
                    $rootScope.callTimer++;
                    if ($rootScope.callTimer > 7) {
                        $rootScope.protect.call.reject();
                        $interval.cancel($rootScope.protect.call.interval);
                    }
                }, 1000);
            };


            $rootScope.protect.call.reject = function() {
                if (appConfigurator.getOs() == 'android') {
                    $rootScope.closeApp();
                } else if (appConfigurator.getOs() == 'ios') {
                    $rootScope.protect.blockShow.callPage.ios = false;
                    $rootScope.protect.blockShow.answer.ios = false;
                    $rootScope.protect.blockShow.blank.ios = true;
                }
            };

            $rootScope.config = {
                'isPurchased': appConfigurator.isPurchased(),
                'isParentsDesc': appConfigurator.isParentsDesc(),
                'lang': appConfigurator.getLang(),
                'os': appConfigurator.getOs(),
                'price': appConfigurator.getPrice()
            };


            $rootScope.closeApp = function() {
                if (navigator.app) {
                    navigator.app.exitApp();
                } else if (navigator.device) {
                    navigator.device.exitApp();
                } else {
                    $log.info('Попытка закрыть приложение провалилась(');
                }
            };



            $rootScope.$on('$locationChangeStart', function(event, next, current) {
                // если открыт экран с защитой от учителя, блокируем стандартное поведение кнопки "назад"
                if ($rootScope.protect.isOpened) {
                    event.preventDefault();
                }
                /*
                if ($location.path() == '/') {
                  $rootScope.navbarShow = false;
                }
                else {
                  $rootScope.navbarShow = true;
                }
                */
            });

            $rootScope.isActive = $state.is;



            // ПЕРЕХОД К ЯКОРЮ
            $rootScope.gotoAnchor = function(x, padding) {
                if (padding != undefined) {
                    var oldAnchors = document.getElementsByClassName('anchor');
                    for (var i = 0; i < oldAnchors.length; i++) {
                        oldAnchors[i].setAttribute('class', oldAnchors[i].getAttribute('class').replace('anchor', ''));
                    }
                    document.getElementById(newHash).setAttribute('class', document.getElementById(newHash).getAttribute('class') + ' anchor');
                }

                var newHash = 'anchor_' + x;
                if ($location.hash() !== newHash) {
                    $location.hash(newHash);
                    // удаляю хэш из пути, чтобы не учитывалосб в back
                    $location.replace();
                } else {
                    $anchorScroll();
                }
            };


            $rootScope.gotoMenuSref = function(sref) {
                $state.go(sref);
                $rootScope.Ui.turnOff('uiSidebarLeft');
            };

            // Вычисление высоты для кнопок, которые должны растягиваться на всю высоту экрана, когда их несколько
            $rootScope.getBtnHeight = function(countOfButtons) {
                var screenHeight = 0;
                if ($window.innerHeight > $window.innerWidth) {
                    screenHeight = $window.innerHeight;
                } else screenHeight = $window.innerWidth;
                // - высота навбара
                screenHeight -= 52;
                if (appConfigurator.getOs() == 'ios') {
                    screenHeight -= 15;
                }
                return (screenHeight / countOfButtons);
            };

            //РАССТАНОВКА КОЭФФИЦИЕНТОВ
            $rootScope.alignment = function(scope) {
                scope.refresh();
                if (scope.equation.indexOf('=') == -1 || scope.equation.indexOf('+') == -1) {
                    scope.errors = ['Неправильное уравнение'];
                    return;
                }
                var subsL = scope.equation.replace(/\s+/g, '').split("=")[0].split("+");
                var subsR = scope.equation.replace(/\s+/g, '').split("=")[1].split("+");
                //$log.info(subsR);
                var elems = {};

                function isInteger(num) {
                    var s = (num + "").substring((num + "").indexOf('.') + 1, 5);
                    //$log.info(s);
                    return ((num ^ 0) === num) || (s + 1 == 1);
                }

                function NOD(a, b) {
                    a = Math.abs(a);
                    b = Math.abs(b);
                    while (a && b) {
                        if (a > b)
                            a %= b;
                        else b %= a;
                    }
                    return a + b;
                }

                function elemsCmp(a, b) {
                    if (a.elements > b.elements) return 1;
                    else return -1;
                }

                function combine(arr) {
                    var anions = $ions.getAnions();
                    var cations = $ions.getCations();

                    _.each(anions, function(anion) {
                        _.each(cations, function(cation) {

                        });
                    });

                    for (ii in scope.oxidation["ions"]["vertical"])
                        for (ji in scope.oxidation["ions"]["horizontal"]) {
                            var tmpArr = [];
                            tmpArr.parse = $rootScope.parse;
                            var key_i = Object.keys(scope.oxidation["ions"]["vertical"][ii])[0];
                            var key_j = Object.keys(scope.oxidation["ions"]["horizontal"][ji])[0];
                            var p_i = scope.oxidation["ions"]["vertical"][ii][key_i];
                            var p_j = scope.oxidation["ions"]["horizontal"][ji][key_j];
                            tmpArr.parse("(" + key_i + ")" + Math.abs(p_j) / NOD(p_j, p_i) + "(" + key_j + ")" + Math.abs(p_i) / NOD(p_j, p_i), 1);
                            var isEquels = (tmpArr.length == arr.length);
                            var l = 0;
                            tmpArr.sort(elemsCmp);
                            arr.sort(elemsCmp);
                            while (isEquels && (l < tmpArr.length)) {
                                isEquels = (tmpArr[l].elements == arr[l].elements && tmpArr[l].coef == Math.abs(arr[l].coef));
                                l++;
                            }
                            if (isEquels) {
                                /*$log.info(arr);
                                $log.info(tmpArr);
                                $log.info("\n");*/
                                return [{ sub: key_i, p: p_i, c: Math.abs(p_j) / NOD(p_j, p_i) }, { sub: key_j, p: p_j, c: Math.abs(p_i) / NOD(p_j, p_i) }];
                            }
                        }
                    return 0;
                }

                function isSimpleElement(arr, i, j) {
                    //$log.info(arr[i][j]);
                    for (var e in arr) {
                        if ((arr[e][j].c != 0 || arr[e][j].p != 0) && e != i) return 0;
                    }
                    return 1;
                }

                function setPower(sumPower, subs, multiplier, index) {
                    //$log.info(subs + " " + sumPower);
                    var arr = new Array();
                    arr.parse = $rootScope.parse;
                    arr.parse(subs, multiplier);
                    console.log(arr);
                    //$log.info(arr);
                    if (typeof arr.err != "undefined" && scope.errors.indexOf(arr.err) == -1) scope.errors.concat(arr.err);
                    var ionsArr = combine(arr);
                    console.log(ionsArr);
                    if (ionsArr) {
                        for (var i = 0; i < ionsArr.length; i++)
                            setPower(ionsArr[i].p, ionsArr[i].sub, ionsArr[i].c * multiplier, index);
                    } else {
                        //$log.info(arr);
                        for (var j = 0; j < arr.length; j++) {
                            //alert($rootScope.table["table"][arr[arr.length - 1 - j]["elements"]]["element"]);
                            arr[j].p = 0;
                            //$log.info(arr[j]);
                            if (arr.length == 1) {
                                arr[j].p = sumPower;
                                continue;
                            }
                            if (arr.length == 2) {
                                if (arr[j]["elements"] == 0)
                                    if ($rootScope.table["table"][arr[arr.length - 1 - j]["elements"]]["class"] == "METALS")
                                        arr[j].p = -1;
                                    else arr[j].p = 1;
                                else if (arr[j]["elements"] == 7)
                                    if (arr[arr.length - 1 - j]["elements"] == 8)
                                        arr[j].p = 2;
                                    else if (arr[arr.length - 1 - j]["elements"] == 0 && arr[j]["coef"] == 2)
                                    arr[j].p = -1;
                                else arr[j].p = -2;
                                else if ($rootScope.table["table"][arr[j]["elements"]]["group"] == "7 A" && $rootScope.table["table"][arr[j]["elements"]]["period"] >= 3 && $rootScope.table["table"][arr[j]["elements"]]["period"] <= 6)
                                    if ($rootScope.table["table"][arr[arr.length - 1 - j]["elements"]]["class"] == "METALS" || arr[arr.length - 1 - j] == 0)
                                        arr[j].p = -1;
                                    else if ($rootScope.table["table"][arr[j]["elements"]]["group"] == "6 A" && $rootScope.table["table"][arr[j]["elements"]]["period"] >= 3 && $rootScope.table["table"][arr[j]["elements"]]["period"] <= 6)
                                    if ($rootScope.table["table"][arr[arr.length - 1 - j]["elements"]]["class"] == "METALS" || arr[arr.length - 1 - j] == 0)
                                        arr[j].p = -2;
                                    else if ($rootScope.table["table"][arr[j]["elements"]]["group"] == "5 A" && $rootScope.table["table"][arr[j]["elements"]]["period"] >= 2 && $rootScope.table["table"][arr[j]["elements"]]["period"] <= 5)
                                    if ($rootScope.table["table"][arr[arr.length - 1 - j]["elements"]]["class"] == "METALS" || arr[arr.length - 1 - j] == 0)
                                        arr[j].p = -3; //*tmpArr[j]["coef"];
                            } else {
                                if (arr[j]["elements"] == 7) arr[j].p = -2; //*tmpArr[j]["coef"];
                                else if (arr[j]["elements"] == 0) arr[j].p = 1; //tmpArr[j]["coef"];
                            }
                            if ($rootScope.table["table"][arr[j]["elements"]]["group"] === "1 A" && arr[j]["elements"] != 0) arr[j].p = 1; //tmpArr[j]["coef"];
                            else if ($rootScope.table["table"][arr[j]["elements"]]["group"] === "2 A") arr[j].p = 2; //*tmpArr[j]["coef"];
                            else if ($rootScope.table["table"][arr[j]["elements"]]["group"] === "3 A" && $rootScope.table["table"][arr[j]["elements"]]["period"] <= 3) arr[j].p = 3; //*tmpArr[j]["coef"];
                            else if (arr[j]["elements"] == 8) arr[j].p = -1; //*tmpArr[j]["coef"];
                        }
                        var p = -1,
                            sum = 0;
                        for (var i = 0; i < arr.length; i++) {
                            //$log.info(arr[i]);
                            //$log.info(multiplier);
                            sum += arr[i].p * arr[i].coef / multiplier;
                            if (arr[i].p == 0) {
                                p = i;
                                // $log.info(p)
                            }
                            //$log.info("\n");
                        }
                        if (p >= 0) {
                            arr[p].p = (sumPower - sum) / Math.abs(arr[p].coef / multiplier);
                        }

                        for (var j = 0; j < arr.length; j++) {
                            if (typeof elems[arr[j]["elements"]] === "undefined") {
                                //$log.info(tmpArr[j]["elements"]);
                                elems[arr[j]["elements"]] = new Array();
                            }
                            if (typeof elems[arr[j]["elements"]][index] === "undefined") elems[arr[j]["elements"]][index] = { c: arr[j]["coef"], p: arr[j].p };
                            else elems[arr[j]["elements"]][index].c += arr[j].coef;
                        }
                    }

                }

                for (var i = 0; i < subsL.length; i++) {
                    //$log.info(i);
                    setPower(0, subsL[i], 1, i);
                }
                for (var i = 0; i < subsR.length; i++) {
                    setPower(0, subsR[i], -1, i + subsL.length);
                }
                //$log.info($scope.errors);
                if (scope.errors != "") return;
                var max = 0;
                for (var i in elems) {
                    max = (max > elems[i].length) ? max : elems[i].length;
                }

                for (var i in elems) {
                    for (var j = 0; j < max; j++)
                        if (typeof elems[i][j] == "undefined")
                            elems[i][j] = { c: 0, p: 0 };
                }
                //$log.info(elems);
                scope.balance = new Array();
                var powerIndex = new Array(); //тут, короче, степень изменяется иногда в одном веществе, поэтому покумекать нужно, эта ерунда не всегда работает
                //$log.info(elems);
                for (var i in elems) {
                    var powerArr = new Array();
                    var coefsArr = new Array();
                    for (var j = 0; j < elems[i].length; j++) {
                        if (elems[i][j].c != 0 && powerArr.indexOf(elems[i][j].p) == -1) {
                            powerArr.push(elems[i][j].p);
                            if (isSimpleElement(elems, i, j))
                                coefsArr.push(Math.abs(elems[i][j].c));
                            else coefsArr.push(1);
                        }
                    }
                    //$log.info(elems);
                    if (powerArr.length == 2) {
                        var j = 0;
                        //$log.info(elems[i]);
                        while (elems[i][j].c == 0) {
                            j++;
                        }
                        powerIndex.push(j);
                        var x = { el: $rootScope.table["table"][i]["element"], powerL: powerArr[0], powerR: powerArr[1], cl: coefsArr[0], cr: coefsArr[1] };
                        x.razn = x.cl * x.cr * (x.powerL - x.powerR);
                        if (x.razn > 0) {
                            x.process = [gettextCatalog.getString('Восстановитель'), gettextCatalog.getString('Окислитель')];
                        } else {
                            x.process = [gettextCatalog.getString('Окислитель'), gettextCatalog.getString('Восстановитель')];
                        }
                        scope.balance.push(x);
                    }
                }
                //$log.info(elems);
                scope.coefs = new Array();
                var matrix = new Array();

                var ni = 0;
                for (var i in elems) {
                    //$log.info(elems[i]);
                    matrix[ni] = new Array();
                    for (var j in elems[i]) {
                        matrix[ni].push(elems[i][j].c);
                    }
                    ni++;
                }
                $log.info(scope.balance.length == 2);
                if (matrix[matrix.length - 1].length - matrix.length > 1 && scope.balance.length == 2) {
                    matrix[matrix.length] = new Array();
                    //$log.info(matrix.length);
                    for (var i = 0; i < matrix[0].length; i++)
                        matrix[matrix.length - 1][i] = 0;
                    for (var i = 0; i < powerIndex.length; i++) {
                        matrix[matrix.length - 1][powerIndex[i]] = scope.balance[i].razn;
                    }
                }
                //$log.info(matrix);
                function arrCmp(a, b) {
                    var aToS = "";
                    for (var i = 0; i < a.length; i++) {
                        aToS += Math.abs(a[i]);
                    }
                    var bToS = "";
                    for (var i = 0; i < b.length; i++) {
                        bToS += Math.abs(b[i]);
                    }
                    if (aToS < bToS) return 1;
                    return -1;
                }

                function zeroStr(arr) {
                    for (var i = 0; i < arr.length; i++)
                        if (arr[i] != 0) return true;
                    return false;
                }

                //$log.info(matrix);

                //прямой ход

                for (var i = 0; i < matrix.length - 1; i++) {
                    /*matrix.forEach(value=>$log.info(value.toString()));
                    $log.info("________");*/
                    matrix.sort(arrCmp);
                    var a = matrix[i][i];
                    for (var j = i + 1; j < matrix.length; j++) {
                        var b = matrix[j][i];
                        if (b !== 0) {
                            for (var k = i; k < matrix[j].length; k++)
                                matrix[j][k] = matrix[i][k] - matrix[j][k] * a / b;
                        }
                    }
                }
                //$log.info(matrix);

                for (var i = 0; i < matrix[0].length; i++)
                    scope.coefs[i] = 0;
                scope.coefs[scope.coefs.length - 1] = 1;

                //$log.info($scope.coefs);
                while (!zeroStr(matrix[matrix.length - 1])) matrix.length--;
                //обратный ход
                for (var i = matrix.length - 1; i >= 0; i--) {
                    var sum = 0;
                    for (var j = i + 1; j < matrix.length; j++)
                        sum += matrix[i][j] * scope.coefs[j];
                    sum = matrix[i][matrix.length] - sum;
                    //$log.info(sum/matrix[i][i]);
                    scope.coefs[i] = scope.coefs[scope.coefs.length - 1] * sum / matrix[i][i];
                }
                for (var i = 0; i < scope.coefs.length; i++) {
                    scope.coefs[i] = Math.abs(scope.coefs[i]);
                }
                //$log.info($scope.coefs);
                scope.coefs.allInteger = function() {
                    for (var i = 0; i < this.length; i++) {
                        //if(this[i]+"" == "NaN") return true;
                        if (!isInteger(this[i])) return false;
                    }
                    return true;
                }
                var k = 2;
                if (scope.coefs.indexOf(0) != -1) {
                    scope.errors = ['Не удалось расставить коэффициенты', 'Возможно, уравнение не существует'];
                    return;
                }
                while (!scope.coefs.allInteger()) {
                    //$log.info($scope.coefs);
                    for (var i = 0; i < scope.coefs.length; i++) {
                        if (scope.coefs[i] + "" == "NaN") {
                            scope.errors = ['Не удалось расставить коэффициенты', 'Возможно, уравнение не существует'];
                            return;
                        }
                        scope.coefs[i] /= k - 1;
                        scope.coefs[i] *= k;
                    }
                    k++;
                }

                scope.nod = NOD;

                scope.subsL = subsL;
                scope.subsR = subsR;
            }



            // РАСЧЕТ МОЛЯРНЫХ МАСС
            $http({
                url: "./json/table.json",
                method: "GET"
            }).then(function(response) {
                $rootScope.table = response.data;
            });

            $rootScope.findInTable = function(str) //нахождение элемента в таблице
            {
                for (var elem in $rootScope.table["table"]) {
                    if ($rootScope.table["table"][elem]["element"] === str) return elem;
                    //$log.info();
                }
                return -1;
            }

            $rootScope.roundValue = function(value, type) {
                var valueString = value + '';
                var newValue;
                if (valueString.indexOf('e') >= 0) {
                    //var numberAfterE = valueString.substr(valueString.indexOf('e') + 1).replace('-','').replace('+','');
                    newValue = valueString;
                } else if (valueString.charAt(0) == '0') {
                    for (var i = 0; i < valueString.length - 2; i++) {
                        if (valueString.charAt(i + 2) != '0') {
                            break;
                        }
                    }
                    newValue = value.toFixed(i + 1);
                } else {
                    switch (type) {
                        case 'M_v':
                            newValue = value.toFixed(0);
                            break;

                        default:
                            newValue = value.toFixed(1);
                            break;
                    }
                }
                if (newValue.length - newValue.indexOf('.') == 2 && newValue.charAt(newValue.length - 1) == '0') {
                    newValue = newValue.substring(0, newValue.indexOf('.'));
                }
                return newValue * 1;
            }

            $rootScope.parse = function(str, k) //парсер
            {

                this.Add = function(e) {
                    //$log.info(e);
                    for (i in this) {
                        if (this[i]["elements"] === e["elements"]) {
                            this[i]["coef"] += e["coef"];
                            //$log.info(this);
                            return;
                        }
                    }
                    this.push(e);
                    // $log.info(this);
                }

                function getCloseBraces(s) {
                    var brArr = new Array(str[s]);
                    s++;
                    while (brArr.length != 0) {
                        //$log.info(;
                        if (str[s] == '(' || str[s] == '[') brArr.push(str[s]);
                        if (str[s] == ')' || str[s] == ']') brArr.pop();
                        s++;
                    }
                    return s - 1;
                }

                var stack = new Array();
                for (var i = 0; i < str.length; i++) {
                    if (str[i] == '(' || str[i] == '[') stack.push(str[i]);
                    if (str[i] == ')') {
                        var tmpBr = stack.pop();
                        if (tmpBr == '[') {
                            this.err = ["WRONG_BRACES"];
                            return;
                        }
                    }
                    if (str[i] == ']') {
                        var tmpBr = stack.pop();
                        if (tmpBr == '(') {
                            this.err = ["WRONG_BRACES"];
                            return;
                        }
                    }
                }
                if (stack.length != 0) {
                    this.err = ["WRONG_BRACES"];
                    return;
                }

                if (str[0] >= "a" && str[0] <= "z") {
                    this.err = ["ELEMENT_SHOULD_START_WITH_BIG_LETTER"];
                    return;
                }

                var start = 0;
                var end = 1;
                while (end <= str.length) {
                    var cf, num;
                    if (str[start] === "(" || str[start] === "[") {
                        strTmp = str.substring(start + 1, getCloseBraces(start));
                        //$log.info(strTmp);
                        end = getCloseBraces(start) + 1;
                        var c = k;
                        if (str[end] >= "1" && str[end] <= "9") {
                            c = parseInt(str.substring(end)) * k;
                            while (str[end] >= "0" && str[end] <= "9") end++;
                        }

                        this.parse(strTmp, c);
                    } else {
                        if (str[end] >= "a" && str[end] <= "z") end++;
                        //$log.info(str.substring(start, end));
                        num = $rootScope.findInTable(str.substring(start, end));
                        if (num === -1) {
                            //$log.info(str.substring(start, end));
                            this.err = ["VERIFY_INPUT_DATA", "ELEMENT_SHOULD_START_WITH_BIG_LETTER"];
                            return;
                        }
                        if (str[end] >= "1" && str[end] <= "9") {
                            cf = parseInt(str.substring(end)) * k;
                            while (str[end] >= "0" && str[end] <= "9") end++;
                        } else cf = k;
                        this.Add({ coef: cf, elements: num });
                    }
                    start = end;
                    end++;
                }
            }
        }
    ]);
})();

},{"lodash":6}],10:[function(require,module,exports){
(function () {
    var ions = [{
            name: 'H',
            charge: 1
        }, {
            name: 'NH4',
            charge: 1
        }, {
            name: 'K',
            charge: 1
        }, {
            name: 'Na',
            charge: 1
        }, {
            name: 'Ag',
            charge: 1
        }, {
            name: 'Ba',
            charge: 2
        }, {
            name: 'Ca',
            charge: 2
        }, {
            name: 'Mg',
            charge: 2
        }, {
            name: 'Mn',
            charge: 2
        }, {
            name: 'Zn',
            charge: 2
        }, {
            name: 'Ni',
            charge: 2
        }, {
            name: 'Sn',
            charge: 2
        }, {
            name: 'Pb',
            charge: 2
        }, {
            name: 'Cu',
            charge: 2
        }, {
            name: 'Hg',
            charge: 2
        }, {
            name: 'Hg2',
            charge: 2
        }, {
            name: 'Fe',
            charge: 2
        }, {
            name: 'Fe',
            charge: 3
        }, {
            name: 'Al',
            charge: 3
        }, {
            name: 'Cr',
            charge: 3
        }, {
            name: 'OH',
            charge: -1
        }, {
            name: 'NO3',
            charge: -1
        }, {
            name: 'F',
            charge: -1
        }, {
            name: 'Cl',
            charge: -1
        }, {
            name: 'Br',
            charge: -1
        }, {
            name: 'I',
            charge: -1
        }, {
            name: 'S',
            charge: -2
        }, {
            name: 'SO3',
            charge: -2
        }, {
            name: 'SO4',
            charge: -2
        }, {
            name: 'CO3',
            charge: -2
        }, {
            name: 'SiO3',
            charge: -2
        }, {
            name: 'PO4',
            charge: -3
        }, {
            name: 'CH3COO',
            charge: -1
        }
    ];

    angular.module('ChemistryX10').constant('ions', ions);
})();

},{}],11:[function(require,module,exports){
(function () {

   var elements = [{
         "element": "H",
         "name": {
            "ru": "Водород",
            "en": "Hydrogen"
         },
         "group": "1 A",
         "period": "1",
         "atomMass": "1.00794",
         "elnegativity": "2,2",
         "elconf": "1s1",
         "color": "red",
         "class": "Неметаллы",
         "val": [
            "-1",
            "1"
         ],
         "id": 1
      },
      {
         "element": "He",
         "name": {
            "ru": "Гелий",
            "en": "Helium"
         },
         "group": "8 A",
         "period": "1",
         "atomMass": "4.0026",
         "elnegativity": "5,5",
         "elconf": "1s2",
         "color": "red",
         "class": "Неметаллы",
         "subclass": "Инертные газы",
         "val": [
            "0"
         ],
         "id": 2
      },
      {
         "element": "Li",
         "name": {
            "ru": "Литий",
            "en": "Lithium"
         },
         "group": "1 A",
         "period": "2",
         "atomMass": "6.941",
         "elnegativity": "0,97",
         "elconf": "1s2 2s1",
         "color": "red",
         "class": "Металлы",
         "subclass": "Щелочные металлы",
         "val": [
            "1"
         ],
         "id": 3
      },
      {
         "element": "Be",
         "name": {
            "ru": "Бериллий",
            "en": "Beryllium"
         },
         "group": "2 A",
         "period": "2",
         "atomMass": "9.0122",
         "elnegativity": "1,47",
         "elconf": "1s2 2s2",
         "color": "red",
         "class": "Металлы",
         "subclass": "Щёлочноземельные металлы",
         "val": [
            "2"
         ],
         "id": 4
      },
      {
         "element": "B",
         "name": {
            "ru": "Бор",
            "en": "Boron"
         },
         "group": "3 A",
         "period": "2",
         "atomMass": "10.811",
         "elnegativity": "2,01",
         "elconf": "1s2 2s2 2p1",
         "color": "yellow",
         "class": "Неметаллы",
         "subclass": "Полуметаллы",
         "val": [
            "-3",
            "3"
         ],
         "id": 5
      },
      {
         "element": "C",
         "name": {
            "ru": "Углерод",
            "en": "Carbon"
         },
         "group": "4 A",
         "period": "2",
         "atomMass": "12.0107",
         "elnegativity": "2,50",
         "elconf": "1s2 2s2 2p2",
         "color": "yellow",
         "class": "Неметаллы",
         "val": [
            "-4",
            "2",
            "3"
         ],
         "id": 6
      },
      {
         "element": "N",
         "name": {
            "ru": "Азот",
            "en": "Nitrogen"
         },
         "group": "5 A",
         "period": "2",
         "atomMass": "14.0067",
         "elnegativity": "3,07",
         "elconf": "1s2 2s2 2p3",
         "color": "yellow",
         "class": "Неметаллы",
         "val": [
            "-3",
            "2",
            "3",
            "4",
            "5"
         ],
         "id": 7
      },
      {
         "element": "O",
         "name": {
            "ru": "Кислород",
            "en": "Oxygen"
         },
         "group": "6 A",
         "period": "2",
         "atomMass": "15.9994",
         "elnegativity": "3,5",
         "elconf": "1s2 2s2 2p4",
         "color": "yellow",
         "class": "Неметаллы",
         "val": [
            "-2",
            "-1",
            "2"
         ],
         "id": 8
      },
      {
         "element": "F",
         "name": {
            "ru": "Фтор",
            "en": "Fluorine"
         },
         "group": "7 A",
         "period": "2",
         "atomMass": "18.9984",
         "elnegativity": "4,10",
         "elconf": "1s2 2s2 2p5",
         "color": "yellow",
         "class": "Неметаллы",
         "subclass": "Галогены",
         "val": [
            "-1"
         ],
         "id": 9
      },
      {
         "element": "Ne",
         "name": {
            "ru": "Неон",
            "en": "Neon"
         },
         "group": "8 A",
         "period": "2",
         "atomMass": "20.1797",
         "elnegativity": "4,84",
         "elconf": "1s2 2s2 2p6",
         "color": "yellow",
         "class": "Неметаллы",
         "subclass": "Инертные газы",
         "val": [
            "0"
         ],
         "id": 10
      },
      {
         "element": "Na",
         "name": {
            "ru": "Натрий",
            "en": "Sodium"
         },
         "group": "1 A",
         "period": "3",
         "atomMass": "22.9898",
         "elnegativity": "1,01",
         "elconf": "1s2 2s2 2p6 3s1",
         "color": "red",
         "class": "Металлы",
         "subclass": "Щелочные металлы",
         "val": [
            "1"
         ],
         "id": 11
      },
      {
         "element": "Mg",
         "name": {
            "ru": "Магний",
            "en": "Magnesium"
         },
         "group": "2 A",
         "period": "3",
         "atomMass": "24.3050",
         "elnegativity": "1,23",
         "elconf": "1s2 2s2 2p6 3s2",
         "color": "red",
         "class": "Металлы",
         "subclass": "Щёлочноземельные металлы",
         "val": [
            "2"
         ],
         "id": 12
      },
      {
         "element": "Al",
         "name": {
            "ru": "Алюминий",
            "en": "Aluminum"
         },
         "group": "3 A",
         "period": "3",
         "atomMass": "26.9815",
         "elnegativity": "1,47",
         "elconf": "1s2 2s2 2p6 3s2 3p1",
         "color": "yellow",
         "class": "Металлы",
         "subclass": "Полупроводники",
         "val": [
            "3"
         ],
         "id": 13
      },
      {
         "element": "Si",
         "name": {
            "ru": "Кремний",
            "en": "Silicon"
         },
         "group": "4 A",
         "period": "3",
         "atomMass": "28.0855",
         "elnegativity": "1,74",
         "elconf": "1s2 2s2 2p6 3s2 3p2",
         "color": "yellow",
         "class": "Неметаллы",
         "subclass": "Полуметаллы",
         "val": [
            "-4",
            "2",
            "4"
         ],
         "id": 14
      },
      {
         "element": "P",
         "name": {
            "ru": "Фосфор",
            "en": "Phosphorus"
         },
         "group": "5 A",
         "period": "3",
         "atomMass": "30.9738",
         "elnegativity": "2,06",
         "elconf": "1s2 2s2 2p6 3s2 3p3",
         "color": "yellow",
         "class": "Неметаллы",
         "val": [
            "-3",
            "3",
            "5"
         ],
         "id": 15
      },
      {
         "element": "S",
         "name": {
            "ru": "Сера",
            "en": "Sulfur"
         },
         "group": "6 A",
         "period": "3",
         "atomMass": "32.065",
         "elnegativity": "2,44",
         "elconf": "1s2 2s2 2p6 3s2 3p4",
         "color": "yellow",
         "class": "Неметаллы",
         "val": [
            "-2",
            "4",
            "6"
         ],
         "id": 16
      },
      {
         "element": "Cl",
         "name": {
            "ru": "Хлор",
            "en": "Chlorine"
         },
         "group": "7 A",
         "period": "3",
         "atomMass": "35.453",
         "elnegativity": "2,83",
         "elconf": "1s2 2s2 2p6 3s2 3p5",
         "color": "yellow",
         "class": "Неметаллы",
         "subclass": "Галогены",
         "val": [
            "-1",
            "1",
            "3",
            "5",
            "7"
         ],
         "id": 17
      },
      {
         "element": "Ar",
         "name": {
            "ru": "Аргон",
            "en": "Argon"
         },
         "group": "8 A",
         "period": "3",
         "atomMass": "39.948",
         "elnegativity": "3,2",
         "elconf": "1s2 2s2 2p6 3s2 3p6",
         "color": "yellow",
         "class": "Неметаллы",
         "subclass": "Инертные газы",
         "val": [
            "0"
         ],
         "id": 18
      },
      {
         "element": "K",
         "name": {
            "ru": "Калий",
            "en": "Potassium"
         },
         "group": "1 A",
         "period": "4",
         "atomMass": "39.0983",
         "elnegativity": "0,91",
         "elconf": "1s2 2s2 2p6 3s2 3p6 4s1",
         "color": "red",
         "class": "Металлы",
         "subclass": "Щелочные металлы",
         "val": [
            "1"
         ],
         "id": 19
      },
      {
         "element": "Ca",
         "name": {
            "ru": "Кальций",
            "en": "Calcium"
         },
         "group": "2 A",
         "period": "4",
         "atomMass": "40.078",
         "elnegativity": "1,04",
         "elconf": "1s2 2s2 2p6 3s2 3p6 4s2",
         "color": "red",
         "class": "Металлы",
         "subclass": "Щёлочноземельные металлы",
         "val": [
            "2"
         ],
         "id": 20
      },
      {
         "element": "Sc",
         "name": {
            "ru": "Скандий",
            "en": "Scandium"
         },
         "group": "3 B",
         "period": "4",
         "atomMass": "44.956",
         "elnegativity": "1,2",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d1 4s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "3"
         ],
         "id": 21
      },
      {
         "element": "Ti",
         "name": {
            "ru": "Титан",
            "en": "Titanium"
         },
         "group": "4 B",
         "period": "4",
         "atomMass": "47.867",
         "elnegativity": "1,32",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d2 4s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3",
            "4"
         ],
         "id": 22
      },
      {
         "element": "V",
         "name": {
            "ru": "Ванадий",
            "en": "Vanadium"
         },
         "group": "5 B",
         "period": "4",
         "atomMass": "50.942",
         "elnegativity": "1,45",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d3 4s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3",
            "4",
            "5"
         ],
         "id": 23
      },
      {
         "element": "Cr",
         "name": {
            "ru": "Хром",
            "en": "Chromium"
         },
         "group": "6 B",
         "period": "4",
         "atomMass": "51.996",
         "elnegativity": "1,56",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d5 4s1",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3",
            "6"
         ],
         "id": 24
      },
      {
         "element": "Mn",
         "name": {
            "ru": "Марганец",
            "en": "Manganese"
         },
         "group": "7 B",
         "period": "4",
         "atomMass": "54.938",
         "elnegativity": "1,60",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d5 4s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3",
            "4",
            "5",
            "7"
         ],
         "id": 25
      },
      {
         "element": "Fe",
         "name": {
            "ru": "Железо",
            "en": "Iron"
         },
         "group": "8 B",
         "period": "4",
         "atomMass": "55.845",
         "elnegativity": "1,64",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d6 4s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3",
            "6"
         ],
         "id": 26
      },
      {
         "element": "Co",
         "name": {
            "ru": "Кобальт",
            "en": "Cobalt"
         },
         "group": "8 B",
         "period": "4",
         "atomMass": "58.933",
         "elnegativity": "1,70",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d7 4s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3"
         ],
         "id": 27
      },
      {
         "element": "Ni",
         "name": {
            "ru": "Никель",
            "en": "Nickel"
         },
         "group": "8 B",
         "period": "4",
         "atomMass": "58.693",
         "elnegativity": "1,75",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d8 4s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3"
         ],
         "id": 28
      },
      {
         "element": "Cu",
         "name": {
            "ru": "Медь",
            "en": "Copper"
         },
         "group": "1 B",
         "period": "4",
         "atomMass": "63.546",
         "elnegativity": "1,75",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s1",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "1",
            "2",
            "3"
         ],
         "id": 29
      },
      {
         "element": "Zn",
         "name": {
            "ru": "Цинк",
            "en": "Zinc"
         },
         "group": "2 B",
         "period": "4",
         "atomMass": "65.38",
         "elnegativity": "1,66",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2"
         ],
         "id": 30
      },
      {
         "element": "Ga",
         "name": {
            "ru": "Галлий",
            "en": "Gallium"
         },
         "group": "3 A",
         "period": "4",
         "atomMass": "69.723",
         "elnegativity": "1,82",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p1",
         "color": "yellow",
         "class": "Металлы",
         "subclass": "Полупроводники",
         "val": [
            "3"
         ],
         "id": 31
      },
      {
         "element": "Ge",
         "name": {
            "ru": "Германий",
            "en": "Germanium"
         },
         "group": "4 A",
         "period": "4",
         "atomMass": "72.64",
         "elnegativity": "2,02",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p2",
         "color": "yellow",
         "class": "Металлы",
         "subclass": "Полуметаллы",
         "val": [
            "2",
            "4"
         ],
         "id": 32
      },
      {
         "element": "As",
         "name": {
            "ru": "Мышьяк",
            "en": "Arsenic"
         },
         "group": "5 A",
         "period": "4",
         "atomMass": "74.922",
         "elnegativity": "2,20",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p3",
         "color": "yellow",
         "class": "Неметаллы",
         "subclass": "Полуметаллы",
         "val": [
            "-3",
            "3",
            "5"
         ],
         "id": 33
      },
      {
         "element": "Se",
         "name": {
            "ru": "Селен",
            "en": "Selenium"
         },
         "group": "6 A",
         "period": "4",
         "atomMass": "78.96",
         "elnegativity": "2,48",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p4",
         "color": "yellow",
         "class": "Неметаллы",
         "val": [
            "-2",
            "4",
            "6"
         ],
         "id": 34
      },
      {
         "element": "Br",
         "name": {
            "ru": "Бром",
            "en": "Bromine"
         },
         "group": "7 A",
         "period": "4",
         "atomMass": "79.904",
         "elnegativity": "2,74",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p5",
         "color": "yellow",
         "class": "Неметаллы",
         "subclass": "Галогены",
         "val": [
            "-1",
            "1",
            "3",
            "5",
            "7"
         ],
         "id": 35
      },
      {
         "element": "Kr",
         "name": {
            "ru": "Криптон",
            "en": "Krypton"
         },
         "group": "8 A",
         "period": "4",
         "atomMass": "83.798",
         "elnegativity": "2,94",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6",
         "color": "yellow",
         "class": "Неметаллы",
         "subclass": "Инертные газы",
         "val": [
            "2",
            "4"
         ],
         "id": 36
      },
      {
         "element": "Rb",
         "name": {
            "ru": "Рубидий",
            "en": "Rubidium"
         },
         "group": "1 A",
         "period": "5",
         "atomMass": "85.468",
         "elnegativity": "0,89",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 5s1",
         "color": "red",
         "class": "Металлы",
         "subclass": "Щелочные металлы",
         "val": [
            "1"
         ],
         "id": 37
      },
      {
         "element": "Sr",
         "name": {
            "ru": "Стронций",
            "en": "Strontium"
         },
         "group": "2 A",
         "period": "5",
         "atomMass": "87.62",
         "elnegativity": "0,99",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 5s2",
         "color": "red",
         "class": "Металлы",
         "subclass": "Щёлочноземельные металлы",
         "val": [
            "2"
         ],
         "id": 38
      },
      {
         "element": "Y",
         "name": {
            "ru": "Иттрий",
            "en": "Yttrium"
         },
         "group": "3 B",
         "period": "5",
         "atomMass": "88.906",
         "elnegativity": "1,11",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d1 5s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "3"
         ],
         "id": 39
      },
      {
         "element": "Zr",
         "name": {
            "ru": "Цирконий",
            "en": "Zirconium"
         },
         "group": "4 B",
         "period": "5",
         "atomMass": "91.224",
         "elnegativity": "1,22",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d2 5s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "3",
            "4"
         ],
         "id": 40
      },
      {
         "element": "Nb",
         "name": {
            "ru": "Ниобий",
            "en": "Niobium"
         },
         "group": "5 B",
         "period": "5",
         "atomMass": "92.906",
         "elnegativity": "1,23",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d4 5s1",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3",
            "4",
            "5"
         ],
         "id": 41
      },
      {
         "element": "Mo",
         "name": {
            "ru": "Молибден",
            "en": "Molybdenum"
         },
         "group": "6 B",
         "period": "5",
         "atomMass": "95.96",
         "elnegativity": "1,30",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d5 5s1",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3",
            "4",
            "6"
         ],
         "id": 42
      },
      {
         "element": "Tc",
         "name": {
            "ru": "Технеций",
            "en": "Technetium"
         },
         "group": "7 B",
         "period": "5",
         "atomMass": "[98]",
         "elnegativity": "1,36",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d5 5s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "4",
            "6",
            "7"
         ],
         "id": 43
      },
      {
         "element": "Ru",
         "name": {
            "ru": "Рутений",
            "en": "Ruthenium"
         },
         "group": "8 B",
         "period": "5",
         "atomMass": "101.07",
         "elnegativity": "1,42",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d7 5s1",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8"
         ],
         "id": 44
      },
      {
         "element": "Rh",
         "name": {
            "ru": "Родий",
            "en": "Rhodium"
         },
         "group": "8 B",
         "period": "5",
         "atomMass": "102.905",
         "elnegativity": "1,45",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d8 5s1",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3",
            "4",
            "6"
         ],
         "id": 45
      },
      {
         "element": "Pd",
         "name": {
            "ru": "Палладий",
            "en": "Palladium"
         },
         "group": "8 B",
         "period": "5",
         "atomMass": "106.42",
         "elnegativity": "1,35",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s0",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "4"
         ],
         "id": 46
      },
      {
         "element": "Ag",
         "name": {
            "ru": "Серебро",
            "en": "Silver"
         },
         "group": "1 B",
         "period": "5",
         "atomMass": "107.868",
         "elnegativity": "1,42",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s1",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "1",
            "2",
            "3"
         ],
         "id": 47
      },
      {
         "element": "Cd",
         "name": {
            "ru": "Кадмий",
            "en": "Cadmium"
         },
         "group": "2 B",
         "period": "5",
         "atomMass": "112.411",
         "elnegativity": "1,46",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2"
         ],
         "id": 48
      },
      {
         "element": "In",
         "name": {
            "ru": "Индий",
            "en": "Indium"
         },
         "group": "3 A",
         "period": "5",
         "atomMass": "114.818",
         "elnegativity": "1,49",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p1",
         "color": "yellow",
         "class": "Металлы",
         "subclass": "Полупроводники",
         "val": [
            "3"
         ],
         "id": 49
      },
      {
         "element": "Sn",
         "name": {
            "ru": "Олово",
            "en": "Tin"
         },
         "group": "4 A",
         "period": "5",
         "atomMass": "118.710",
         "elnegativity": "1,72",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p2",
         "color": "yellow",
         "class": "Металлы",
         "subclass": "Полупроводники",
         "val": [
            "2",
            "4"
         ],
         "id": 50
      },
      {
         "element": "Sb",
         "name": {
            "ru": "Сурьма",
            "en": "Antimony"
         },
         "group": "5 A",
         "period": "5",
         "atomMass": "121.760",
         "elnegativity": "1,82",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p3",
         "color": "yellow",
         "class": "Металлы",
         "subclass": "Полуметаллы",
         "val": [
            "-3",
            "3",
            "5"
         ],
         "id": 51
      },
      {
         "element": "Te",
         "name": {
            "ru": "Теллур",
            "en": "Tellurium"
         },
         "group": "6 A",
         "period": "5",
         "atomMass": "127.60",
         "elnegativity": "2,01",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p4",
         "color": "yellow",
         "class": "Неметаллы",
         "subclass": "Полуметаллы",
         "val": [
            "-2",
            "4",
            "6"
         ],
         "id": 52
      },
      {
         "element": "I",
         "name": {
            "ru": "Иод",
            "en": "Iodine"
         },
         "group": "7 A",
         "period": "5",
         "atomMass": "126.904",
         "elnegativity": "2,21",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p5",
         "color": "yellow",
         "class": "Неметаллы",
         "subclass": "Галогены",
         "val": [
            "-1",
            "1",
            "3",
            "5",
            "7"
         ],
         "id": 53
      },
      {
         "element": "Xe",
         "name": {
            "ru": "Ксенон",
            "en": "Xenon"
         },
         "group": "8 A",
         "period": "5",
         "atomMass": "131.293",
         "elnegativity": "2,40",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6",
         "color": "yellow",
         "class": "Неметаллы",
         "subclass": "Инертные газы",
         "val": [
            "2",
            "4",
            "6",
            "8"
         ],
         "id": 54
      },
      {
         "element": "Cs",
         "name": {
            "ru": "Цезий",
            "en": "Cesium"
         },
         "group": "1 A",
         "period": "6",
         "atomMass": "132.905",
         "elnegativity": "0,86",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 6s1",
         "color": "red",
         "class": "Металлы",
         "subclass": "Щелочные металлы",
         "val": [
            "1"
         ],
         "id": 55
      },
      {
         "element": "Ba",
         "name": {
            "ru": "Барий",
            "en": "Barium"
         },
         "group": "2 A",
         "period": "6",
         "atomMass": "137.327",
         "elnegativity": "0,97",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 6s2",
         "color": "red",
         "class": "Металлы",
         "subclass": "Щёлочноземельные металлы",
         "val": [
            "2"
         ],
         "id": 56
      },
      {
         "element": "La",
         "name": {
            "ru": "Лантан",
            "en": "Lanthanum"
         },
         "group": "3 B",
         "period": "6",
         "atomMass": "138.905",
         "elnegativity": "1,08",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f0 5d1 6s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Лантаноиды",
         "val": [
            "3"
         ],
         "id": 57
      },
      {
         "element": "Ce",
         "name": {
            "ru": "Церий",
            "en": "Cerium"
         },
         "group": "3 B",
         "period": "6",
         "atomMass": "140.116",
         "elnegativity": "1,06",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f1 5d1 6s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Лантаноиды",
         "val": [
            "3",
            "4"
         ],
         "id": 58
      },
      {
         "element": "Pr",
         "name": {
            "ru": "Празеодим",
            "en": "Praseodymium"
         },
         "group": "3 B",
         "period": "6",
         "atomMass": "140.908",
         "elnegativity": "1,07",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f3 6s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Лантаноиды",
         "val": [
            "2",
            "3",
            "4"
         ],
         "id": 59
      },
      {
         "element": "Nd",
         "name": {
            "ru": "Неодим",
            "en": "Neodymium"
         },
         "group": "3 B",
         "period": "6",
         "atomMass": "144.242",
         "elnegativity": "1,07",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f4 5d0 6s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Лантаноиды",
         "val": [
            "2",
            "3",
            "4"
         ],
         "id": 60
      },
      {
         "element": "Pm",
         "name": {
            "ru": "Прометий",
            "en": "Promethium"
         },
         "group": "3 B",
         "period": "6",
         "atomMass": "145",
         "elnegativity": "1,07",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f5 5d0 6s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Лантаноиды",
         "val": [
            "3"
         ],
         "id": 61
      },
      {
         "element": "Sm",
         "name": {
            "ru": "Самарий",
            "en": "Samarium"
         },
         "group": "3 B",
         "period": "6",
         "atomMass": "150.36",
         "elnegativity": "1,07",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f6 5d0 6s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Лантаноиды",
         "val": [
            "2",
            "3"
         ],
         "id": 62
      },
      {
         "element": "Eu",
         "name": {
            "ru": "Европий",
            "en": "Europium"
         },
         "group": "3 B",
         "period": "6",
         "atomMass": "151.964",
         "elnegativity": "1,01",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f7 5d0 6s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Лантаноиды",
         "val": [
            "2",
            "3"
         ],
         "id": 63
      },
      {
         "element": "Gd",
         "name": {
            "ru": "Гадолиний",
            "en": "Gadolinium"
         },
         "group": "3 B",
         "period": "6",
         "atomMass": "157.25",
         "elnegativity": "1,11",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f7 5d1 6s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Лантаноиды",
         "val": [
            "3"
         ],
         "id": 64
      },
      {
         "element": "Tb",
         "name": {
            "ru": "Тербий",
            "en": "Terbium"
         },
         "group": "3 B",
         "period": "6",
         "atomMass": "158.925",
         "elnegativity": "1,10",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f9 5d0 6s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Лантаноиды",
         "val": [
            "3",
            "4"
         ],
         "id": 65
      },
      {
         "element": "Dy",
         "name": {
            "ru": "Диспрозий",
            "en": "Dysprosium"
         },
         "group": "3 B",
         "period": "6",
         "atomMass": "162.500",
         "elnegativity": "1,10",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f10 5d0 6s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Лантаноиды",
         "val": [
            "3",
            "4"
         ],
         "id": 66
      },
      {
         "element": "Ho",
         "name": {
            "ru": "Гольмий",
            "en": "Holmium"
         },
         "group": "3 B",
         "period": "6",
         "atomMass": "164.930",
         "elnegativity": "1,10",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f11 5d0 6s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Лантаноиды",
         "val": [
            "3"
         ],
         "id": 67
      },
      {
         "element": "Er",
         "name": {
            "ru": "Эрбий",
            "en": "Erbium"
         },
         "group": "3 B",
         "period": "6",
         "atomMass": "167.259",
         "elnegativity": "1,11",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f12 5d0 6s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Лантаноиды",
         "val": [
            "3"
         ],
         "id": 68
      },
      {
         "element": "Tm",
         "name": {
            "ru": "Тулий",
            "en": "Thulium"
         },
         "group": "3 B",
         "period": "6",
         "atomMass": "168.934",
         "elnegativity": "1,11",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f13 5d0 6s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Лантаноиды",
         "val": [
            "2",
            "3"
         ],
         "id": 69
      },
      {
         "element": "Yb",
         "name": {
            "ru": "Иттербий",
            "en": "Ytterbium"
         },
         "group": "3 B",
         "period": "6",
         "atomMass": "173.054",
         "elnegativity": "1,06",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d0 6s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Лантаноиды",
         "val": [
            "2",
            "3"
         ],
         "id": 70
      },
      {
         "element": "Lu",
         "name": {
            "ru": "Лютеций",
            "en": "Lutetium"
         },
         "group": "3 B",
         "period": "6",
         "atomMass": "174.967",
         "elnegativity": "1,14",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d1 6s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Лантаноиды",
         "val": [
            "3"
         ],
         "id": 71
      },
      {
         "element": "Hf",
         "name": {
            "ru": "Гафний",
            "en": "Hafnium"
         },
         "group": "4 B",
         "period": "6",
         "atomMass": "178.49",
         "elnegativity": "1,23",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d2 6s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "3",
            "4"
         ],
         "id": 72
      },
      {
         "element": "Ta",
         "name": {
            "ru": "Тантал",
            "en": "Tantalum"
         },
         "group": "5 B",
         "period": "6",
         "atomMass": "180.948",
         "elnegativity": "1,33",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d3 6s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3",
            "4",
            "5"
         ],
         "id": 73
      },
      {
         "element": "W",
         "name": {
            "ru": "Вольфрам",
            "en": "Tungsten"
         },
         "group": "6 B",
         "period": "6",
         "atomMass": "183.84",
         "elnegativity": "1,40",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d4 6s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3",
            "4",
            "6"
         ],
         "id": 74
      },
      {
         "element": "Re",
         "name": {
            "ru": "Рений",
            "en": "Rhenium"
         },
         "group": "7 B",
         "period": "6",
         "atomMass": "186.207",
         "elnegativity": "1,46",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d5 6s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3",
            "4",
            "6",
            "7"
         ],
         "id": 75
      },
      {
         "element": "Os",
         "name": {
            "ru": "Осмий",
            "en": "Osmium"
         },
         "group": "8 B",
         "period": "6",
         "atomMass": "190.23",
         "elnegativity": "1,52",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d6 6s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3",
            "4",
            "5",
            "6",
            "8"
         ],
         "id": 76
      },
      {
         "element": "Ir",
         "name": {
            "ru": "Иридий",
            "en": "Iridium"
         },
         "group": "8 B",
         "period": "6",
         "atomMass": "192.217",
         "elnegativity": "1,55",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d7 6s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "3",
            "4",
            "5",
            "6"
         ],
         "id": 77
      },
      {
         "element": "Pt",
         "name": {
            "ru": "Платина",
            "en": "Platinum"
         },
         "group": "8 B",
         "period": "6",
         "atomMass": "195.084",
         "elnegativity": "1,44",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d9 6s1",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "2",
            "4",
            "5",
            "6"
         ],
         "id": 78
      },
      {
         "element": "Au",
         "name": {
            "ru": "Золото",
            "en": "Gold"
         },
         "group": "1 B",
         "period": "6",
         "atomMass": "196.967",
         "elnegativity": "1,42",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s1",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "1",
            "3"
         ],
         "id": 79
      },
      {
         "element": "Hg",
         "name": {
            "ru": "Ртуть",
            "en": "Mercury"
         },
         "group": "2 B",
         "period": "6",
         "atomMass": "200.59",
         "elnegativity": "1,44",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "1",
            "2"
         ],
         "id": 80
      },
      {
         "element": "Tl",
         "name": {
            "ru": "Таллий",
            "en": "Thallium"
         },
         "group": "3 A",
         "period": "6",
         "atomMass": "204.383",
         "elnegativity": "1,44",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p1",
         "color": "yellow",
         "class": "Металлы",
         "subclass": "Полупроводники",
         "val": [
            "1",
            "3"
         ],
         "id": 81
      },
      {
         "element": "Pb",
         "name": {
            "ru": "Свинец",
            "en": "Lead"
         },
         "group": "4 A",
         "period": "6",
         "atomMass": "207.2",
         "elnegativity": "1,67",
         "elconf": "1s2 2s2 2p6 3s2 3p6 4s2 3d10 4p6 5s2 4d10 5p6 6s2 4f14 5d10 6p2",
         "color": "yellow",
         "class": "Металлы",
         "subclass": "Полупроводники",
         "val": [
            "2",
            "4"
         ],
         "id": 82
      },
      {
         "element": "Bi",
         "name": {
            "ru": "Висмут",
            "en": "Bismuth"
         },
         "group": "5 A",
         "period": "6",
         "atomMass": "208.980",
         "elnegativity": "1,67",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p3",
         "color": "yellow",
         "class": "Металлы",
         "subclass": "Полупроводники",
         "val": [
            "-3",
            "3",
            "5"
         ],
         "id": 83
      },
      {
         "element": "Po",
         "name": {
            "ru": "Полоний",
            "en": "Polonium"
         },
         "group": "6 A",
         "period": "6",
         "atomMass": "[209]",
         "elnegativity": "1,76",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p4",
         "color": "yellow",
         "class": "Металлы",
         "subclass": "Полуметаллы",
         "val": [
            "-2",
            "2",
            "4",
            "6"
         ],
         "id": 84
      },
      {
         "element": "At",
         "name": {
            "ru": "Астат",
            "en": "Astatine"
         },
         "group": "7 A",
         "period": "6",
         "atomMass": "[210]",
         "elnegativity": "1,96",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p5",
         "color": "yellow",
         "class": "Неметаллы",
         "subclass": "Галогены",
         "val": [
            "-1",
            "1",
            "5"
         ],
         "id": 85
      },
      {
         "element": "Rn",
         "name": {
            "ru": "Радон",
            "en": "Radon"
         },
         "group": "8 A",
         "period": "6",
         "atomMass": "[222]",
         "elnegativity": "2,06",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6",
         "color": "yellow",
         "class": "Неметаллы",
         "subclass": "Инертные газы",
         "val": [
            "2",
            "4",
            "6"
         ],
         "id": 86
      },
      {
         "element": "Fr",
         "name": {
            "ru": "Франций",
            "en": "Francium"
         },
         "group": "1 A",
         "period": "7",
         "atomMass": "[223]",
         "elnegativity": "0,86",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 7s1",
         "color": "red",
         "class": "Металлы",
         "subclass": "Щелочные металлы",
         "val": [
            "1"
         ],
         "id": 87
      },
      {
         "element": "Ra",
         "name": {
            "ru": "Радий",
            "en": "Radium"
         },
         "group": "2 A",
         "period": "7",
         "atomMass": "[226]",
         "elnegativity": "0,97",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 7s2",
         "color": "red",
         "class": "Металлы",
         "subclass": "Щёлочноземельные металлы",
         "val": [
            "2"
         ],
         "id": 88
      },
      {
         "element": "Ac",
         "name": {
            "ru": "Актиний",
            "en": "Actinium"
         },
         "group": "3 B",
         "period": "7",
         "atomMass": "[227]",
         "elnegativity": "1,00",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f0 6d1 7s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Актиноиды",
         "val": [
            "3"
         ],
         "id": 89
      },
      {
         "element": "Th",
         "name": {
            "ru": "Торий",
            "en": "Thorium"
         },
         "group": "3 B",
         "period": "7",
         "atomMass": "232.038",
         "elnegativity": "1,11",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f0 6d2 7s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Актиноиды",
         "val": [
            "2",
            "3",
            "4"
         ],
         "id": 90
      },
      {
         "element": "Pa",
         "name": {
            "ru": "Протактиний",
            "en": "Protactinium"
         },
         "group": "3 B",
         "period": "7",
         "atomMass": "231.036",
         "elnegativity": "1,14",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f2 6d1 7s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Актиноиды",
         "val": [
            "3",
            "4",
            "5"
         ],
         "id": 91
      },
      {
         "element": "U",
         "name": {
            "ru": "Уран",
            "en": "Uranium"
         },
         "group": "3 B",
         "period": "7",
         "atomMass": "238.029",
         "elnegativity": "1,22",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f3 6d1 7s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Актиноиды",
         "val": [
            "3",
            "4",
            "5",
            "6"
         ],
         "id": 92
      },
      {
         "element": "Np",
         "name": {
            "ru": "Нептуний",
            "en": "Neptunium"
         },
         "group": "3 B",
         "period": "7",
         "atomMass": "[237]",
         "elnegativity": "1,22",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f4 6d1 7s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Актиноиды",
         "val": [
            "3",
            "4",
            "5",
            "6",
            "7"
         ],
         "id": 93
      },
      {
         "element": "Pu",
         "name": {
            "ru": "Плутоний",
            "en": "Plutonium"
         },
         "group": "3 B",
         "period": "7",
         "atomMass": "[244]",
         "elnegativity": "1,22",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f6 6d0 7s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Актиноиды",
         "val": [
            "3",
            "4",
            "5",
            "6",
            "7"
         ],
         "id": 94
      },
      {
         "element": "Am",
         "name": {
            "ru": "Америций",
            "en": "Americium"
         },
         "group": "3 B",
         "period": "7",
         "atomMass": "[243]",
         "elnegativity": "1,20 ",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f7 6d0 7s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Актиноиды",
         "val": [
            "2",
            "3",
            "4",
            "5",
            "6"
         ],
         "id": 95
      },
      {
         "element": "Cm",
         "name": {
            "ru": "Кюрий",
            "en": "Curium"
         },
         "group": "3 B",
         "period": "7",
         "atomMass": "[247]",
         "elnegativity": "1,20",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f7 6d1 7s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Актиноиды",
         "val": [
            "2",
            "3",
            "4",
            "6"
         ],
         "id": 96
      },
      {
         "element": "Bk",
         "name": {
            "ru": "Берклий",
            "en": "Berkelium"
         },
         "group": "3 B",
         "period": "7",
         "atomMass": "[247]",
         "elnegativity": "1,20",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f9 7s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Актиноиды",
         "val": [
            "2",
            "3",
            "4"
         ],
         "id": 97
      },
      {
         "element": "Cf",
         "name": {
            "ru": "Калифорний",
            "en": "Californium"
         },
         "group": "3 B",
         "period": "7",
         "atomMass": "[251]",
         "elnegativity": "1,20",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f10 6d0 7s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Актиноиды",
         "val": [
            "2",
            "3",
            "4"
         ],
         "id": 98
      },
      {
         "element": "Es",
         "name": {
            "ru": "Эйнштейний",
            "en": "Einsteinium"
         },
         "group": "3 B",
         "period": "7",
         "atomMass": "[252]",
         "elnegativity": "1,20",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f11 6d0 7s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Актиноиды",
         "val": [
            "2",
            "3"
         ],
         "id": 99
      },
      {
         "element": "Fm",
         "name": {
            "ru": "Фермий",
            "en": "Fermium"
         },
         "group": "3 B",
         "period": "7",
         "atomMass": "[257]",
         "elnegativity": "1,20",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f12 6d0 7s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Актиноиды",
         "val": [
            "2",
            "3"
         ],
         "id": 100
      },
      {
         "element": "Md",
         "name": {
            "ru": "Менделевий",
            "en": "Mendelevium"
         },
         "group": "3 B",
         "period": "7",
         "atomMass": "[258]",
         "elnegativity": "1,20",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f13 6d0 7s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Актиноиды",
         "val": [
            "1",
            "2",
            "3"
         ],
         "id": 101
      },
      {
         "element": "No",
         "name": {
            "ru": "Нобелий",
            "en": "Nobelium"
         },
         "group": "3 B",
         "period": "7",
         "atomMass": "[259]",
         "elnegativity": "1,20",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f14 6d0 7s2",
         "color": "green",
         "class": "Металлы",
         "subclass": "Актиноиды",
         "val": [
            "2",
            "3"
         ],
         "id": 102
      },
      {
         "element": "Lr",
         "name": {
            "ru": "Лоуренсий",
            "en": "Lawrencium"
         },
         "group": "3 B",
         "period": "7",
         "atomMass": "[262]",
         "elnegativity": "1,20",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f14 6d1 7s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Актиноиды",
         "val": [
            "3"
         ],
         "id": 103
      },
      {
         "element": "Rf",
         "name": {
            "ru": "Резерфордий",
            "en": "Rutherfordium"
         },
         "group": "4 B",
         "period": "7",
         "atomMass": "[267]",
         "elnegativity": "",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f14 6d2 7s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "4"
         ],
         "id": 104
      },
      {
         "element": "Db",
         "name": {
            "ru": "Дубний",
            "en": "Dubnium"
         },
         "group": "5 B",
         "period": "7",
         "atomMass": "[270]",
         "elnegativity": "",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f14 6d3 7s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "5"
         ],
         "id": 105
      },
      {
         "element": "Sg",
         "name": {
            "ru": "Сиборгий",
            "en": "Seaborgium"
         },
         "group": "6 B",
         "period": "7",
         "atomMass": "[271]",
         "elnegativity": "",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f14 6d4 7s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "6"
         ],
         "id": 106
      },
      {
         "element": "Bh",
         "name": {
            "ru": "Борий",
            "en": "Bohrium"
         },
         "group": "7 B",
         "period": "7",
         "atomMass": "[274]",
         "elnegativity": "",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f14 6d5 7s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "7"
         ],
         "id": 107
      },
      {
         "element": "Hs",
         "name": {
            "ru": "Хассий",
            "en": "Hassium"
         },
         "group": "8 B",
         "period": "7",
         "atomMass": "[277]",
         "elnegativity": "",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f14 6d6 7s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "8"
         ],
         "id": 108
      },
      {
         "element": "Mt",
         "name": {
            "ru": "Мейтнерий",
            "en": "Meitnerium"
         },
         "group": "8 B",
         "period": "7",
         "atomMass": "[278]",
         "elnegativity": "",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f14 6d7 7s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "0"
         ],
         "id": 109
      },
      {
         "element": "Ds",
         "name": {
            "ru": "Дармштадтий",
            "en": "Darmstadtium"
         },
         "group": "8 B",
         "period": "7",
         "atomMass": "[281]",
         "elnegativity": "",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f14 6d8 7s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "0"
         ],
         "id": 110
      },
      {
         "element": "Rg",
         "name": {
            "ru": "Рентгений",
            "en": "Roentgenium"
         },
         "group": "1 B",
         "period": "7",
         "atomMass": "[281]",
         "elnegativity": "",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f14 6d9 7s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "0"
         ],
         "id": 111
      },
      {
         "element": "Cn",
         "name": {
            "ru": "Коперниций",
            "en": "Copernicium"
         },
         "group": "2 B",
         "period": "7",
         "atomMass": "[285]",
         "elnegativity": "",
         "elconf": "1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s2 5p6 4f14 5d10 6s2 6p6 5f14 6d10 7s2",
         "color": "blue",
         "class": "Металлы",
         "subclass": "Переходные металлы",
         "val": [
            "0"
         ],
         "id": 112
      },
      {
         "element": "(Uut)",
         "name": {
            "ru": "Унунтрий",
            "en": "Ununtrium"
         },
         "group": "3 A",
         "period": "7",
         "atomMass": "[286]",
         "elnegativity": "",
         "elconf": "",
         "color": "yellow",
         "class": "Металлы",
         "subclass": "Полупроводники",
         "val": [
            "0"
         ],
         "id": 113
      },
      {
         "element": "Fl",
         "name": {
            "ru": "Флеровий",
            "en": "Flerovium"
         },
         "group": "4 A",
         "period": "7",
         "atomMass": "[289]",
         "elnegativity": "",
         "elconf": "",
         "color": "yellow",
         "class": "Металлы",
         "subclass": "Полупроводники",
         "val": [
            "0"
         ],
         "id": 114
      },
      {
         "element": "(Uup)",
         "name": {
            "ru": "Унунпентий",
            "en": "Ununpentium"
         },
         "group": "5 A",
         "period": "7",
         "atomMass": "[289]",
         "elnegativity": "",
         "elconf": "",
         "color": "yellow",
         "class": "Металлы",
         "subclass": "Полупроводники",
         "val": [
            "0"
         ],
         "id": 115
      },
      {
         "element": "Lv",
         "name": {
            "ru": "Ливерморий",
            "en": "Livermorium"
         },
         "group": "6 A",
         "period": "7",
         "atomMass": "[293]",
         "elnegativity": "",
         "elconf": "",
         "color": "yellow",
         "class": "Металлы",
         "subclass": "Полупроводники",
         "val": [
            "0"
         ],
         "id": 116
      },
      {
         "element": "(Uus)",
         "name": {
            "ru": "Унунсептий",
            "en": "Ununseptium"
         },
         "group": "7 A",
         "period": "7",
         "atomMass": "[294]",
         "elnegativity": "",
         "elconf": "",
         "color": "yellow",
         "class": "Металлы",
         "subclass": "Галогены",
         "val": [
            "0"
         ],
         "id": 117
      },
      {
         "element": "(Uuo)",
         "name": {
            "ru": "Унуноктий",
            "en": "Ununoctium"
         },
         "group": "8 A",
         "period": "7",
         "atomMass": "[294]",
         "elnegativity": "",
         "elconf": "",
         "color": "yellow",
         "class": "Неметаллы",
         "subclass": "Инертные газы",
         "val": [
            "0"
         ],
         "id": 118
      }
   ];

   angular.module('ChemistryX10').constant('periodic_table', elements);
})();



},{}],12:[function(require,module,exports){
(function () {

  function AccordionController ($scope, $rootScope) {
    var panelsBodies = document.getElementsByClassName('panel-body');
    for (var i = 0; i < panelsBodies.length; i++) {
      panelsBodies[i].style.display = 'none';
    }

    $scope.togglePanel = function(panelNumber) {
      var panelDisplay = document.getElementsByClassName('panel-body')[panelNumber].style.display;
      for (var i = 0; i < panelsBodies.length; i++) {
        panelsBodies[i].style.display = 'none';
      }
      if (panelDisplay == 'none') {
        panelsBodies[panelNumber].style.display = 'block';
        $rootScope.gotoAnchor('panel-' + panelNumber);
      }
      else {
        panelsBodies[panelNumber].style.display = 'none';
      }
    };
  }

  AccordionController.$inject = ['$scope', '$rootScope'];
  angular.module('ChemistryX10').controller('AccordionController', AccordionController);
})();
},{}],13:[function(require,module,exports){
(function () {

  function AlignmentCoefficientCtrl($alignment_coefficient, $scope, $rootScope, $http, $log) {
    $http.get("./json/ions.json").then(function(response)
    {
      $scope.oxidation = response.data;
      //$log.info($scope.oxidation["ions"]);
    });  

    $scope.defaultEquation = "H2 + O2 = H2O";
    $scope.errors = [];

    $scope.readyBalanceShow = false;
    $scope.errorsShow = false;
    $scope.examplesShow = true;

    $scope.abs=Math.abs;

    $scope.refresh = function()
    {
      $scope.coefs = [];
      $scope.subsL = [];
      $scope.subsR = [];
      $scope.balance = [];
      $scope.errors= [];
      //$log.info($scope.coefs);
    }


    $scope.alignment = function()
    {
      if(typeof $scope.equation == "undefined" || $scope.equation == '') $scope.equation=$scope.defaultEquation;
      $alignment_coefficient.alignment($scope.equation);
      $rootScope.alignment(this);
      //$log.info($scope.coefs);
      if ($scope.errors.length == 0) {
        $scope.errorsShow = false;
        $scope.examplesShow = false;
        $scope.readyBalanceShow = true;
      }
      else {
        $log.info($scope.errors);
        $scope.errorsShow = true;
        $scope.examplesShow = true;
        $scope.readyBalanceShow = false;      
      }
    }

    $scope.examples = [
      "P + O2 = P2O5",
      "Na + Cl2 = NaCl",
      "Fe + O2 = Fe2O3",
      "Ca + O2 = CaO"
    ];

    $scope.balanceExample = function(example) {
      $scope.equation = example;
      $scope.alignment();
    };

  }

  AlignmentCoefficientCtrl.$inject = ['$alignment_coefficient', '$scope', '$rootScope', '$http', '$log'];
  angular.module('ChemistryX10').controller('AlignmentCoefficientCtrl', AlignmentCoefficientCtrl);
})();

},{}],14:[function(require,module,exports){
(function () {

  function CribContentController($scope, $rootScope, $location, $http, $stateParams) {
    var type = '';
    if ($location.path().indexOf('cribs/organic') >= 0) {
      type = 'organic';
    }
    else if ($location.path().indexOf('cribs/inorganic') >= 0) {
      type = 'inorganic';
    }
    $http.get('./json/cribs/' + type + '/' + $stateParams.cribId + '.json').then(function(response) {
      $scope.singleCrib = response.data;
    });

    $scope.navbarTitle = {};
    if (type == 'organic') {
      $scope.navbarTitle = 'Органика';
    }
    else if (type == 'inorganic') {
      $scope.navbarTitle = 'Неорганика';
    }
  }

  CribContentController.$inject = ['$scope', '$rootScope', '$location', '$http', '$stateParams'];
  angular.module('ChemistryX10').controller('CribContentController', CribContentController);
})();

},{}],15:[function(require,module,exports){
(function () {

  var _ = require('lodash');

  function CribsListController($scope, $rootScope, $location, $http, $state, appConfigurator) {

    $scope.status = {
      'error': false,
      'loading': false
    };
    _.set($scope, ['config', 'lang'], appConfigurator.getLang());
    var type = '';
    if ($location.path().indexOf('cribs/organic') >= 0) {
      type = 'organic';
    }
    else if ($location.path().indexOf('cribs/inorganic') >= 0) {
      type = 'inorganic';
    }

    $scope.showCribContent = function(index) {
      var stateName = '';
      if (type == 'organic') {
        stateName = 'cribsOrganic.content';
      }
      else if (type == 'inorganic') {
        stateName = 'cribsInorganic.content';
      }
      $state.go(stateName, {cribId: index});
    };

    // загрузка списка шпор из json
    $http.get('./json/cribs/' + type + '_' + appConfigurator.getLang() + '.json').then(function(response) {
      $scope.cribs = response.data;
    });


    $scope.openWikiLink = function(link) {
      if (navigator.connection.type == Connection.NONE) {
        $scope.status.error = true;
      }
      else {
        var ref = window.open(link, '_blank', 'location=no,closebuttoncaption=Back,hidden=yes,disallowoverscroll=yes');
        ref.addEventListener('loadstart', function() {
          $scope.status.error = false;
          $scope.status.loading = true;
        });
        ref.addEventListener('loadstop', function() {
          ref.insertCSS({code: "#page-actions,.banner-container,.feature-footer-v2 footer .last-modified-bar,.feature-footer-v2 footer>.post-content .hlist,.feature-footer-v2 footer>.post-content .license,.header-container,.mf-section-0,.mw-ui-icon.mw-ui-icon-element,.subpages{display:none}a{pointer-events:none!important;color:#222222!important}.client-js .collapsible-heading .indicator{display:block!important}"});
          $scope.status.error = false;
          $scope.status.loading = false;
          ref.show();
        });
        ref.addEventListener('loaderror', function() {
          $scope.status.error = true;
          $scope.status.loading = false;
        });
        ref.addEventListener('exit', function() {
          $scope.status.error = false;
          $scope.status.loading = false;
        });
      }
    };

  }

  CribsListController.$inject = ['$scope', '$rootScope', '$location', '$http', '$state', 'appConfigurator'];
  angular.module('ChemistryX10').controller('CribsListController', CribsListController);
})();

},{"lodash":6}],16:[function(require,module,exports){
(function () {

  var _ = require('lodash');

  function ElementDescriptionCtrl($scope, $state, $http, $stateParams, appConfigurator, $periodic_table) {

    function getDefaultO (amt) {
      return {o: _.fill(Array(amt), '')};
    }

    function getDefaultOrbital (amt) {
      return {
        orb: _.reduce(_.range(1, 2 * amt, 2), function (orb, i) {
          orb.push(getDefaultO(i));
          return orb;
        }, [])
      };
    }
      
    $scope.gotoTable = function() {
      $scope.showTableOverflow();
      $state.go('table');
    };
    $scope.isElementDescriptionCtrl = true;

    $scope.lang = appConfigurator.getLang();
    $scope.isPurchased = appConfigurator.isPurchased();
    $periodic_table.getDetailedElementInfo($stateParams.element_id).then(function (element) {
      $scope.element = element;
      var tmpArr = _.map($scope.element['elconf'].split(' '), function (c) {
        return _.tail(c.match(/(\d+)([spdf])(\d+)/));
      });
      var confs = {
        s : 1,
        p : 2,
        d : 3,
        f : 4
      };
      $scope.elconf = _.reduce([1, 2, 3, 4, 4, 3, 2], function (elconf, i) {
        elconf.push(getDefaultOrbital(i));
        return elconf;
      }, []);

      _.each(tmpArr, function (c) {
        var j = 0;
        var tmpK = c[2];
        while(j < $scope.elconf[c[0]-1]['orb'][confs[c[1]]-1]['o'].length && tmpK > 0)
        {
          $scope.elconf[c[0]-1]['orb'][confs[c[1]]-1]['o'][j]+="↑";
          j++;
          tmpK--;
        }
        j=0;
        while(j < $scope.elconf[c[0]-1]['orb'][confs[c[1]]-1]['o'].length && tmpK > 0)
        {
          $scope.elconf[c[0]-1]['orb'][confs[c[1]]-1]['o'][j]+="↓";
          j++;
          tmpK--;
        }
      });
      // массив, в котором будет обратный порядок уровней
      $scope.elconf = _.reverse($scope.elconf);
    });
  }

  ElementDescriptionCtrl.$inject = ['$scope', '$state', '$http', '$stateParams', 'appConfigurator', '$periodic_table'];
  angular.module('ChemistryX10').controller('ElementDescriptionCtrl', ElementDescriptionCtrl);
})();
},{"lodash":6}],17:[function(require,module,exports){
(function () {

  function FormulaLolCtrl($scope, $log, $rootScope, $http, $stateParams) {

    $scope.formula = $scope.formulas[$stateParams.lvar].frmls[$stateParams.rvar];
    $scope.variable = $scope.formulas[$stateParams.lvar];
    $scope.listVariables = $scope.createdListVariables();
    //$log.info($scope.listVariables);
    $scope.calculateForm = {};
    $scope.resultMultiplier = $scope.formulas[$stateParams.lvar].defaultMeasure;
    $scope.calculateForm.numerator = [];
    $scope.calculateForm.denominator = [];
    for(var i in $scope.formula.top){
      $scope.calculateForm.numerator.push({ multipliers: $scope.listVariables[$scope.formula.top[i]].defaultMeasure, values: $scope.listVariables[$scope.formula.top[i]].value});
    }
    for(var i in $scope.formula.bottom){
      $scope.calculateForm.denominator.push({ multipliers: $scope.listVariables[$scope.formula.bottom[i]].defaultMeasure, values: $scope.listVariables[$scope.formula.bottom[i]].value});
    }
    $scope.isFraction = function(){
      return typeof $scope.formula.bottom != 'undefined';
    }
    
    $scope.formatSymbol = function(s){
      if(s=='NA') return 'N<sub>A</sub>';
      if(s=='Vm') return 'V<sub>m</sub>';
      return s;
    }

    var roundValue = $rootScope.roundValue;
    
    $scope.calculate = function(){
      var numerator = 1;
      for(var i=0; i<$scope.calculateForm.numerator.length; i++)
      {
        numerator*=$scope.calculateForm.numerator[i].values*$scope.calculateForm.numerator[i].multipliers.multiplier;
      }
      var denominator = 1;
      for(var i=0; i<$scope.calculateForm.denominator.length; i++)
      {
        denominator*=$scope.calculateForm.denominator[i].values*$scope.calculateForm.denominator[i].multipliers.multiplier;
      }
      $scope.result = roundValue(numerator/denominator, $scope.variable.type);
    }
  }

  FormulaLolCtrl.$inject = ['$scope', '$log', '$rootScope', '$http', '$stateParams'];
  angular.module('ChemistryX10').controller('FormulaLolCtrl', FormulaLolCtrl);
})();

},{}],18:[function(require,module,exports){
(function () {

  function FormulasCtrl($scope, $log, $rootScope, gettextCatalog) {

    $scope.formatSymbol = function(s) {
      if (s == "NA") return "N<sub>A</sub>";
      if (s == "Vm") return "V<sub>m</sub>";
      return s;
    }

    $scope.formulas = [{
        "frmls" : [
          {"top" : ["m"], "bottom" : ["M"]},
          {"top" : ["V"], "bottom" : ["V<sub>m</sub>"]},
          {"top" : ["N"], "bottom" : ["N<sub>A</sub>"]},
          {"top": ["C", 'V<sub>' + gettextCatalog.getString("р-ра") + '</sub>']},
          {"top": ["P", "V"], "bottom": ["R", "T"]}
        ],
        "description" : gettextCatalog.getString("Химическое количество"),
        "measures" : [
                      {"designation" : gettextCatalog.getString("ммоль"), "multiplier" : 0.001},
                      {"designation" : gettextCatalog.getString("моль"), "multiplier" : 1},
                      {"designation" : gettextCatalog.getString("кмоль"), "multiplier" : 1000}
                    ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("моль"), "multiplier" : 1},
        "symbol" : "n",
        "type":  "n_v"
      },
      {
        "frmls" : [
          {"top" : ["m"], "bottom" : ["n"]},
          {"top": ["D<sub>H<sub>2</sub></sub>", "M(H<sub>2</sub>)"]},
          {"top": ['D<sub>' + gettextCatalog.getString("возд.") + '</sub>', 'M<sub>' + gettextCatalog.getString('возд.') + '</sub>']},
        ],
        "description" : gettextCatalog.getString("Молярная масса"),
        "measures" : [
          {"designation" : gettextCatalog.getString("мг/ммоль"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("г/ммоль"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("кг/ммоль"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("мг/моль"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("г/моль"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("кг/моль"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("мг/кмоль"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("г/кмоль"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("кг/кмоль"), "multiplier" : 1}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("г/моль"), "multiplier" : 1},
        "symbol" : "M",
        "type" : "M_v"
      },
      {
        "frmls" : [
          {"top" : ["M"]}
        ],
        "description" : gettextCatalog.getString("Относительная молекулярная масса"),
        "measures" : [
          {"designation" : gettextCatalog.getString("единица"), "multiplier" : 1}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("единиц"), "multiplier" : 1},
        "symbol" : "M<sub>r</sub>",
        "type" : "M_r"
      },
      {
        "frmls" : [
          {"top" : ["n", "M"]},
          {"top": ["m<sub>" + gettextCatalog.getString("р-ра") + "</sub>", "ω"]},
          {"top" : ["ρ", "V"]},
          {"top": ["m<sub>" + gettextCatalog.getString("атома") + "</sub>", "N"]},
          {"top" : ["N", "M"], "bottom" : ["N<sub>A</sub>"]},
          {"top" : ["V", "V<sub>m</sub>"], "bottom" : ["M"]}
        ],
        "description" : gettextCatalog.getString("Масса вещества"),
        "measures" : [
                      {"designation" : gettextCatalog.getString("мг"), "multiplier" : 0.001},
                      {"designation" : gettextCatalog.getString("г"), "multiplier" : 1},
                      {"designation" : gettextCatalog.getString("кг"), "multiplier" : 1000}
                     ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("г"), "multiplier" : 1},
        "symbol" : "m",
        "type" : "m_v"
      },
      {
        "description" : gettextCatalog.getString("Масса вещества"),
        "measures" : [
                      {"designation" : gettextCatalog.getString("мг"), "multiplier" : 0.001},
                      {"designation" : gettextCatalog.getString("г"), "multiplier" : 1},
                      {"designation" : gettextCatalog.getString("кг"), "multiplier" : 1000}
                     ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("г"), "multiplier" : 1},
        "symbol" : "m<sub>" + gettextCatalog.getString("практ.") + "</sub>",
        "type" : "m_pract"
      },
      {
        "description" : gettextCatalog.getString("Масса вещества"),
        "measures" : [
                      {"designation" : gettextCatalog.getString("мг"), "multiplier" : 0.001},
                      {"designation" : gettextCatalog.getString("г"), "multiplier" : 1},
                      {"designation" : gettextCatalog.getString("кг"), "multiplier" : 1000}
                     ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("г"), "multiplier" : 1},
        "symbol" : "m<sub>" + gettextCatalog.getString("теор.") + "</sub>",
        "type" : "m_teor"
      },
      {
        "frmls" : [
          {"top": ["m"], "bottom": ["ω"]},
          {"top" : ["ρ<sub>" + gettextCatalog.getString("р-ра") + "</sub>", "V<sub>" + gettextCatalog.getString("р-ра") + "</sub>"]}
        ],
        "description" : gettextCatalog.getString("Масса раствора"),
        "measures" : [
                      {"designation" : gettextCatalog.getString("мг"), "multiplier" : 0.001},
                      {"designation" : gettextCatalog.getString("г"), "multiplier" : 1},
                      {"designation" : gettextCatalog.getString("кг"), "multiplier" : 1000}
                     ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("г"), "multiplier" : 1},
        "symbol" : "m<sub>" + gettextCatalog.getString("р-ра") + "</sub>",
        "type" : "m_v"
      },
      {
        "frmls" : [
          {"top": ["m"], "bottom": ["m<sub>" + gettextCatalog.getString("р-ра") + "</sub>"]}
        ],
        "description" : gettextCatalog.getString("Массовая доля вещества"),
        "measures" : [
                      {"designation" : gettextCatalog.getString("доля"), "multiplier" : 1},
                      {"designation" : "%", "multiplier" : 0.01}
                     ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("доля"), "multiplier" : 1},
        "symbol" : "ω",
        "type" : "w_v"
      },  
      {
        "frmls" : [
          {"top" : ["n", "V<sub>m</sub>"]},
          {"top" : ["m"], "bottom" : ["M", "V<sub>m</sub>"]},
          {"top" : ["m"], "bottom" : ["ρ"]},
          {"top": ["φ", "V<sub>" + gettextCatalog.getString("смеси") + "</sub>"]},
          {"top": ["n", "T", "R"], "bottom": ["P"]}
        ],
        "description" : gettextCatalog.getString("Объем вещества"),
        "measures" : [
          {"designation" : gettextCatalog.getString("мм") + "<sup>3</sup>", "multiplier" : 0.000000001},
          {"designation" : gettextCatalog.getString("см") + "<sup>3</sup>", "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("мл"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("л"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("дм3"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("м3"), "multiplier" : 1}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("дм3"), "multiplier" : 0.001},
        "symbol" : "V",
        "type" : "V_v"
      },
      {
       "description" : gettextCatalog.getString("Объем вещества"),
        "measures" : [
          {"designation" : gettextCatalog.getString("мм3"), "multiplier" : 0.000000001},
          {"designation" : gettextCatalog.getString("см3"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("мл"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("л"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("дм3"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("м3"), "multiplier" : 1}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("дм3"), "multiplier" : 0.001},
        "symbol" : "V<sub>" + gettextCatalog.getString("практ.") + "</sub>",
        "type" : "V_pract"
      },
      {
       "description" : gettextCatalog.getString("Объем вещества"),
        "measures" : [
          {"designation" : gettextCatalog.getString("мм3"), "multiplier" : 0.000000001},
          {"designation" : gettextCatalog.getString("см3"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("мл"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("л"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("дм3"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("м3"), "multiplier" : 1}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("дм3"), "multiplier" : 0.001},
        "symbol" : "V<sub>" + gettextCatalog.getString("теор.") + "</sub>",
        "type" : "V_teor"
      },
      {
        "frmls" : [
          {"top" : ["V"], "bottom": ["n"]}
        ],
        "description" : gettextCatalog.getString("Молярный объем вещества"),
        "measures" : [
          {"designation" : gettextCatalog.getString("дм3/ммоль"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("дм3/моль"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("дм3/кмоль"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("см3/ммоль"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("см3/моль"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("см3/кмоль"), "multiplier" : 0.000000001},
          {"designation" : gettextCatalog.getString("мл/ммоль"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("мл/моль"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("мл/кмоль"), "multiplier" : 0.000000001},
          {"designation" : gettextCatalog.getString("л/ммоль"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("л/моль"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("л/кмоль"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("м3/ммоль"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("м3/моль"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("м3/кмоль"), "multiplier" : 0.001}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("дм3/моль"), "multiplier" : 0.001},
        "symbol" : "V<sub>m</sub>",
        "type" : "V_m"
      },
      {
        "frmls" : [
          {"top" : ["m<sub>р-ра</sub>"], "bottom": ["ρ<sub>" + gettextCatalog.getString("р-ра") + "</sub>"]},
          {"top": ["n"], "bottom": ["C"]}
        ],
        "description" : gettextCatalog.getString("Объем раствора"),
        "measures" : [
          {"designation" : gettextCatalog.getString("мм3"), "multiplier" : 0.000000001},
          {"designation" : gettextCatalog.getString("см3"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("мл"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("л"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("дм3"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("м3"), "multiplier" : 1}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("дм3"), "multiplier" : 0.001},
        "symbol" : "V<sub>" + gettextCatalog.getString("р-ра") + "</sub>",
        "type" : "V_rud"
      },    
      {
        "frmls" : [
          {"top" : ["V"], "bottom": ["φ"]}
        ],
        "description" : gettextCatalog.getString("Объем смеси"),
        "measures" : [
                      {"designation" : gettextCatalog.getString("мм3"), "multiplier" : 0.000000001},
                      {"designation" : gettextCatalog.getString("см3"), "multiplier" : 0.000001},
                      {"designation" : gettextCatalog.getString("мл"), "multiplier" : 0.000001},
                      {"designation" : gettextCatalog.getString("л"), "multiplier" : 0.001},
                      {"designation" : gettextCatalog.getString("дм3"), "multiplier" : 0.001},
                      {"designation" : gettextCatalog.getString("м3"), "multiplier" : 1}
                     ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("дм3"), "multiplier" : 0.001},
        "symbol" : "V<sub>" + gettextCatalog.getString("смеси") + "</sub>",
        "type" : "V_smesi"
      }, 
      {
        "frmls" : [
          {"top" : ["m"], "bottom" : ["V"]},
          {"top" : ["n", "M"], "bottom" : ["V"]}
        ],
        "description" : gettextCatalog.getString("Плотность"),
        "measures" : [
          {"designation" : gettextCatalog.getString("мг/мм3"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("мг/см3"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("мг/дм3"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("мг/л"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("мг/м3"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("г/мм3"), "multiplier" : 1000000000},
          {"designation" : gettextCatalog.getString("г/см3"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("г/дм3"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("г/л"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("г/м3"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("кг/мм3"), "multiplier" : 1000000000000},
          {"designation" : gettextCatalog.getString("кг/см3"), "multiplier" : 1000000000},
          {"designation" : gettextCatalog.getString("кг/дм3"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("кг/л"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("кг/м3"), "multiplier" : 1000}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("г/дм3"), "multiplier" : 1000},
        "symbol" : "ρ",
        "type" : "ro_v"
      },
      {
        "description" : gettextCatalog.getString("Плотность раствора"),
        "measures" : [
          {"designation" : gettextCatalog.getString("мг/мм3"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("мг/см3"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("мг/дм3"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("мг/л"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("мг/м3"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("г/мм3"), "multiplier" : 1000000000},
          {"designation" : gettextCatalog.getString("г/см3"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("г/дм3"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("г/л"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("г/м3"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("кг/мм3"), "multiplier" : 1000000000000},
          {"designation" : gettextCatalog.getString("кг/см3"), "multiplier" : 1000000000},
          {"designation" : gettextCatalog.getString("кг/дм3"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("кг/л"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("кг/м3"), "multiplier" : 1000}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("г/дм3"), "multiplier" : 1000},
        "symbol" : "ρ<sub>" + gettextCatalog.getString("р-ра") + "</sub>",
        "type" : "ro_r"
      },
      {
        "frmls" : [
          {"top" : ["m"], "bottom": ["N"]},
                  ],
        "description" : gettextCatalog.getString("Масса атома вещества"),
        "measures" : [
          {"designation" : "а.е.м.", "multiplier" : 1},
        ],
        "defaultMeasure" : {"designation" : "а.е.м.", "multiplier" : 1},
        "symbol" : "m<sub>" + gettextCatalog.getString("атома") + "</sub>",
        "type" : "ma_v"
      },
      {
        "frmls" : [
          {"top" : ["m"], "bottom": ["m<sub>" + gettextCatalog.getString("атома") + "</sub>"]},
          {"top": ["n", "N<sub>A</sub>"]}
        ],
        "description" : gettextCatalog.getString("Число структурных единиц"),
        "measures" : [
          {"designation" : gettextCatalog.getString("частиц"), "multiplier" : 1},
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("частиц"), "multiplier" : 1},
        "symbol" : "N",
        "type" : "N_v"
      },
      {
        "frmls" : [
          {"top": ["m<sub>практ.</sub>"], "bottom": ["m<sub>теор.</sub>"]}
        ],
        "description" : gettextCatalog.getString("Массовая доля выхода"),
        "measures" : [
          {"designation" : gettextCatalog.getString("доля"), "multiplier" : 1}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("доля"), "multiplier" : 1},
        "symbol" : "ω<sub>" + gettextCatalog.getString("вых.") + "</sub>",
        "type" : "w_vyh"
      },  
      {
        "frmls" : [
          {"top": ["V"], "bottom": ["V<sub>" + gettextCatalog.getString("смеси") + "</sub>"]}
        ],
        "description" : gettextCatalog.getString("Объемная доля газа"),
        "measures" : [
          {"designation" : gettextCatalog.getString("доля"), "multiplier" : 1},
          {"designation" : "%", "multiplier" : 0.01}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("доля"), "multiplier" : 1},
        "symbol" : "φ",
        "type" : "fi"
      },
      {
        "frmls" : [
          {"top": ["V<sub>" + gettextCatalog.getString("практ.") + "</sub>"], "bottom": ["V<sub>" + gettextCatalog.getString("теор.") + "</sub>"]}
        ],
        "description" : gettextCatalog.getString("Объемная доля выхода"),
        "measures" : [
          {"designation" : gettextCatalog.getString("доля"), "multiplier" : 1},
          {"designation" : "%", "multiplier" : 0.01}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("доля"), "multiplier" : 1},
        "symbol" : "φ<sub>" + gettextCatalog.getString("вых.") + "</sub>",
        "type" : "fi_vyh"
      },
      {
        "frmls" : [
          {"top" : ["n", "T", "R"], "bottom": ["V"]}
        ],
        "description" : gettextCatalog.getString("Давление газа"),
        "measures" : [
          {"designation" : gettextCatalog.getString("мПа"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("Па"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("кПа"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("МПа"), "multiplier" : 1000000},
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("кПа"), "multiplier" : 1000},
        "symbol" : "P",
        "type" : "P"
      },   
      {
        "frmls" : [
          {"top" : ["P", "V"], "bottom": ["n", "R"]}
        ],
        "description" : gettextCatalog.getString("Температура газа"),
        "measures" : [
          {"designation" : "К", "multiplier" : 1},
        ],
        "defaultMeasure" : {"designation" : "К", "multiplier" : 1},
        "symbol" : "T",
        "type" : "T"
      },
      {
        "frmls" : [
          {"top" : ["n"], "bottom": ["V<sub>р-ра</sub>"]}
        ],
        "description" : gettextCatalog.getString("Молярная концентрация"),
        "measures" : [
          {"designation" : gettextCatalog.getString("ммоль/мм3"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("ммоль/см3"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("ммоль/мл3"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("ммоль/дм3"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("ммоль/л"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("ммоль/м3"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("моль/мм3"), "multiplier" : 1000000000},
          {"designation" : gettextCatalog.getString("моль/см3"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("моль/мл3"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("моль/дм3"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("моль/л3"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("моль/м3"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("кмоль/мм3"), "multiplier" : 1000000000000},
          {"designation" : gettextCatalog.getString("кмоль/см3"), "multiplier" : 1000000000},
          {"designation" : gettextCatalog.getString("кмоль/мл3"), "multiplier" : 1000000000},
          {"designation" : gettextCatalog.getString("кмоль/дм3"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("кмоль/л3"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("кмоль/м3"), "multiplier" : 1000},
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("моль/дм3"), "multiplier" : 1000},
        "symbol" : "C",
        "type" : "C_v"
      },
      {
        "frmls" : [
          {"top" : ["M"], "bottom": ["M(H<sub>2</sub>)"]}
        ],
        "description" : gettextCatalog.getString("Относительная плотность по H2"),
        "measures" : [
          {"designation" : "", "multiplier" : 1}
        ],
        "defaultMeasure" : {"designation" : "", "multiplier" : 1},
        "symbol" : "D<sub>H<sub>2</sub></sub>",
        "type" : "D_h"
      },
      {
        "frmls" : [
          {"top" : ["M"], "bottom": ['M<sub>' + gettextCatalog.getString('возд.') + '</sub>']}
        ],
        "description" : gettextCatalog.getString("Относительная плотность по воздуху"),
        "measures" : [
          {"designation" : "", "multiplier" : 1}
        ],
        "defaultMeasure" : {"designation" : "", "multiplier" : 1},
        "symbol" : 'M<sub>' + gettextCatalog.getString('возд.') + '</sub>'
      },
      {
        "frmls" : [
          {"const" : 22.4}
        ],
        "description" : gettextCatalog.getString("Молярный объем газа"),
        "measures" : [
          {"designation" : gettextCatalog.getString("дм3/ммоль"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("дм3/моль"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("дм3/кмоль"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("см3/ммоль"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("см3/моль"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("см3/кмоль"), "multiplier" : 0.000000001},
          {"designation" : gettextCatalog.getString("мл/ммоль"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("мл/моль"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("мл/кмоль"), "multiplier" : 0.000000001},
          {"designation" : gettextCatalog.getString("л/ммоль"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("л/моль"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("л/кмоль"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("м3/ммоль"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("м3/моль"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("м3/кмоль"), "multiplier" : 0.001}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("л/моль"), "multiplier" : 0.001},
        "symbol" : "V<sub>m</sub>",
        "type" : "V_m"
      },
      {
        "frmls" : [
          {"const" : 6.02}
        ],
        "description" : gettextCatalog.getString("Постоянная Авогадро"),
        "measures" : [
          {"designation" : "10<sup>23</sup>*" + gettextCatalog.getString("частиц/моль"), "multiplier" : 1}
        ],
        "defaultMeasure" : {"designation" : "10<sup>23</sup>*" + gettextCatalog.getString("частиц/моль"), "multiplier" : 1},
        "symbol" : "N<sub>A</sub>",
        "type" : "N_a"
      },
      {
        "frmls" : [
          {"const" : 22}
        ],
        "description" : gettextCatalog.getString("Молярная масса воздуха"),
        "measures" : [
          {"designation" : gettextCatalog.getString("мг/ммоль"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("г/ммоль"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("кг/ммоль"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("мг/моль"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("г/моль"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("кг/моль"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("мг/кмоль"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("г/кмоль"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("кг/кмоль"), "multiplier" : 1}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("г/моль"), "multiplier" : 1},
        "symbol" : 'M<sub>' + gettextCatalog.getString("возд.") + '</sub>',
        "type" : "M_vozd"
      },
      {
        "frmls" : [
          {"const" : 8.31}
        ],
        "description" : gettextCatalog.getString("Универсальная газовая постоянная"),
        "measures" : [
          {"designation" : gettextCatalog.getString("Дж/(моль&times;K)"), "multiplier" : 1}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("Дж/(моль&times;K)"), "multiplier" : 1},
        "symbol" : "R",
        "type" : "R"
      },
      {
        "frmls" : [
          {"const" : 1000}
        ],
        "description" : gettextCatalog.getString("Плотность воды"),
        "measures" : [
          {"designation" : gettextCatalog.getString("мг/мм3"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("мг/см3"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("мг/дм3"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("мг/л"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("мг/м3"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("г/мм3"), "multiplier" : 1000000000},
          {"designation" : gettextCatalog.getString("г/см3"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("г/дм3"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("г/л"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("г/м3"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("кг/мм3"), "multiplier" : 1000000000000},
          {"designation" : gettextCatalog.getString("кг/см3"), "multiplier" : 1000000000},
          {"designation" : gettextCatalog.getString("кг/дм3"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("кг/л"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("кг/м3"), "multiplier" : 1000}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("г/дм3"), "multiplier" : 1000},
        "symbol" : "ρ<sub>" + gettextCatalog.getString("воды") + "</sub>",
        "type" : "ro_h2o"
      },
      {
        "frmls" : [
          {"const" : 2}
        ],
        "description" : gettextCatalog.getString("Молярная масса Н2"),
        "measures" : [
          {"designation" : gettextCatalog.getString("мг/ммоль"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("г/ммоль"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("кг/ммоль"), "multiplier" : 1000000},
          {"designation" : gettextCatalog.getString("мг/моль"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("г/моль"), "multiplier" : 1},
          {"designation" : gettextCatalog.getString("кг/моль"), "multiplier" : 1000},
          {"designation" : gettextCatalog.getString("мг/кмоль"), "multiplier" : 0.000001},
          {"designation" : gettextCatalog.getString("г/кмоль"), "multiplier" : 0.001},
          {"designation" : gettextCatalog.getString("кг/кмоль"), "multiplier" : 1}
        ],
        "defaultMeasure" : {"designation" : gettextCatalog.getString("г/моль"), "multiplier" : 1},
        "symbol" : "M(H<sub>2</sub>)",
        "type" : "M_h"
      }];

    $scope.createdListVariables = function() {
      var list = {};
      for(var v in $scope.formulas)
      {
        list[$scope.formulas[v].symbol] = {description:$scope.formulas[v].description, measure:$scope.formulas[v].measures, defaultMeasure: $scope.formulas[v].defaultMeasure};
        if(typeof $scope.formulas[v].frmls != "undefined"){
          if(typeof $scope.formulas[v].frmls[0].const != "undefined") list[$scope.formulas[v].symbol].value =  $scope.formulas[v].frmls[0].const;
        } 
      }
      return list;
    }

  }

  FormulasCtrl.$inject = ["$scope", "$log", "$rootScope", "gettextCatalog"];
  angular.module('ChemistryX10').controller('FormulasCtrl', FormulasCtrl);
})();

},{}],19:[function(require,module,exports){
(function () {
  var _  = require('lodash');

  function GotoProController($scope, $rootScope, $location, appConfigurator) {
    $scope.noCard = {
      "show": true,
      "btn": {
        "show": true
      },
      "content": {
        "show": false,
      }
    };
    $scope.noCard.btn.showContent = function() {
      $scope.noCard.content.show = true;
      $scope.noCard.btn.show = false;
    };
    $scope.noCard.content.btn = {};

    $scope.turnOnParentsDesc = function() {
      if (!appConfigurator.isParentsDesc()) {
        appConfigurator.toggleParentsDesc();
        $location.replace();
        $location.path('/goto-pro-parents');
      }
    };
    _.set($scope, ['config', 'price'], appConfigurator.getPrice());
  }

  GotoProController.$inject = ['$scope', '$rootScope', '$location', 'appConfigurator'];
  angular.module('ChemistryX10').controller('GotoProController', GotoProController);
})();

},{"lodash":6}],20:[function(require,module,exports){
(function() {
    var _ = require('lodash');

    function MolarMassCtrl($scope, $rootScope, appConfigurator, $periodic_table) {

        $scope.coefficient = '1';
        $scope.trunc = Math.round;
        $scope.showHide = 'Скрыть';
        $scope.config = {
            'isPurchased': appConfigurator.isPurchased(),
            'isParentsDesc': appConfigurator.isParentsDesc()
        };

        $scope.showMore = function() {
            $scope.more = !$scope.more;
            $scope.showHide = ($scope.showHide == 'Подробнее') ? 'Скрыть' : 'Подробнее';
        }

        $scope.List = [];

        $scope.M = 0;
        $scope.defaultSubstance = 'Cu(OH)2';
        $scope.calculate = function() {
            $scope.M = 0;
            $scope.more = false;
            $scope.showHide = 'Подробнее';
            $scope.substance = _.isNil($scope.molarMassSubstanceField) ? $scope.defaultSubstance : $scope.molarMassSubstanceField;
            if ($scope.substance == '') {
                $scope.substance = $scope.defaultSubstance;
            }

            $scope.substance = $scope.substance.replace(/\s+/g, '');
            $scope.List = [];
            $scope.List.parse = $rootScope.parse;
            $scope.List.parse($scope.substance, 1);
            $scope.M = Math.round(_.reduce($scope.List, function(sum, e) {
                return sum + e.coef * $periodic_table.getElementById(_.parseInt(e.elements) + 1).atomMass;
            }, 0));
        }
    }

    MolarMassCtrl.$inject = ['$scope', '$rootScope', 'appConfigurator', '$periodic_table'];
    angular.module('ChemistryX10').controller('MolarMassCtrl', MolarMassCtrl);
})();

},{"lodash":6}],21:[function(require,module,exports){
(function () {

  function ProtectCallController($scope, $rootScope, appConfigurator) {
    function setButtonsStates() {
      if (!appConfigurator.isPurchased()) {
        $scope.unlockBtShow = true;
        $scope.checkBtShow = false;
        $scope.checkedBtShow = false;
      }
      else {
        if ($rootScope.protect.type != 'default') {
          $scope.checkedBtShow = true;
          $scope.checkBtShow = false;
        }
        else {
          $scope.checkBtShow = true;
          $scope.checkedBtShow = false;
        }
      }
    }

    setButtonsStates();

    $scope.checkCallProtection = function() {
      $rootScope.protect.type = appConfigurator.getOs();
      localStorage.setItem('protectType', appConfigurator.getOs());
      setButtonsStates();
    };

  }

  ProtectCallController.$inject = ['$scope', '$rootScope', 'appConfigurator'];
  angular.module('ChemistryX10').controller('ProtectCallController', ProtectCallController);
})();

},{}],22:[function(require,module,exports){
(function () {

  function ProtectClockController($scope, $rootScope) {
    function setButtonsStates() {
        if ($rootScope.protect.type == 'default') {
          $scope.checkedBtShow = true;
          $scope.checkBtShow = false;
        }
        else {
          $scope.checkBtShow = true;
          $scope.checkedBtShow = false;
        }    
    }

    setButtonsStates();

    $scope.checkClockProtection = function() {
      $rootScope.protect.type = 'default';
      localStorage.setItem('protectType', 'default');
      setButtonsStates();    
    };
  }
  
  angular.module('ChemistryX10').controller('ProtectClockController', ['$scope', '$rootScope', ProtectClockController]);
})();

},{}],23:[function(require,module,exports){
(function () {
  function ProtectPageController($scope, $rootScope) {
    $scope.clockBtShow = {
      "checked": false,
      "nochecked": false
    };

    $scope.callBtShow = {
      "checked": false,
      "nochecked": false
    };

    function setInformersStates() {
      if ($rootScope.protect.type == 'default') {
        $scope.clockBtShow = {
          "checked": true,
          "nochecked": false
        };
        $scope.callBtShow = {
          "checked": false,
          "nochecked": true
        };  
      }
      else {
        $scope.callBtShow = {
          "checked": true,
          "nochecked": false
        }; 
        $scope.clockBtShow = {
          "checked": false,
          "nochecked": true
        };
      }
    }

    setInformersStates();
  }

  angular.module('ChemistryX10').controller('ProtectPageController', ['$scope', '$rootScope', ProtectPageController]);
})();
},{}],24:[function(require,module,exports){
(function () {

  var _ = require('lodash');

  function ReactionsController($scope, $rootScope, $http, $location, $log, appConfigurator, $reactions) {

    $scope.error = '';
    _.set($scope, ['config', 'isPurchased'], appConfigurator.isPurchased());

    $scope.reactionsExamplesShow = true;
    $scope.reactionsList = false;
    $scope.reactionsErrorShow = false;
    $scope.reactionsSearchFieldShow = false;

    var examplesReactions = [
      "Na + Cl2",
      "Cu = CuO",
      "Fe2O3",
      "BeO = Be",
      "= Br2 + SO2",
      "HBr + H2SO4",
      "HBr + H2SO4 =",
      "C2H5OH",
      "[Pt(NH3)4]Cl2"
    ];

    var examplesChains = [
      "Cu = CuO = CuCl2 = Cu(OH)2",
      "C = CH4 = CO2 = BaCO3 = BaO",
      "CO = CO2 = K2CO3",
      "S = SO2 = SO3 = H2SO4",
      "SO2 = K2SO3 = K2SO4 = KCl"
    ];

    $scope.examples = [];
    
    $scope.addExamples = function(type, count) {
      var examplesArray = [];
      if (type == 'reactions') {
        examplesArray = examplesReactions;
      }
      else if (type == 'chains') {
        examplesArray = examplesChains;
      }

      if (examplesArray != []) {
        var length = $scope.examples.length;
        for (var i = length; i < length + count * 1; i++){
          if (examplesArray[i] != undefined) {
            $scope.examples.push(examplesArray[i]);
          }
          if (examplesArray[i + 1] == undefined) {
            $scope.reactionsMoreBtHide = true;
          }
        }
      }
    };

    if ($location.url().indexOf('Reactions') >= 0) {
      $scope.addExamples('reactions', 3);
    }
    else if ($location.url().indexOf('Chains') >= 0) {
      $scope.addExamples('chains', 3);
    }
   

    // удаление всех пробелов и другая чистка по необходимости
    function formatReaction(react) {
      var formattedReaction = react.replace(/\s+/g, '');
      if (formattedReaction.charAt(0) == '=' || formattedReaction.charAt(0) == '+') {
        formattedReaction = formattedReaction.substr(1);
      }
      if (formattedReaction.charAt(formattedReaction.length - 1) == '=' || formattedReaction.charAt(formattedReaction.length - 1) == '+') {
        formattedReaction = formattedReaction.substr(0, formattedReaction.length - 1);
      }
      return formattedReaction;
    }

    $scope.defaultReaction = 'H2 + O2';
    $scope.defaultChain = 'H2 = H2O = NaOH = H2';


    $scope.searchChain = function(chn) {
      $scope.reactionsList = false;
      $scope.reactionsExamplesShow = false;
      $scope.reactionsErrorShow = false;
      $scope.reactionsSearchFieldShow = true;

      $scope.error = '';
      var chain;
      if (chn == 'input') {
        chain = document.getElementById('reaction-input').value;
        if (chain == '') {
          chain = $scope.defaultChain;
        }
      }
      else {
        chain = chn;
        document.getElementById('reaction-input').value = chn;
      }
      chain = formatReaction(chain);

      // проверка на пустую цепочку
      if (chain == '') {
        $scope.error += 'Вы ничего не ввели в поле! ';
      }
      // проверка на наличие +
      if (chain.indexOf('+') >= 0) {
        $scope.error += 'В цепочке превращений не должно быть "+"! ';
      }
      if (chain == '=') {
        $scope.error += '"=" - это точно не цепочка превращений! ';
      }
      var equalsCount = 0;
      for (var i = 0; i < chain.length; i++) {
        if (chain.charAt(i) == '=') equalsCount++;
      }
      if (equalsCount == 1) {
        $scope.error += 'Похоже, что вы ищете реакцию, а не цепочку превращений, перейдите в раздел "Поиск реакций" и повторите попытку. ';
      }
      
      if ($scope.error != '') {
        $scope.reactionsErrorShow = true;
        $scope.reactionsSearchFieldShow = false;
        $scope.reactionsExamplesShow = true;      
      }
      else {

        var substs = chain.split('=');
        var substsString = '';
        for (var i = 0; i < substs.length; i++) {
          substsString += '&subst[]=' + substs[i];
        }

        var showReactions = function(response) {
          if (response == null) {
            $scope.error += 'Не удалось найти уравнение реакции. ';
          }        
          else if (response.status == 'captcha') {
            $scope.captcha = response;
            $scope.reactionsCaptchaShow = true;
          }
          else if (response.status == 'error') {
            switch(response.error_code) {
              case 1:
                $scope.error += 'То, что вы ввели, не похоже на цепочку превращений! Проверьте правильность ввода и попробуйте найти цепочку еще раз. ';
                break;
              default:
                $scope.error += 'Ошибка! Попробуйте позже или воспользуйтесь поиском реакций, чтобы найти каждуй из реакций цеаочки отдельно. ';
                break;
            }
            if(typeof response.no_react !== "undefined") {
              $scope.error += response.no_react;
            }
          
            $scope.reactionsSearchFieldShow = false;
            $scope.reactionsErrorShow = true;
            $scope.reactionsExamplesShow = true;
          }
          else {
            $scope.reactionsSearchFieldShow = false;
            $scope.reactionsList = true;
            // удаление русских слов в реакциях и самой цепочке,типа: (раств.), (катод, анод)
            for (var i = 0; i < response.reactions.length; i++) {
              response.reactions[i].reaction = response.reactions[i].reaction.replace(/[а-яА-Я]/g, '');
              response.reactions[i].reaction = response.reactions[i].reaction.replace(/\(\)/g,'');
              response.reactions[i].reaction = response.reactions[i].reaction.replace(/\( \)/g,'');
              response.reactions[i].reaction = response.reactions[i].reaction.replace(/\(.\)/g,'');
              response.reactions[i].reaction = response.reactions[i].reaction.replace(/\(., .\)/g,'');
              response.reactions[i].reaction = '<strong>' + (i + 1) + ')</strong> ' + response.reactions[i].reaction;
            }
            response.react_string = response.react_string.replace(/[а-яА-Я]/g, '');
            response.react_string = response.react_string.replace(/\(\)/g,'');
            response.react_string = response.react_string.replace(/\( \)/g,'');
            response.react_string = response.react_string.replace(/\(.\)/g,'');
            response.react_string = response.react_string.replace(/\(., .\)/g,'');
            
            $scope.chain = response.react_string;          
            
            // добавление 1, 2, 3... над стрелками
            var arrowNumber = 1;
            while ($scope.chain.indexOf('&rarr;') >= 0) {
              $scope.chain = $scope.chain.replace('&rarr;', '@<sup class="upper-number">' + arrowNumber + '</sup>');
              arrowNumber++;
            }
            $scope.chain = $scope.chain.replace(/\@/g, '&rarr;');
            
            $scope.reactions = response.reactions;
          }
        }

        $reactions.solveChain(chain).then(showReactions, function(error) {
          console.log(error);
          $scope.error += 'Не удалось соединиться с сервером, проверьте соединение с интернетои или попробуйте позже. ';
          $scope.reactionsErrorShow = true;
          $scope.reactionsSearchFieldShow = false;
          $scope.reactionsExamplesShow = true;
        });
      }
    }

    $scope.searchReaction = function(react) {

      $scope.reactionsList = false;
      $scope.reactionsExamplesShow = false;
      $scope.reactionsErrorShow = false;
      $scope.reactionsSearchFieldShow = true;
      $scope.error = '';
      $scope.react = react;

      if (!appConfigurator.isPurchased() && appConfigurator.isReactionsLimit()) {
        $scope.reactionsSearchFieldShow = false;
        $scope.reactionsExamplesShow = true;
        $rootScope.Ui.turnOn('reactLimitModal');
      } else {
        if (react == '') {
          reaction = $scope.defaultReaction;
        } else {
          reaction = react;
        }
        reaction = formatReaction(reaction);

        // проверка на пустую реакцию
        if (reaction == '') {
          $scope.error += 'Вы ничего не ввели в поле! ';
        }

        // проверка на несколько =
        var equalCount = 0;
        for (var i = 0; i < reaction.length; i++) {
          if (reaction.charAt(i) == '=') equalCount++;
        }
        if (equalCount > 1) {
          $scope.error += 'Вы ввели несколько знаков "=". В реакциях может быть только одно "="! ';
        }
        if (reaction == '=' || reaction == '+') {
          $scope.error += '"' + reaction + '" точно не может быть реакцией. ';
        }

        if ($scope.error != '') {
          $scope.reactionsErrorShow = true;
          $scope.reactionsSearchFieldShow = false;
          $scope.reactionsExamplesShow = true;
        }
        else {
          // куски запроса для firstField[] и secondField[] соответственно
          var queryLeft = '';
          var queryRight = '';

          // ситуация вида "h2 = h2o" или "h2 + o2 = h2o"
          if (reaction.indexOf('=') >= 0) {
            var fields = reaction.split('=');
            // обработка первой до = части
            if (fields[0].indexOf('+') >= 0) {
              var firstFields = fields[0].split('+');
              for (var i = 0; i < firstFields.length; i++) {
                queryLeft += 'firstField[]=' + firstFields[i] + '&';
              }
              queryLeft = queryLeft.substr(0, queryLeft.length - 1);
            }
            else {
              queryLeft = 'firstField[]=' + fields[0];
            }
            // обработка правой после = части
            if (fields[1].indexOf('+') >= 0) {
              var secondFields = fields[1].split('+');
              for (var i = 0; i < secondFields.length; i++) {
                queryRight += 'secondField[]=' + secondFields[i] + '&';
              }
              queryRight = queryRight.substr(0, queryRight.length - 1);
            }
            else {
              queryRight = 'secondField[]=' + fields[1];
            }        
          }

          // ситуация вида "h2 + o2" или "= h2o", т.е. только одна часть до или после =
          else {
            if (reaction.indexOf('+') >= 0) {
              var firstFields = reaction.split('+');
              for (var i = 0; i < firstFields.length; i++) {
                queryLeft += 'firstField[]=' + firstFields[i] + '&';
              }
              queryLeft = queryLeft.substr(0, queryLeft.length - 1);
            }
            else {
              queryLeft = 'firstField[]=' + reaction;
            }
          }

          if (queryRight != '') {
            queryRight = '&' + queryRight;
          }

          var showReactions = function(response) {
            if (response == null) {
              $scope.error += 'Не удалось найти уравнение реакции. ';
            }        
            else if (response.status == 'captcha') {
              $scope.captcha = response;
              $scope.reactionsCaptchaShow = true;
            }
            else if (response.status == 'error') {
              switch(response.error_code) {
                case 1:
                  $scope.error += 'То, что вы ввели, не похоже на реакцию! Проверьте правильность ввода и попробуйте найти реакцию еще раз. ';
                  break;
                default:
                  $scope.error += 'Ошибка! Попробуйте позже или воспользуйтесь функцией расстановки коэффициентов. ';
                  break;
              }
              $scope.reactionsSearchFieldShow = false;
              $scope.reactionsErrorShow = true;
              $scope.reactionsExamplesShow = true;
            } else {
              $scope.reactionsSearchFieldShow = false;
              $scope.reactionsList = true;

              // удаление русских слов в реакциях,типа: (раств.), (катод, анод)
              for (var i = 0; i < response.reactions.length; i++) {
                response.reactions[i].reaction = response.reactions[i].reaction.replace(/[а-яА-Я]/g, '');
                response.reactions[i].reaction = response.reactions[i].reaction.replace(/\(\)/g,'');
                response.reactions[i].reaction = response.reactions[i].reaction.replace(/\( \)/g,'');
                response.reactions[i].reaction = response.reactions[i].reaction.replace(/\(.\)/g,'');
                response.reactions[i].reaction = response.reactions[i].reaction.replace(/\(., .\)/g,'');
              }

              $scope.reactions = response.reactions;
            }
            
            // считаем попытку удачной и делаем +1 к попыткам в ограничениях, специаьно здесь, чтобы фигня введенная в учет шла
            appConfigurator.incrementReactionsLimitCount();
          }

          $reactions.solveReaction(react).then(showReactions, function(error) {
            console.log(error);
            $scope.error += 'Не удалось соединиться с сервером, проверьте соединение с интернетои или попробуйте позже. ';
            $scope.reactionsErrorShow = true;
            $scope.reactionsSearchFieldShow = false;
            $scope.reactionsExamplesShow = true;
          });
          
          $scope.sendCaptcha = function() {
            $scope.inputCaptcha = document.getElementById('captcha-text').value;
            if ($scope.inputCaptcha == '' || $scope.inputCaptcha == undefined) {
              $scope.error = 'Вы не ввели код с картинки!';
              $scope.reactionsErrorShow = true;
            }
            else {
              $http({
                url: 'http://react.chemistryx10.com/unban?captcha=' + $scope.inputCaptcha + '&key=' + $scope.captcha.data.key + '&url=' + $scope.captcha.data.url,
                method: 'GET'
              }).then(function(response) {
                $scope.reactionsCaptchaShow = false;
              }, function(error) {
                $scope.error = 'Вы неправильно ввели код с картинки!';
                $scope.reactionsErrorShow = true;    
              });

              /*
              попытка отправлять постом
              var postData = {
                "captcha": $scope.inputCapthca,
                "key": $scope.captcha.data.key,
                "url": $scope.captcha.data.url
              };

              $http.post('http://react.chemistryx10.com/unban', postData).then(function(response) {
                $scope.reactionsCaptchaShow = false;
              }).error(function() {
                $scope.error = 'Вы неправильно ввели код с картинки!';
                $scope.reactionsErrorShow = true;    
              });          
              */
            }
          };     

        }

      };
    }

  }

  ReactionsController.$inject = ['$scope', '$rootScope', '$http', '$location', '$log', 'appConfigurator', '$reactions'];
  angular.module('ChemistryX10').controller('ReactionsController', ReactionsController);
})();

},{"lodash":6}],25:[function(require,module,exports){
(function () {

  var _ = require('lodash');

  function SettingsController($scope, $window, $log, appConfigurator) {
    $scope.langs = [
      {
        value : "ru",
        label : "Русский"
      },
      {
        value : "en",
        label : "English"
      }
    ];
    $scope.language = _.find($scope.langs, {value: appConfigurator.getLang()});

    $scope.changeLanguage = function() {
      appConfigurator.setLang($scope.language.value);
      $window.location.reload();
    }
  }

  SettingsController.$inject = ['$scope', '$window', '$log', 'appConfigurator'];
  angular.module('ChemistryX10').controller('SettingsController', SettingsController);
})();

},{"lodash":6}],26:[function(require,module,exports){
(function() {

    var _ = require('lodash');

    function SimpleProblemsController($scope, $rootScope, $http, $log, $window, appConfigurator, $reactions, $periodic_table) {

        var variablesList = [];
        $rootScope.variablesList = [];

        $http.get('./json/quantities.json').then(function(response) {
            variablesList = response.data;
            // создание копии variablesList
            angular.copy(variablesList, $rootScope.variablesList);
            setStartStates();
        });

        var constants = {};
        $http.get('./json/constants.json').then(function(response) {
            constants = response.data;
        });

        var gases = [];
        $http.get('./json/gases.json').then(function(response) {
            gases = response.data;
        });

        $scope.solver = {
            "isSimple": false // простой или сложный решатель (без реакции или с ней)
        };

        // !!! Отлавливать на android backbutton

        // задает начальные значения при вводе "дано" и "найти", вынесено в функцию, чтобы отрабатывало после http.get
        function setStartStates() {
            $scope.problemsVarSelectShow = true;
            $scope.givenFillingStringShow = true;

            $scope.problemsVarFindSelectShow = true;
            $scope.findFillingStringShow = false;

            $scope.givenCompleteBtDisabledShow = true;
            $scope.givenCompleteBtEnabledShow = false;

            $scope.findCompleteBtDisabledShow = true;
            $scope.findCompleteBtEnabledShow = false;

            $scope.givenVariable = $scope.variablesList[0];
            $scope.findVariable = $scope.variablesList[0];
            $scope.selectedVariable = $scope.variablesList[0];
            $scope.selectedFindVariable = $scope.variablesList[0];


            $scope.selectedSubst = $scope.reactSearch.reaction.object[0];
            $scope.selectedFindSubst = $scope.reactSearch.reaction.object[0];
        }


        // объект для одной заполненной строки
        var fillingField = {};
        var fillingFindField = {};
        // массив для всех заполненных строк
        $scope.givenFields = [];
        $scope.findFields = [];


        var subst = '';
        var substB = '';

        $scope.solver = {};
        $scope.solver.path = [
            "reactQuestion"
        ];


        $scope.solver.back = function() {
            //alert($scope.solver.path[$scope.solver.path.length - 1]);
            clearActivityInfo($scope.solver.path[$scope.solver.path.length - 1]);
            $scope.solver.path.pop();
            $scope.showActivity($scope.solver.path[$scope.solver.path.length - 1]);

            function clearActivityInfo(activity) {
                switch (activity) {
                    case 'simpleProblemSubstanceEnter':
                        $scope.substFormula = '';
                        $scope.substFormulaErrorText = '';
                        subst = '';
                        substB = '';
                        break;

                    case 'simpleProblemGiven':
                        fillingField = {};
                        $scope.givenFields = [];
                        $scope.givenCompleteBtEnabledShow = false;
                        $scope.givenCompleteBtDisabledShow = true;
                        break;

                    case 'simpleProblemFind':
                        fillingFindField = {};
                        $scope.findVariable = $scope.variablesList[0];
                        $scope.findFields = [];
                        $scope.findCompleteBtEnabledShow = false;
                        $scope.findCompleteBtDisabledShow = true;
                        break;

                    case 'reactFinding':
                        document.getElementById('reaction-input').value = '';
                        $scope.reactSearch.list.data = [];
                        $scope.reactSearch.list.show = false;
                        $scope.reactSearch.hintField.show = true;
                        $scope.reactSearch.enterFullReactField.show = true;
                        $scope.reactSearch.noConnectField.show = false;
                        $scope.reactSearch.captcha = {
                            "show": false,
                            "key": "",
                            "captcha": "",
                            "url": ""
                        };
                        $scope.reactSearch.reaction.object = [];
                        $scope.reactSearch.reaction.record = '';
                        $scope.reactSearch.error = {
                            "show": false,
                            "text": ""
                        };
                        break;

                    case 'reactEntering':
                        document.getElementById('reaction-full-input').value = '';
                        $scope.reactSearch.reaction.object = [];
                        $scope.reactSearch.reaction.record = '';
                        $scope.reactEntering.error = {
                            "show": false,
                            "text": ""
                        };
                        break;

                    case 'simpleProblemSolution':
                        $scope.answers = [];
                        $scope.answerSol = [];
                        $scope.givenFieldsSol = [];
                        $scope.findFieldsSol = [];
                        $scope.shortAnswers = [];
                        $scope.solutionErrors = [];
                        $scope.convertedMeasures = [];
                        break;

                }
            }
        };

        $scope.activitiesShow = {
            "reactQuestion": true,
            "simpleProblemGiven": false,
            "simpleProblemFind": false,
            "simpleProblemSubstance": false,
            "simpleProblemSubstanceEnter": false,
            "simpleProblemSolution": false,

            "reactFinding": false,
            "reactEntering": false
        };

        $scope.showActivity = function(activity) {
            if (!_.isNil($scope.activitiesShow[activity])) {
                for (var currentActivity in $scope.activitiesShow) {
                    $scope.activitiesShow[currentActivity] = false;
                }
                $scope.activitiesShow[activity] = true;
                if ($scope.solver.path[$scope.solver.path.length - 1] != activity) {
                    $scope.solver.path.push(activity);
                }
            }
        };

        // Отливливание кнопки "Назад" на андройде
        $window.addEventListener('backbutton', function(e) {
            if ($scope.activitiesShow.reactQuestion) {
                $window.history.go(-1);
            } else {
                alert('solver back');
                $scope.solver.back();
            }
        });





        $scope.checkSubstFormula = function() {
            $scope.substFormulaErrorText = '';
            var substance = document.getElementById('singleSubstanceInput').value.replace(/\s+/g, '');;
            // посчитать молярную массу, а пока просто проврка на пустую строку
            if (substance != '') {
                if (getMolarMass(substance) <= 0) {
                    $scope.substFormulaErrorText = 'Неправильно введена формула вещества!';
                } else {
                    $scope.showActivity('simpleProblemGiven');
                    $scope.substFormulaErrorShow = false;
                    deleteFromVarList('M_v');
                    subst = $scope.substFormula;
                    substB = '(' + $scope.substFormula + ')';
                }
            } else {
                $scope.substFormulaErrorText = 'Вы не ввели формулу вещества!';
            }

            if ($scope.substFormulaErrorText != '') {
                $scope.substFormulaErrorShow = true;
            }

            // расчет молярной массы
            function getMolarMass(substance) {
                var list = new Array();
                list.parse = $rootScope.parse;
                var M = 0;
                var subst = substance.replace(/\s+/g, '');
                list.parse(subst, 1);
                for (var i = 0; i < list.length; i++) {
                    M += Math.round(list[i]["coef"] * $periodic_table.getElementById(_.parseInt(list[i]["elements"]) + 1)["atomMass"]);
                }
                return M;
            }
        };

        // удаление из динамического массива не по ключу, а не индексу
        function deleteFromVarList(varName) {
            for (var i = 0; i < $scope.variablesList.length; i++) {
                if ($scope.variablesList[i].var == varName) {
                    $scope.variablesList.splice(i, 1);
                    break;
                }
            }
        }

        function addToVarList(varName) {
            // проверка на существование, если существует, не добавляем
            var exist = false;
            for (var i = 0; i < $scope.variablesList.length; i++) {
                if ($scope.variablesList[i].var == varName) {
                    exist = true;
                    break;
                }
            }
            if (!exist) {
                for (var i = 0; i < variablesList.length; i++) {
                    if (variablesList[i].var == varName) {
                        $scope.variablesList.splice(1, 0, variablesList[i]);
                        break;
                    }
                }
            }
        }

        $scope.deleteFromVarList = function(varName) {
            deleteFromVarList(varName);
        };
        $scope.addToVarList = function(varName) {
            addToVarList(varName);
        };


        $scope.setSelectedVariable = function(variable) {
            $scope.givenErrorShow = false;
            for (var i = 0; i < $scope.variablesList.length; i++) {
                if ($scope.variablesList[i].var == variable && variable != 'select') {

                    var isVarInFilds = false;
                    for (var j = 0; j < $scope.givenFields.length; j++) {
                        if ($scope.givenFields[j].var == variable) {
                            isVarInFilds = true;
                        }
                    }

                    if (!isVarInFilds || !$scope.solver.isSimple) {
                        $scope.selectedVariable = $scope.variablesList[i];
                        // изменено с просто $scope.selectedVariable.measures.ru[0]
                        $scope.selectedVariableModel = $scope.selectedVariable.measures.ru[0];
                        fillingField = {};
                        fillingField.var = variable;
                        fillingField.measure = $scope.selectedVariable.measures.ru[0];
                        fillingField.variable = $scope.selectedVariable.var;
                        fillingField.symbol = $scope.selectedVariable.symbol.ru;
                        $scope.problemsVarSelectShow = false;
                        $scope.givenFillingStringShow = true;
                    } else {
                        $scope.givenVariable = $scope.variablesList[0];
                        $scope.givenError = 'Поле "' + $scope.variablesList[i].name.ru + '" уже заполнено вами! Вы можете удалить его и заполнить заново.';
                        $scope.givenErrorShow = true;
                    }

                    break;
                }
            }
        };

        $scope.setSelectedFindVariable = function(variable) {
            $scope.findErrorShow = false;
            for (var i = 0; i < $scope.variablesList.length; i++) {
                if ($scope.variablesList[i].var == variable && variable != 'select') {

                    var isVarInFilds = false;
                    for (var j = 0; j < $scope.findFields.length; j++) {
                        if ($scope.findFields[j].var == variable) {
                            isVarInFilds = true;
                        }
                    }

                    if (!isVarInFilds || !$scope.solver.isSimple) {
                        $scope.selectedFindVariable = $scope.variablesList[i];
                        fillingFindField = {};
                        fillingFindField.var = variable;
                        fillingFindField.name = $scope.selectedFindVariable.name.ru;
                        fillingFindField.symbol = $scope.selectedFindVariable.symbol.ru;

                        if ($scope.solver.isSimple) {
                            $scope.findCompleteBtDisabledShow = false;
                            $scope.findCompleteBtEnabledShow = true;
                            $scope.findFields.push(fillingFindField);
                        } else if (!$scope.solver.isSimple) {
                            $scope.findFillingStringShow = true;
                            $scope.problemsVarFindSelectShow = false;
                        }
                    } else {
                        $scope.findError = 'Поле "' + $scope.variablesList[i].name.ru + '" уже заполнено вами! Вы можете удалить его и заполнить заново.';
                        $scope.findErrorShow = true;
                    }

                    if ($scope.solver.isSimple) {
                        $scope.findVariable = $scope.variablesList[0];
                    }

                    break;
                }
            }

        };

        $scope.writeMeasure = function(measure) {
            fillingField.measure = measure;
        };


        $scope.writeSubstance = function(subst) {
            fillingField.subst = subst.subst;
        };

        $scope.writeFindSubstance = function(subst) {
            fillingFindField.subst = subst.subst;
        };


        $scope.checkGivenString = function() {
            $scope.givenErrorShow = false;
            $scope.givenError = '';
            var variableValue = document.getElementById('variableValue').value;
            if (variableValue == undefined) {
                $scope.givenError = 'Вы не ввели значение величины (поле "число" пустое)! ';
            } else if (variableValue <= 0) {
                $scope.givenError = 'Значение величины должно быть больше нуля! ';
            } else if (!$scope.solver.isSimple) {
                if (document.getElementById('variableSubstance').value == '') {
                    $scope.givenError = 'Вы не выбрали вещество! ';
                } else {
                    for (var i = 0; i < $scope.givenFields.length; i++) {
                        if ($scope.givenFields[i].variable == fillingField.variable && $scope.givenFields[i].subst == fillingField.subst) {
                            $scope.givenError = 'Поле "' + $scope.givenFields[i].symbol + '" для ' + $scope.givenFields[i].subst + ' уже заполнено вами! Можете удалить его и заполнить заново';
                            break;
                        }
                    }
                }
            }

            if ($scope.givenError != '') {
                $scope.givenErrorShow = true;
            } else {
                fillingField.value = variableValue;
                $scope.givenFields.push(fillingField);
                $log.info('Given fields', $scope.givenFields);
                fillingField = {};

                $scope.clearGivenFields();

                $scope.givenFillingStringShow = false;
                $scope.problemsVarSelectShow = true;

                // включение настоящей кнопки
                $scope.givenCompleteBtDisabledShow = false;
                $scope.givenCompleteBtEnabledShow = true;
            }
        };


        $scope.checkFindString = function(subst) {
            $scope.findErrorShow = false;
            $scope.findError = '';
            var isRepeating = false;

            function isSubstRepeated(subst) {
                var isRepeated = true;
                if ($scope.findFields.length > 0) {
                    isRepeated = false;
                    for (var i = 0; i < $scope.findFields.length; i++) {
                        if ($scope.findFields[i].subst == subst) {
                            isRepeated = true;
                            break;
                        }
                    }
                }
                return isRepeated;
            }

            if (subst.subst == '') {
                $scope.findError = 'Вы не выбрали вещество!';
            } else if (!isSubstRepeated(subst.subst)) {
                $scope.findError = 'Допускается только 1 вещество в "Найти". Если надо найти что-либо у нескольких разных веществ, запускайте решатель заново отдельно для каждого вещества.';
            } else {
                for (var i = 0; i < $scope.findFields.length; i++) {
                    var fillingSubst = subst.subst;
                    if ($scope.findFields[i].var == fillingFindField.var && $scope.findFields[i].subst == fillingSubst) {
                        isRepeating = true;
                        //$scope.findError = 'Вы уже указали, что надо найти ' + $scope.findFields[i].symbol + ' для ' + $scope.findFields[i].subst + '!';
                        break;
                    }
                }
            }
            if (!isRepeating) {
                if ($scope.findError == '') {

                    // костыль на случай, если вещество повторялось и ng-change почему-то не захотел срабатывать
                    if (fillingFindField.subst == undefined) {
                        fillingFindField.subst = subst.subst;
                    }

                    $scope.findFields.push(fillingFindField);
                    $log.info('findfield', fillingFindField);
                    fillingFindField = {};

                    $scope.clearFindFields();

                    $scope.findFillingStringShow = false;
                    $scope.problemsVarFindSelectShow = true;

                    // включение настоящей кнопки
                    $scope.findCompleteBtDisabledShow = false;
                    $scope.findCompleteBtEnabledShow = true;
                } else {
                    $scope.findErrorShow = true;
                }
            } else {
                fillingFindField = {};
                $scope.clearFindFields();
                $scope.findFillingStringShow = false;
                $scope.problemsVarFindSelectShow = true;
            }
        };


        // удаление уже сформированной строки
        $scope.deleteGivenString = function(number) {
            $scope.givenErrorShow = false;
            $scope.givenFields.splice(number, 1);
            // если все поля удалены, кнопка становится неактивной
            if ($scope.givenFields.length < 1) {
                $scope.givenCompleteBtDisabledShow = true;
                $scope.givenCompleteBtEnabledShow = false;
            }
            if (!$scope.givenFillingStringShow) {
                $scope.clearGivenFields();
                $scope.problemsVarSelectShow = true;
            }
        };

        $scope.deleteFindString = function(number) {
            $scope.findErrorShow = false;
            $scope.findFields.splice(number, 1);
            // если все поля удалены, кнопка становится неактивной
            if ($scope.findFields.length < 1) {
                $scope.findCompleteBtDisabledShow = true;
                $scope.findCompleteBtEnabledShow = false;
            }
            if (!$scope.findFillingStringShow) {
                $scope.clearFindFields();
                $scope.problemsVarFindSelectShow = true;
            }
        };

        // удаление строки, которая в процессе заполнения
        $scope.deleteGivenField = function() {
            $scope.problemsVarSelectShow = true;
            $scope.givenFillingStringShow = false;
            $scope.clearGivenFields();
            $scope.givenErrorShow = false;
        };

        $scope.deleteFindField = function() {
            $scope.problemsVarFindSelectShow = true;
            $scope.findFillingStringShow = false;
            $scope.clearFindFields();
            $scope.findErrorShow = false;
        };


        $scope.clearGivenFields = function() {
            $scope.variableValue = '';
            $scope.givenVariable = $scope.variablesList[0];
            //document.getElementById('variableSubstance').value = '';
            $scope.selectedSubst = '';
        }

        $scope.clearFindFields = function() {
            $scope.findVariable = $scope.variablesList[0];
            $scope.selectedFindSubst = '';
            fillingFindField = {};
            document.getElementById('variableFindSubstance').value = '';
        }


        // функция округления значений при вычислениях


        var roundValue = $rootScope.roundValue;

        var vars = {
            "M_v": undefined,
            "M_r": undefined,
            "m_v": undefined,
            "m_r": undefined,
            "m_raspl": undefined,
            "m_rud": undefined,
            "m_smesi": undefined,
            "n_v": undefined,
            "V_v": undefined,
            "V_n": undefined,
            "V_r": undefined,
            "V_raspl": undefined,
            "V_rud": undefined,
            "V_smesi": undefined,
            "w_v": undefined,
            //"w_vyh": undefined,
            "fi": undefined,
            //"fi_vyh": undefined,
            "ro_v": undefined,
            "ro_r": undefined,
            "ro_raspl": undefined,
            "ro_rud": undefined,
            "ro_smesi": undefined,
            "ma_v": undefined,
            "N_v": undefined,
            "P": undefined,
            "T": undefined,
            "D_h": undefined,
            "D_vozd": undefined,
            "C_v": undefined
        };

        var singleAnswer = [];

        $scope.solveProblem = function() {
            $scope.answers = [];
            $scope.shortAnswers = []; // ответы в самом конце
            $scope.solutionErrors = [];

            $scope.showActivity('simpleProblemSolution');

            $scope.solutionWaitingShow = true;
            $scope.solutionErrorsShow = false;
            $scope.readySolutionShow = false;

            $scope.convertMeasures();

            // решение задачи без реакции
            if ($scope.solver.isSimple) {
                fillUndefinedVars();
                for (var i = 0; i < $scope.findFields.length; i++) {
                    findSolution($scope.findFields[i].var);
                    if (singleAnswer[0] != undefined) {
                        singleAnswer = clearAnswer(singleAnswer, $scope.findFields[i].var);
                        $scope.answers.push(singleAnswer);
                        addToShortAnswers(singleAnswer[singleAnswer.length - 1]);
                    } else {
                        var solutionError = {
                            "header": {
                                "ru": "Не удалось найти " + $scope.findFields[i].symbol,
                                "en": "Ne udalos naiti " + $scope.findFields[i].symbol
                            },
                            "description": {
                                "ru": "<div>Для поиска " + $scope.findFields[i].symbol + " попробуйте воспользоваться разделом:</div><br><div style='margin-top: 10px' class='btn btn-default' ui-sref='formulas'>Формулы для решения задач</div>",
                                "en": "lol"
                            }
                        };
                        $scope.solutionErrors.push(solutionError);
                    }
                }
            }


            // решение задачи с реакцией
            else {
                $scope.reactionObject = $scope.reactSearch.reaction.object;
                $log.info('$scope.reactionObject', $scope.reactionObject);
                // массив для хранения отдельных решений (для разных веществ в "найти" разные полные решения)
                $scope.solutions = [];
                // новые более удобные массивы для хранения "дано" и "найти", где все привязывается к веществам ("Na": m=3,n=4; ...)
                $scope.givenFieldsSol = [];
                $scope.findFieldsSol = [];

                // заполнение массива для "дано"
                for (var i = 0; i < $scope.givenFields.length; i++) {
                    for (var j = 0; j < $scope.givenFieldsSol.length; j++) {
                        if ($scope.givenFieldsSol[j].subst == $scope.givenFields[i].subst) {
                            var newField = {
                                "var": $scope.givenFields[i].var,
                                "variable": $scope.givenFields[i].variable,
                                "value": $scope.givenFields[i].value,
                                "measure": $scope.givenFields[i].measure,
                                "symbol": $scope.givenFields[i].symbol
                            };
                            $scope.givenFieldsSol[j].fields.push(newField);
                            break;
                        }
                    }
                    if (j == $scope.givenFieldsSol.length) {
                        var newSubst = {
                            "subst": $scope.givenFields[i].subst,
                            "fields": [{
                                "var": $scope.givenFields[i].var,
                                "variable": $scope.givenFields[i].variable,
                                "value": $scope.givenFields[i].value,
                                "measure": $scope.givenFields[i].measure,
                                "symbol": $scope.givenFields[i].symbol
                            }]
                        };
                        $scope.givenFieldsSol.push(newSubst);
                    }
                }

                // заполнение массива для "найти"
                for (var i = 0; i < $scope.findFields.length; i++) {
                    for (var j = 0; j < $scope.findFieldsSol.length; j++) {
                        if ($scope.findFieldsSol[j].subst == $scope.findFields[i].subst) {
                            var newField = {
                                "var": $scope.findFields[i].var,
                                "name": $scope.findFields[i].name,
                                "symbol": $scope.findFields[i].symbol
                            };
                            $scope.findFieldsSol[j].fields.push(newField);
                            break;
                        }
                    }
                    if (j == $scope.findFieldsSol.length) {
                        var newSubst = {
                            "subst": $scope.findFields[i].subst,
                            "fields": [{
                                "var": $scope.findFields[i].var,
                                "name": $scope.findFields[i].name,
                                "symbol": $scope.findFields[i].symbol
                            }]
                        };
                        $scope.findFieldsSol.push(newSubst);
                    }
                }


                // пробегаемся по всем веществам в "найти" и для каждого формируем отдельное полное решение
                for (var i = 0; i < $scope.findFieldsSol.length; i++) {

                    var substAnswers = {
                        "subst": $scope.findFieldsSol[i].subst,
                        "answers": []
                    };
                    $scope.answerSol = [];

                    // проверяем, надо ли искать то, что уже дано по условию, если да, то записываем шаг решения, что уже дано и в ответ
                    for (var j = 0; j < $scope.givenFieldsSol.length; j++) {
                        if ($scope.givenFieldsSol[j].subst == $scope.findFieldsSol[i].subst) {
                            for (var k = 0; k < $scope.givenFieldsSol[j].fields.length; k++) {
                                for (var l = 0; l < $scope.findFieldsSol[i].fields.length; l++) {
                                    if ($scope.givenFieldsSol[j].fields[k].var == $scope.findFieldsSol[i].fields[l].var) {
                                        var findGivenStep = {
                                            "var": $scope.findFieldsSol[i].fields[l].var,
                                            "variable": $scope.findFieldsSol[i].fields[l].var,
                                            "value": $scope.givenFieldsSol[j].fields[k].value,
                                            "record": {
                                                "ru": '<div class="formula">' + $scope.givenFieldsSol[j].fields[k].symbol + '(' + $scope.givenFieldsSol[j].subst + ') = ' + $scope.givenFieldsSol[j].fields[k].value + ' ' + $scope.givenFieldsSol[j].fields[k].measure + '</div>',
                                                "en": ""
                                            },
                                            "explanation": {
                                                "ru": '<div>' + $scope.givenFieldsSol[j].fields[k].symbol + '(' + $scope.givenFieldsSol[j].subst + ') знаем из условия задачи:</div><div class="formula">' + $scope.givenFieldsSol[j].fields[k].symbol + '(' + $scope.givenFieldsSol[j].subst + ') = ' + $scope.givenFieldsSol[j].fields[k].value + ' ' + $scope.givenFieldsSol[j].fields[k].measure + '</div>',
                                                "en": ""
                                            }
                                        };
                                        $scope.answerSol.push(findGivenStep);
                                        addToShortAnswers(findGivenStep);

                                        $scope.findFieldsSol[i].fields.splice(l, 1);
                                        l--;
                                    }
                                }
                            }
                            break;
                        }
                    }

                    /*
                    // 1. попытка найти решение без вспомогательных веществ
                    for (var j = 0; j < $scope.findFieldsSol[i].fields.length; j++) {


                      var currentGiven = [];
                      for (var k = 0; k < $scope.givenFieldsSol.length; k++) {
                        if ($scope.findFieldsSol[i].subst == $scope.givenFieldsSol[k].subst) {
                          currentGiven = $scope.givenFieldsSol[k].fields;
                          break;
                        }
                      }
                      if (currentGiven.length > 0) {
                        // заполняем vars значениями конкретной величины конкретного вещества
                        resetVars();
                        for (var k = 0; k < currentGiven.length; k++) {
                          vars[currentGiven[k].var] = currentGiven[k].value;
                        }
                        findSolution($scope.findFieldsSol[i].fields[j].var);
                        var answerSol = clearAnswer(singleAnswer, $scope.findFieldsSol[i].fields[j].var);
                        if (answerSol.length > 0) {
                          substAnswers.answers.push(answerSol);
                          $log.info('answerSol', answerSol);
                          // удалить из списка для дальнейшего поиска
                          $scope.findFieldsSol[i].fields.splice(j, 1);
                          j--;
                          $log.info('findFieldsDel', $scope.findFieldsSol[i].fields);
                        }
                      }
                    }
                    if (substAnswers.answers.length > 0) {
                      $scope.solutions.push(substAnswers);
                    }
                    */

                    // 2. Цикл для каждого вспомогательного вещества по поиску "n_v"
                    // массив с нахождением n для каждого вспомогательного вещества

                    var nHelpAnswers = [];
                    for (var j = 0; j < $scope.givenFieldsSol.length; j++) {
                        // проверка, вспомогательное ли это вещество для конкретного решения (у вспомогательного ничего искать не надо)
                        if ($scope.givenFieldsSol[j].subst != $scope.findFieldsSol[i].subst) {
                            var substSteps = {
                                "subst": $scope.givenFieldsSol[j].subst,
                                "steps": []
                            };
                            var currentGiven = $scope.givenFieldsSol[j].fields;
                            // проверка, известно ли уже по условию n_v
                            var isNKnown = false;
                            for (var k = 0; k < currentGiven.length; k++) {
                                if (currentGiven[k].var == 'n_v') {
                                    isNKnown = true;
                                    break;
                                }
                            }

                            if (isNKnown) {
                                singleAnswer = [{
                                    "variable": "n_v",
                                    "value": currentGiven[k].value,
                                    "dependencies": [],
                                    "record": {
                                        "ru": '<div class="formula">n(' + substSteps.subst + ') = ' + currentGiven[k].value + ' моль</div>',
                                        "en": "lol"
                                    },
                                    "explanation": {
                                        "ru": '<div class="formula">n(' + substSteps.subst + ') = ' + currentGiven[k].value + ' моль</div><div>Химическое количество ' + substSteps.subst + ' известно по условию задачи и равняется ' + currentGiven[k].value + ' моль.</div>',
                                        "en": ""
                                    }
                                }];
                            } else if (!isNKnown) {
                                resetVars();
                                subst = $scope.givenFieldsSol[j].subst;
                                substB = '(' + subst + ')';
                                for (var k = 0; k < currentGiven.length; k++) {
                                    vars[currentGiven[k].var] = currentGiven[k].value;
                                }
                                findSolution('n_v');
                                $log.info('part1 singleAnswer noclear', singleAnswer);
                                singleAnswer = clearAnswer(singleAnswer, 'n_v');
                                $log.info('part1 singleAnswer clear', singleAnswer);
                            }

                            if (singleAnswer.length > 0) {
                                $log.info('singleAnswer', singleAnswer);
                                substSteps.steps = singleAnswer;
                                nHelpAnswers.push(substSteps);
                            }
                        }
                    }

                    // n для всех вспомогательных уже найдено, проверяем, сколько их
                    if (nHelpAnswers.length > 0) {

                        // объект с верхними и нижними надписями в реакции (1 моль, x моль)
                        $scope.reactRemarks = {
                            "top": [],
                            "bottom": []
                        };
                        // запись значение в правильном порядке в этот объект
                        for (var k = 0; k < $scope.reactSearch.reaction.object.length; k++) {
                            $scope.reactRemarks.top[k] = '';
                            $scope.reactRemarks.bottom[k] = '';

                            // в-во, над которым ставить x
                            if ($scope.reactSearch.reaction.object[k].subst == $scope.findFieldsSol[i].subst) {
                                $scope.reactRemarks.top[k] = 'x';
                                $scope.reactRemarks.bottom[k] = $scope.reactSearch.reaction.object[k].coef + '';
                            } else {
                                for (var l = 0; l < nHelpAnswers.length; l++) {
                                    if ($scope.reactSearch.reaction.object[k].subst == nHelpAnswers[l].subst) {
                                        $scope.reactRemarks.top[k] = nHelpAnswers[l].steps[nHelpAnswers[l].steps.length - 1].value + '';
                                        $scope.reactRemarks.bottom[k] = $scope.reactSearch.reaction.object[k].coef + '';
                                        break;
                                    }
                                }
                            }
                        }
                        //$log.info($scope.reactRemarks);

                        if (nHelpAnswers.length > 1) {
                            var comparisonStep = {};
                            // сортировка по возрастанию величины n_v
                            for (var k = 0; k < nHelpAnswers.length - 1; k++) {
                                var swapped = false;
                                for (var l = 0; l < nHelpAnswers.length - 1 - k; l++) {
                                    if (nHelpAnswers[l].steps[nHelpAnswers[l].steps.length - 1].value > nHelpAnswers[l + 1].steps[nHelpAnswers[l + 1].steps.length - 1].value) {
                                        var saved = nHelpAnswers[l];
                                        nHelpAnswers[l] = nHelpAnswers[l + 1];
                                        nHelpAnswers[l + 1] = saved;
                                        swapped = true;
                                    }
                                }
                                if (!swapped) break;
                            }
                            $log.info('nHelpAnswers', nHelpAnswers); // работает сучка

                            // случай, когда 2 вспомогательных в-ва, и их хим. кол-ва равны
                            if (nHelpAnswers.length == 2 && nHelpAnswers[0].steps[nHelpAnswers[0].steps.length - 1].value == nHelpAnswers[1].steps[nHelpAnswers[1].steps.length - 1].value) {
                                comparisonStep = {
                                    "record": {
                                        "ru": '<div class="formula">n(' + nHelpAnswers[0].subst + ') = n(' + nHelpAnswers[1].subst + ')</div><div>Расчет будем вести по ' + nHelpAnswers[0].subst + '</div>',
                                        "en": "sdf"
                                    },
                                    "explanation": {
                                        "ru": '<div>Сравним химические поличества ' + nHelpAnswers[0].subst + ' и ' + nHelpAnswers[1].subst + ':</div><div class="formula">n(' + nHelpAnswers[0].subst + ') = n(' + nHelpAnswers[1].subst + ')</div><div>Они равны, поэтому расчет можно вести по любому из этих веществ. Давайте для дальнейших вычислений возьмем вещество ' + nHelpAnswers[0].subst + '</div>',
                                        "en": "вот так вот"
                                    }
                                };
                            } else {
                                var comparisonString = '';
                                for (var k = 0; k < nHelpAnswers.length; k++) {
                                    comparisonString += 'n(' + nHelpAnswers[k].subst + ')';
                                    if (k < nHelpAnswers.length - 1) {
                                        comparisonString += ' < ';
                                    }
                                }
                                var substsExcessString = '';
                                for (var k = 1; k < nHelpAnswers.length; k++) {
                                    substsExcessString += nHelpAnswers[k].subst;
                                    if (k < nHelpAnswers.length - 1) {
                                        substsExcessString += ', ';
                                    }
                                }

                                // шаг, в котором сравниваются n разных веществ, чтобы определить избытки и недостатки
                                comparisonStep = {
                                    "record": {
                                        "ru": '<div class="formula">' + comparisonString + '</div><div>' + nHelpAnswers[0].subst + ' в недостатке</div>',
                                        "en": "sdf"
                                    },
                                    "explanation": {
                                        "ru": '<div>Сравним химические поличества ' + nHelpAnswers[0].subst + ', ' + substsExcessString + ':</div><div class="formula">' + comparisonString + '</div><div>' + substsExcessString + ' - в избытке; ' + nHelpAnswers[0].subst + ' - в недостатке</div><div>Задачи на избыток и недостаток всегда решаются <strong>по недостатку</strong>, поэтому решаем задачу по ' + nHelpAnswers[0].subst + '.</div>',
                                        "en": "вот так вот"
                                    }
                                };
                            }
                        }
                        // вставляем в шаги решения
                        for (var k = 0; k < nHelpAnswers.length; k++) {
                            for (var l = 0; l < nHelpAnswers[k].steps.length; l++) {
                                $scope.answerSol.push(nHelpAnswers[k].steps[l]);
                            }
                        }
                        if (nHelpAnswers.length > 1) {
                            $scope.answerSol.push(comparisonStep);
                        }


                        // 3. составляем пропорцию по веществу с меньшим химическим кол-вом (всегда на 0 месте после сортировки), пример: 4:2 = x:3

                        // ищем, на каком месте в реакции вещество с наимеьшим химическим количеством, чтобы выбрать коэффициент
                        // делаем объект для пропорции и заполняем его
                        var proportion = {
                            "helpSubst": {},
                            "findSubst": {}
                        };

                        var isHelpSubstFinded = false;
                        var isFindSubstFinded = false;
                        for (var k = 0; k < $scope.reactSearch.reaction.object.length; k++) {
                            if (!isHelpSubstFinded && nHelpAnswers[0].subst == $scope.reactSearch.reaction.object[k].subst) {
                                proportion.helpSubst = {
                                    "subst": nHelpAnswers[0].subst,
                                    "value": nHelpAnswers[0].steps[nHelpAnswers[0].steps.length - 1].value,
                                    "coef": $scope.reactSearch.reaction.object[k].coef
                                }
                                isHelpSubstFinded = true;
                            } else if (!isFindSubstFinded && $scope.findFieldsSol[i].subst == $scope.reactSearch.reaction.object[k].subst) {
                                proportion.findSubst = {
                                    "subst": $scope.findFieldsSol[i].subst,
                                    "coef": $scope.reactSearch.reaction.object[k].coef
                                }
                            }

                            if (isHelpSubstFinded && isFindSubstFinded) break;
                        }

                        if (proportion.helpSubst.value != undefined) {
                            proportion.findSubst.value = roundValue(proportion.helpSubst.value * proportion.findSubst.coef / proportion.helpSubst.coef, 'n_v');

                            $log.info('proportion', proportion);

                            // шаг с пропорцией для записи в решение
                            var proportionStep = {
                                "record": {
                                    "ru": '<div class="formula"><span class="fraction"><span class="top">' + proportion.helpSubst.value + '</span><span class="bottom">' + proportion.helpSubst.coef + '</span></span> = <span class="fraction"><span class="top">x</span><span class="bottom">' + proportion.findSubst.coef + '</span></span></div><div class="formula">x = <span class="fraction"><span class="top">' + proportion.helpSubst.value + ' &times; ' + proportion.findSubst.coef + '</span><span class="bottom">' + proportion.helpSubst.coef + '</span></span> = ' + proportion.findSubst.value + '</div><div class="formula">n(' + proportion.findSubst.subst + ') = ' + proportion.findSubst.value + ' моль</div>',
                                    "en": ""
                                },
                                "explanation": {
                                    "ru": '<div>Составим пропорцию по уравнению реакции для нахождения химического количества ' + proportion.findSubst.subst + ':</div><div class="formula"><span class="fraction"><span class="top">' + proportion.helpSubst.value + '</span><span class="bottom">' + proportion.helpSubst.coef + '</span></span> = <span class="fraction"><span class="top">x</span><span class="bottom">' + proportion.findSubst.coef + '</span></span></div><div>Найдем из пропорции x (то есть химическое количество ' + proportion.findSubst.subst + '):</div><div class="formula">x = <span class="fraction"><span class="top">' + proportion.helpSubst.value + ' &times; ' + proportion.findSubst.coef + '</span><span class="bottom">' + proportion.helpSubst.coef + '</span></span> = ' + proportion.findSubst.value + '</div><div class="formula">n(' + proportion.findSubst.subst + ') = ' + proportion.findSubst.value + ' моль</div>',
                                    "en": ""
                                }
                            };
                            $scope.answerSol.push(proportionStep);

                            // поле с найденным по пропорции химическим кол-вом для вещества, у которого что-то еще надо найти
                            $scope.quantityGivenField = {
                                "variable": "n_v",
                                "var": "n_v",
                                "value": proportion.findSubst.value,
                                "symbol": "n<sub>в-ва</sub>",
                                "subst": proportion.findSubst.subst
                            };
                        }
                        // химическое количество у в-ва по пропорции найдено, теперь ищем то, что надо найти по условию
                    }


                    // пробегаемся циклом по всем величинам, которые надо найти у в-ва, находим, вставляем в решение
                    for (var j = 0; j < $scope.findFieldsSol[i].fields.length; j++) {
                        if ($scope.findFieldsSol[i].fields[j].var == 'n_v' && $scope.quantityGivenField != undefined) {
                            // просто добавляем ответ
                            addToShortAnswers($scope.quantityGivenField);
                        } else {
                            var currentGiven = [];
                            for (var k = 0; k < $scope.givenFieldsSol.length; k++) {
                                if ($scope.findFieldsSol[i].subst == $scope.givenFieldsSol[k].subst) {
                                    currentGiven = $scope.givenFieldsSol[k].fields;
                                    break;
                                }
                            }

                            // если нашли химическое кол-во по пропорции
                            if ($scope.quantityGivenField != undefined) {
                                // проверка, введено ли химическое кол-во вручную, если да, то заменяем его значение
                                var isQuantityGivenFieldExists = false;
                                for (var k = 0; k < currentGiven.length; k++) {
                                    if (currentGiven[k].var == 'n_v') {
                                        currentGiven[k].value = $scope.quantityGivenField.value;
                                        isQuantityGivenFieldExists = true;
                                        break;
                                    }
                                }
                                if (!isQuantityGivenFieldExists) {
                                    currentGiven.push($scope.quantityGivenField);
                                }
                            }

                            if (currentGiven.length > 0) {
                                // заполняем vars значениями конкретной величины конкретного вещества
                                resetVars();
                                subst = $scope.findFieldsSol[i].subst;
                                substB = '(' + subst + ')';
                                for (var k = 0; k < currentGiven.length; k++) {
                                    vars[currentGiven[k].var] = currentGiven[k].value;
                                }
                                //$log.info('vars sol', vars);
                                findSolution($scope.findFieldsSol[i].fields[j].var);
                                //$log.info('part2 singleAnswer noclear', singleAnswer);
                                singleAnswer = clearAnswer(singleAnswer, $scope.findFieldsSol[i].fields[j].var);
                                //$log.info('part2 singleAnswer clear', singleAnswer);
                                if (singleAnswer.length > 0) {
                                    // добавляем ответ
                                    singleAnswer[singleAnswer.length - 1].subst = $scope.findFieldsSol[i].subst;
                                    addToShortAnswers(singleAnswer[singleAnswer.length - 1]);
                                } else {
                                    var solutionError = {
                                        "header": {
                                            "ru": "Не удалось найти " + $scope.findFieldsSol[i].fields[j].symbol + '(' + $scope.findFieldsSol[i].subst + ')',
                                            "en": "Ne udalos naiti " + $scope.findFieldsSol[i].fields[j].symbol
                                        },
                                        "description": {
                                            "ru": "<div>Для поиска " + $scope.findFieldsSol[i].fields[j].symbol + "(" + $scope.findFieldsSol[i].subst + ") попробуйте воспользоваться разделом:</div><br><div style='margin-top: 10px' class='btn btn-default' ui-sref='formulas'>Формулы для решения задач</div>",
                                            "en": "lol"
                                        }
                                    };
                                    $scope.solutionErrors.push(solutionError);
                                }
                                //$log.info('singleAnswerSol sol', singleAnswerSol);
                                if (singleAnswer.length > 0) {
                                    for (var k = 0; k < singleAnswer.length; k++) {
                                        $scope.answerSol.push(singleAnswer[k]);
                                    }

                                    // удалить из списка для дальнейшего поиска
                                    //$scope.findFieldsSol[i].fields.splice(j, 1);
                                    //j--;
                                    //$log.info('findFieldsDel', $scope.findFieldsSol[i].fields);
                                }
                                $scope.answerSol = deleteRepeatingsInSteps($scope.answerSol);
                            }

                            // если не получилось даже дойти до пропорции
                            if ($scope.answerSol.length == 0) {
                                var solutionError = {
                                    "header": {
                                        "ru": "Не удалось ничего найти",
                                        "en": "Ne udalos naiti "
                                    },
                                    "description": {
                                        "ru": "Перепроверь, правильно ли все заполнено, или попробуй воспользоваться разделом:</div><br><div style='margin-top: 10px' class='btn btn-default' ui-sref='formulas'>Формулы для решения задач</div>",
                                        "en": "lol"
                                    }
                                };
                                $scope.solutionErrors.push(solutionError);
                            }
                        }
                    }

                }



            }

            // заполнение массива для коротких ответов в самом конце решения. Например: m(Cu) = 20 г
            function addToShortAnswers(lastStep) {
                for (var i = 0; i < variablesList.length; i++) {
                    if (variablesList[i].var == lastStep.variable) {
                        var singleShortAnswer = {
                            "symbol": variablesList[i].symbol,
                            "value": lastStep.value,
                            "measures": variablesList[i].measures
                        };
                        if (!$scope.solver.isSimple) {
                            singleShortAnswer.subst = lastStep.subst;
                        }
                        $scope.shortAnswers.push(singleShortAnswer);
                        break;
                    }
                }
            }


            // Удаление повторяющихся шагов в разных answer. Т.е., чтобы при поиске новой величины, старые поля не дублировались
            function deleteRepeatingsInAnswers() {
                if ($scope.answers.length > 1) {
                    for (var i = 1; i < $scope.answers.length; i++) {
                        for (var j = 0; j < i; j++) {
                            for (var k = 0; k < $scope.answers[i].length; k++) {
                                for (var l = 0; l < $scope.answers[j].length; l++) {
                                    if ($scope.answers[i][k] == $scope.answers[j][l]) {
                                        $scope.answers[j].splice(l, 1);
                                        l--;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            deleteRepeatingsInAnswers();

            function deleteRepeatingsInSteps(steps) {
                var cleanedSteps = [];
                for (var i = 0; i < steps.length; i++) {
                    var exists = false;
                    for (var j = 0; j < cleanedSteps.length; j++) {
                        if (steps[i].record.ru == cleanedSteps[j].record.ru) {
                            exists = true;
                            break;
                        }
                    }
                    if (!exists) {
                        cleanedSteps.push(steps[i]);
                    }
                }
                return cleanedSteps;
            }

            // Обрезание решения и вывод просьбы о покупке для бесплатных юзеров
            function cutAnswerForFree() {
                if ($scope.solver.isSimple) {
                    if ($scope.answers.length > 0) {
                        $scope.gotoProShow = false;
                        if (!appConfigurator.isPurchased()) {
                            if ($scope.answers.length == 1) {
                                if ($scope.answers[0].length >= 2) {
                                    $scope.gotoProShow = true;
                                    var steps = $scope.answers[0];
                                    $scope.answers[0] = [];
                                    if (steps.length == 2) {
                                        $scope.answers[0].push(steps[0]);
                                    } else {
                                        $scope.answers[0].push(steps[0]);
                                        $scope.answers[0].push(steps[1]);
                                    }
                                }
                            } else {
                                $scope.gotoProShow = true;
                                if ($scope.answers.length == 2 && $scope.answers[0].length == 1 && $scope.answers[1].length == 1) {
                                    $scope.answers.pop();
                                } else if ($scope.answers[0].length == 1) {
                                    var steps = $scope.answers[1];
                                    $scope.answers[1] = [];
                                    $scope.answers[1].push(steps[0]);
                                } else {
                                    var allAnswers = $scope.answers;
                                    $scope.answers = [];
                                    $scope.answers[0] = [];
                                    $scope.answers[0].push(allAnswers[0]);
                                    $scope.answers[0].push(allAnswers[1]);
                                }
                            }
                        }
                    }
                } else if (!$scope.solver.isSimple) {
                    if ($scope.answerSol.length > 0) {
                        $scope.gotoProShow = false;
                        if (!appConfigurator.isPurchased()) {
                            if ($scope.answerSol.length > 1) {
                                if ($scope.answerSol.length == 2) {
                                    $scope.answerSol = [
                                        $scope.answerSol[0]
                                    ];
                                } else if ($scope.answerSol.length > 2) {
                                    $scope.answerSol = [
                                        $scope.answerSol[0],
                                        $scope.answerSol[1]
                                    ];
                                }
                                $scope.gotoProShow = true;
                            }
                        }
                    }
                }
            }

            if (($scope.answers != undefined && $scope.answers.length > 0 && $scope.solver.isSimple) || ($scope.answerSol != undefined && $scope.answerSol.length > 0 && !$scope.solver.isSimple)) {
                $scope.solutionWaitingShow = false;
                cutAnswerForFree()
                $scope.readySolutionShow = true;
            }
            if ($scope.solutionErrors.length > 0) {
                //$log.info($scope.solutionErrors);
                $scope.solutionWaitingShow = false;
                $scope.solutionErrorsShow = true;
            }



            // SOLUTION: решение до ответа для каждого, потом отбрасывание лишнего у каждого, потом объединение уникальных

            function clearAnswer(answer, variable) {

                // удаление степов с undefined
                var answerCopy = [];
                for (var i = 0; i < answer.length; i++) {
                    if (answer[i].variable != undefined) {
                        answerCopy.push(answer[i]);
                    }
                }

                // удаление лишних вычисленных данных, остается только то, что до искомой величины
                for (var i = answerCopy.length - 1; i >= 0; i--) {
                    if (answerCopy[i].variable != variable) {
                        answerCopy.pop();
                    } else break;
                }
                // здесь поставил var
                var answer = answerCopy;
                //$log.info(answerCopy);
                findDependence();

                // рекурсией добавляются все связанные шаги
                function findDependence() {
                    if (answer[answer.length - 1] != undefined) {
                        var dependenciesArray = answer[answer.length - 1].dependencies;
                        var nearest = answer[answer.length - 1];
                        answerCopy.unshift(nearest);

                        var depSteps = [];
                        depSteps.push(answer[answer.length - 1]);
                        addDependentSteps(answer[answer.length - 1]);
                        answer = depSteps;
                    }

                    function addDependentSteps(step) {
                        /*
                        $log.info('addDependentSteps started for ', step);
                        answer.splice(answer.indexOf(step), 1);
                        */
                        for (var i = 0; i < step.dependencies.length; i++) {
                            if (findNumberInList(step.dependencies[i]) != false) {
                                var currentStep = answer[findNumberInList(step.dependencies[i])];
                                depSteps.unshift(currentStep);
                                $log.info('added new step at the start depSteps', currentStep);
                                addDependentSteps(currentStep);
                                //break;
                            }
                        }
                    }



                    function findNumberInList(variable) {
                        var isExists = false;
                        for (var i = 0; i < answer.length; i++) {
                            if (answer[i].variable == variable) {
                                isExists = true;
                                break;
                            }
                        }
                        if (isExists) {
                            return i;
                        } else return isExists;
                    }
                    /*
                    function findMaxIndex(array) {
                      var maxIndex = 0;
                      for (var i = 0; i < array.length; i++) {
                        var index = findStepWithVar(array[i]);
                        if (index > maxIndex) {
                          maxIndex = index;
                        }
                      }
                      return maxIndex;

                      function findStepWithVar(varName) {
                        for (var i = 0; i < answer.length; i++) {
                          if (answer[i].variable == varName) {
                            break;
                          }
                        }
                        return i;
                      }
                    }
                    */
                }


                return answer;
            }
        }


        $scope.convertedMeasures = [];
        $scope.convertMeasures = function() {
            for (var i = 0; i < $scope.givenFields.length; i++) {
                var indexInVarList;
                for (var j = 0; j < variablesList.length; j++) {
                    if (variablesList[j].var == $scope.givenFields[i].var) {
                        indexInVarList = j;
                        break;
                    }
                }
                if ($scope.givenFields[i].measure != variablesList[indexInVarList].measures.ru[0] && indexInVarList != undefined) {
                    var multiplier = variablesList[indexInVarList].measures.multipliers[variablesList[indexInVarList].measures.ru.indexOf($scope.givenFields[i].measure)];
                    var convertedMeasure = {
                        "var": $scope.givenFields[i].measure,
                        "symbol": $scope.givenFields[i].symbol,
                        "measure": $scope.givenFields[i].measure,
                        "measure2": variablesList[indexInVarList].measures.ru[0],
                        "multiplier": multiplier,
                        "value": $scope.givenFields[i].value,
                        "value2": roundValue($scope.givenFields[i].value * multiplier, $scope.givenFields[i].measure)
                    };
                    if (!$scope.solver.isSimple) {
                        convertedMeasure.subst = $scope.givenFields[i].subst;
                    }
                    $scope.convertedMeasures.push(convertedMeasure);

                    // замена в старом массиве на конвертированные величины
                    $scope.givenFields[i].value = roundValue($scope.givenFields[i].value * multiplier, $scope.givenFields[i].measure);
                    $scope.givenFields[i].measure = variablesList[indexInVarList].measures.ru[0];
                }
            }
        };
        // была величина не в си

        function fillUndefinedVars() {
            for (var i = 0; i < $scope.givenFields.length; i++) {
                vars[$scope.givenFields[i].var] = $scope.givenFields[i].value;
            }
        }

        function resetVars() {
            for (var variable in vars) {
                vars[variable] = undefined;
            }
            $log.info('resettedVars', vars);
            singleAnswer = [];
            subst = '';
            substB = '';
        }


        $scope.stepContentHide = [];
        $scope.stepContentInDetailShow = [];

        $scope.showStep = function(answerIndex, stepIndex) {
            $scope.stepContentHide = [];
            $scope.stepContentInDetailShow = [];

            if (stepIndex == undefined) {
                // тогда есть только stepIndex, но он будет answerindex
                $scope.stepContentHide[answerIndex] = false;
                $scope.stepContentInDetailShow[answerIndex] = false;
            } else {
                $scope.stepContentHide[answerIndex] = [];
                $scope.stepContentInDetailShow[answerIndex] = [];
                $scope.stepContentHide[answerIndex][stepIndex] = false;
                $scope.stepContentInDetailShow[answerIndex][stepIndex] = false;
            }
        };

        $scope.showStepInDetail = function(answerIndex, stepIndex) {
            $scope.stepContentHide = [];
            $scope.stepContentInDetailShow = [];

            if (stepIndex == undefined) {
                // тогда есть только stepIndex, но он будет answerindex
                $scope.stepContentHide[answerIndex] = true;
                $scope.stepContentInDetailShow[answerIndex] = true;
            } else {
                $scope.stepContentHide[answerIndex] = [];
                $scope.stepContentInDetailShow[answerIndex] = [];
                $scope.stepContentHide[answerIndex][stepIndex] = true;
                $scope.stepContentInDetailShow[answerIndex][stepIndex] = true;
            }
        };



        var steps = [];

        function findSolution(variable) {
            singleAnswer = [];
            steps = [];
            var LIMIT = 10;
            var i = 0;
            while (vars[variable] == undefined && i < LIMIT) {

                tryToFind('M_v');
                tryToFind('M_r');
                tryToFind('m_v');
                tryToFind('m_r');
                tryToFind('m_smesi');
                tryToFind('m_raspl');
                tryToFind('m_rud');
                tryToFind('n_v');
                tryToFind('V_v');
                tryToFind('V_n');
                tryToFind('V_r');
                tryToFind('V_smesi');
                tryToFind('V_raspl');
                tryToFind('V_rud');
                tryToFind('w_v');
                //tryToFind('w_vyh');
                tryToFind('fi');
                //tryToFind('fi_vyh');
                tryToFind('ro_v');
                tryToFind('ro_r');
                tryToFind('ro_smesi');
                tryToFind('ro_raspl');
                tryToFind('ro_rud');
                tryToFind('ma_v');
                tryToFind('N_v');
                tryToFind('P');
                tryToFind('T');
                tryToFind('C_v');
                tryToFind('D_h');
                tryToFind('D_vozd');

                /*
                for (var varName in vars) {
                  tryToFind(varName);
                }
                */
                i++;
            }
            if (vars[variable] != undefined) {
                singleAnswer = steps;
            }
        }


        function tryToFind(variable) {
            var step = {};

            switch (variable) {

                case 'M_v':

                    if (vars.M_v == undefined) {
                        if (subst != '') {
                            var list = new Array();
                            list.parse = $rootScope.parse;
                            // посчитать молярную массу
                            function calculateMolarMass() {
                                vars.M_v = 0;
                                subst = subst.replace(/\s+/g, '');
                                list.parse(subst, 1);
                                for (var i = 0; i < list.length; i++) {
                                    vars.M_v += Math.round(list[i]["coef"] * $rootScope.table["table"][list[i]["elements"]]["atomMass"]);
                                }
                            }
                            calculateMolarMass();

                            function generateExplanation(lang) {
                                var explanation = {};
                                if (list.length > 1) {
                                    explanation.ru = '<div>Откроем таблицу Менделеева и посчитаем молярную массу вещества ' + substB + ', суммируя молярные массы простых веществ, которые входят в его состав.</div><div class="remark">Очень подробно это объясняется в разделе "Найти молярную массу"</div><div>';
                                    explanation.en = '';
                                    explanation.ru += '<span>M(' + subst + ')</span> = <span>';
                                    explanation.en += '<span>M(' + subst + ')</span> = <span>';
                                    for (var i = 0; i < list.length; i++) {
                                        explanation.ru += '<span>M(';
                                        explanation.en += '<span>M(';
                                        if (list[i].coef > 1) {
                                            explanation.ru += '<span>' + list[i].coef + '</span>';
                                            explanation.en += '<span>' + list[i].coef + '</span>';
                                        }
                                        explanation.ru += '<span>' + $rootScope.table.table[list[i].elements].element + '</span>)</span>';
                                        explanation.en += '<span>' + $rootScope.table.table[list[i].elements].element + '</span>)</span>';
                                        if (list.indexOf(list[i]) != list.length - 1) {
                                            explanation.ru += '<span> + </span>';
                                            explanation.en += '<span> + </span>';
                                        }
                                    }
                                    explanation.ru += '</span> = <span>' + vars.M_v + ' г/моль</span></div>';
                                    explanation.en += '</span> = <span>' + vars.M_v + ' g/mole</span></div>';
                                } else {
                                    explanation.ru = '<div>Откроем таблицу Менделеева и найдем в ней молярную массу вещества ' + substB + '</div><div>M' + substB + ' = ' + vars.M_v + ' г/моль</div>';
                                    explanation.en = 'Nope, 1 el';
                                }
                                return explanation[lang];
                            };

                            //$log.info(generateExplanation('ru'));

                            step = {
                                "variable": "M_v",
                                "value": vars.M_v,
                                "dependencies": [],
                                "record": {
                                    "ru": "M" + substB + " = " + vars.M_v + " г/моль",
                                    "en": "sdf"
                                },
                                "explanation": {
                                    "ru": generateExplanation('ru'),
                                    "en": generateExplanation('en')
                                }
                            };
                        } else if (vars.n_v != undefined && vars.m_v != undefined) {
                            vars.M_v = roundValue(vars.m_v / vars.n_v, 'M_v');
                            step = {
                                "variable": "M_v",
                                "value": vars.M_v,
                                "dependencies": ['m_v', 'n_v'],
                                "record": {
                                    "ru": '<div><span class="formula">n = <span class="fraction"><span class="top">m</span><span class="bottom">M</span></span></span></div><div><span class="formula">M<sub>в-ва</sub>' + substB + ' = <span class="fraction"><span class="top">m<sub>в-ва</sub>' + substB + '</span><span class="bottom">n<sub>в-ва</sub>' + substB + '</span></span> = <span class="fraction"><span class="top">' + vars.m_v + ' г</span><span class="bottom">' + vars.n_v + ' моль</span></span> = ' + vars.M_v + ' г/моль</span></div>',
                                    "en": "sdf"
                                },
                                "explanation": {
                                    "ru": '<div>Запишем формулу нахождения химического количества (n) через массу (m) и молярную массу (M) вещества:</div><div><span class="formula">n = <span class="fraction"><span class="top">m</span><span class="bottom">M</span></span></span></div><div>Выразим из этой формулы молярную массу (M). Химическое количество (n) и масса (m) нам известны, поэтому мы можем найти молярную массу (M):</div><div><span class="formula">M<sub>в-ва</sub>' + substB + ' = <span class="fraction"><span class="top">m<sub>в-ва</sub>' + substB + '</span><span class="bottom">n<sub>в-ва</sub>' + substB + '</span></span> = <span class="fraction"><span class="top">' + vars.m_v + ' г</span><span class="bottom">' + vars.n_v + ' моль</span></span> = ' + vars.M_v + ' г/моль</span></div>',
                                    "en": "вот так вот"
                                }
                            };
                        } else if (vars.D_h != undefined) {
                            vars.M_v = roundValue(vars.D_h * constants.M_h.value, 'M_v');
                            step = {
                                "variable": "M_v",
                                "value": vars.M_v,
                                "dependencies": ['d_h'],
                                "record": {
                                    "ru": '<div><span class="formula">D<sub>по H<sub>2</sub></sub> = <span class="fraction"><span class="top">M<sub>в-ва</sub></span><span class="bottom">M(H<sub>2</sub>)</span></span></span></div><div><span class="formula">M<sub>в-ва</sub> = D<sub>по H<sub>2</sub></sub> &times; M(H<sub>2</sub>) = ' + vars.D_h + ' &times; ' + constants.M_h.record + ' г/моль = ' + vars.M_v + ' г/моль</span></div>',
                                    "en": "sdf"
                                },
                                "explanation": {
                                    "ru": '<div>Относительная плотность вещества по водороду - это отношение молярной массы этого вещества к молярной массе водорода. Формула для расчета относительной плотности по водороду:</div><div><span class="formula">D<sub>по H<sub>2</sub></sub> = <span class="fraction"><span class="top">M<sub>в-ва</sub></span><span class="bottom">M(H<sub>2</sub>)</span></span></span></div><div>Относительную плотность по водороду и молярную массу водорода мы знаем, так что выразим из этой формулы молярную массу (M) вещества и найдем её:</div><div><span class="formula">M<sub>в-ва</sub> = D<sub>по H2</sub></sub> &times; M<sub>H<sub>2</sub></sub> = ' + vars.D_h + ' &times; ' + constants.M_h.record + ' г/моль = ' + vars.M_v + ' г/моль</span></div>',
                                    "en": "вот так вот"
                                }
                            };
                        } else if (vars.D_vozd != undefined) {
                            vars.M_v = roundValue(vars.D_vozd * constants.M_vozd.value, 'M_v');
                            step = {
                                "variable": "M_v",
                                "value": vars.M_v,
                                "dependencies": ['d_h'],
                                "record": {
                                    "ru": '<div><span class="formula">D<sub>по возд.</sub> = <span class="fraction"><span class="top">M<sub>в-ва</sub></span><span class="bottom">M<sub>возд.</sub></span></span></span></div><div><span class="formula">M<sub>в-ва</sub> = D<sub>по возд.</sub> &times; M<sub>возд.</sub> = ' + vars.D_vozd + ' &times; ' + constants.M_vozd.record + ' г/моль = ' + vars.M_v + ' г/моль</span></div>',
                                    "en": "sdf"
                                },
                                "explanation": {
                                    "ru": '<div>Относительная плотность вещества по воздуху - это отношение молярной массы этого вещества к молярной массе воздуха. Формула для расчета относительной плотности по воздуху:</div><div><span class="formula">D<sub>по возд.</sub> = <span class="fraction"><span class="top">M<sub>в-ва</sub></span><span class="bottom">M<sub>возд.</sub></span></span></span></div><div>Относительную плотность по воздуху и молярную массу воздуха мы знаем, так что выразим из этой формулы молярную массу (M) вещества и найдем её:</div><div><span class="formula">M<sub>в-ва</sub> = D<sub>по возд.</sub></sub> &times; M<sub>возд.</sub> = ' + vars.D_vozd + ' &times; ' + constants.M_vozd.record + ' г/моль = ' + vars.M_v + ' г/моль</span></div>',
                                    "en": "вот так вот"
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'M_r':

                    if (vars.M_r == undefined) {

                        // здесь было условие на расчет по формуле в-ва, но все-таки лучше в 2 шага. сначала M, потом Ar

                        if (vars.M_v != undefined) {
                            vars.M_r = vars.M_v;
                            step = {
                                "variable": "M_r",
                                "value": vars.M_r,
                                "dependencies": [],
                                "record": {
                                    "ru": 'M<sub>r</sub>' + substB + ' = M' + substB + ' = ' + vars.M_r,
                                    "en": "sdf"
                                },
                                "explanation": {
                                    "ru": '<div>Относительная молекулярная масса численно равна молярной массе, а ее мы знаем.</div><div>M<sub>r</sub>' + substB + ' = M' + substB + ' = ' + vars.M_r + '</div>',
                                    "en": "вот так вот"
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }

                    break;


                case 'm_v':

                    if (vars.m_v == undefined) {
                        if (vars.n_v != undefined && vars.M_v != undefined) {
                            vars.m_v = roundValue(vars.n_v * vars.M_v, 'm_v');
                            step = {
                                "variable": "m_v",
                                "value": vars.m_v,
                                "dependencies": [
                                    "n_v",
                                    "M_v"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>n = <span class='fraction'><span class='top'>m</span><span class='bottom'>M</span></span>;</div><div class='formula'>m" + substB + " = n" + substB + " &times; M" + substB + " = " + vars.n_v + " моль &times; " + vars.M_v + " г/моль = " + vars.m_v + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": "<div translate>MVEXPLATION</div><div class='formula'>n = <span class='fraction'><span class='top'>m</span><span class='bottom'>M</span></span></div><div>Из этой формулы выразим массу вещества и найдем ее значение:</div><div class='formula'>m" + substB + " = n" + substB + " &times; M" + substB + " = " + vars.n_v + " моль &times; " + vars.M_v + " г/моль = " + vars.m_v + " г</div>"
                            };
                        } else if (vars.ro_v != undefined && vars.V_v != undefined) {
                            vars.m_v = roundValue(vars.ro_v * vars.V_v, 'm_v');
                            step = {
                                "variable": "m_v",
                                "dependencies": [
                                    "ro_v",
                                    "V_v"
                                ],
                                "value": vars.m_v,
                                "record": {
                                    "ru": "<div class='formula'>m = ρ &times; V</div><div class='formula'>m" + substB + " = ρ" + substB + " &times; V" + substB + " = " + vars.ro_v + " г/дм<sup>3</sup> &times; " + vars.V_v + " дм<sup>3</sup> = " + vars.m_v + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая массу (m), плотность (ρ) и объём (V), записывается так:</div><div class='formula'>m = ρ &times; V</div><div>По этой формуле найдем массу вещества " + subst + ":</div><div class='formula'>m" + substB + " = ρ" + substB + " &times; V" + substB + " = " + vars.ro_v + " г/дм<sup>3</sup> &times; " + vars.V_v + " дм<sup>3</sup> = " + vars.m_v + " г</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.ma_v != undefined && vars.N_v != undefined) {
                            vars.m_v = roundValue(vars.ma_v * vars.N_v, 'm_v');
                            step = {
                                "variable": "m_v",
                                "dependencies": [
                                    "ma_v",
                                    "N_v"
                                ],
                                "value": vars.m_v,
                                "record": {
                                    "ru": "<div class='formula'>N = <span class='fraction'><span class='top'>m</span><span class='bottom'>m<sub>атома</sub></span></span></div><div class='formula'>m" + substB + " = N" + substB + " &times; m<sub>атома</sub>" + substB + " = " + vars.N_v + " &times; " + vars.ma_v + " г = " + vars.m_v + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая количество структурных единиц (N), массу (m) и массу атома (m<sub>атома</sub>), записывается так:</div><div class='formula'>N = <span class='fraction'><span class='top'>m</span><span class='bottom'>m<sub>атома</sub></span></span></div><div>Из этой формулы выразим массу вещества " + subst + ":</div><div class='formula'>m" + substB + " = N" + substB + " &times; m<sub>атома</sub>" + substB + " = " + vars.N_v + " &times; " + vars.ma_v + " г = " + vars.m_v + " г</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.m_r != undefined && vars.w_v != undefined) {
                            vars.m_v = roundValue(vars.m_r * vars.w_v / 100, 'm_v');
                            step = {
                                "variable": "m_v",
                                "dependencies": [
                                    "m_r",
                                    "w_v"
                                ],
                                "value": vars.m_v,
                                "record": {
                                    "ru": "<div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>р-ра</sub></span></span> &times; 100%</div><div class='formula'>m" + substB + " = <span class='fraction'><span class='top'>m<sub>р-ра</sub>" + substB + " &times; ω" + substB + "</span><span class='bottom'>100%</span></span> = <span class='fraction'><span class='top'>" + vars.m_r + " г &times; " + vars.w_v + "%</span><span class='bottom'>100%</span></span> = " + vars.m_v + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая массовую долю вещества (ω), массу вещества (m<sub>в-ва</sub>) и массу раствора (m<sub>р-ра</sub>), записывается так:</div><div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>р-ра</sub></span></span> &times; 100%</div><div>Из этой формулы выразим массу вещества " + subst + ":</div><div class='formula'>m" + substB + " = <span class='fraction'><span class='top'>m<sub>р-ра</sub>" + substB + " &times; ω" + substB + "</span><span class='bottom'>100%</span></span> = <span class='fraction'><span class='top'>" + vars.m_r + " г &times; " + vars.w_v + "%</span><span class='bottom'>100%</span></span> = " + vars.m_v + " г</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.m_smesi != undefined && vars.w_v != undefined) {
                            vars.m_v = roundValue(vars.m_smesi * vars.w_v / 100, 'm_v');
                            step = {
                                "variable": "m_v",
                                "dependencies": [
                                    "m_smesi",
                                    "w_v"
                                ],
                                "value": vars.m_v,
                                "record": {
                                    "ru": "<div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>смеси</sub></span></span> &times; 100%</div><div class='formula'>m" + substB + " = <span class='fraction'><span class='top'>m<sub>смеси</sub>" + substB + " &times; ω" + substB + "</span><span class='bottom'>100%</span></span> = <span class='fraction'><span class='top'>" + vars.m_smesi + " г &times; " + vars.w_v + "%</span><span class='bottom'>100%</span></span> = " + vars.m_v + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая массовую долю вещества (ω), массу вещества (m<sub>в-ва</sub>) и массу смеси веществ (m<sub>смеси</sub>), записывается так:</div><div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>смеси</sub></span></span> &times; 100%</div><div>Из этой формулы выразим массу вещества " + subst + ":</div><div class='formula'>m" + substB + " = <span class='fraction'><span class='top'>m<sub>смеси</sub>" + substB + " &times; ω" + substB + "</span><span class='bottom'>100%</span></span> = <span class='fraction'><span class='top'>" + vars.m_smesi + " г &times; " + vars.w_v + "%</span><span class='bottom'>100%</span></span> = " + vars.m_v + " г</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.m_raspl != undefined && vars.w_v != undefined) {
                            vars.m_v = roundValue(vars.m_raspl * vars.w_v / 100, 'm_v');
                            step = {
                                "variable": "m_v",
                                "dependencies": [
                                    "m_raspl",
                                    "w_v"
                                ],
                                "value": vars.m_v,
                                "record": {
                                    "ru": "<div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>распл.</sub></span></span> &times; 100%</div><div class='formula'>m" + substB + " = <span class='fraction'><span class='top'>m<sub>распл.</sub>" + substB + " &times; ω" + substB + "</span><span class='bottom'>100%</span></span> = <span class='fraction'><span class='top'>" + vars.m_raspl + " г &times; " + vars.w_v + "%</span><span class='bottom'>100%</span></span> = " + vars.m_v + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая массовую долю вещества (ω), массу вещества (m<sub>в-ва</sub>) и массу расплава (m<sub>распл.</sub>), записывается так:</div><div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>распл.</sub></span></span> &times; 100%</div><div>Из этой формулы выразим массу вещества " + subst + ":</div><div class='formula'>m" + substB + " = <span class='fraction'><span class='top'>m<sub>распл.</sub>" + substB + " &times; ω" + substB + "</span><span class='bottom'>100%</span></span> = <span class='fraction'><span class='top'>" + vars.m_raspl + " г &times; " + vars.w_v + "%</span><span class='bottom'>100%</span></span> = " + vars.m_v + " г</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.m_rud != undefined && vars.w_v != undefined) {
                            vars.m_v = roundValue(vars.m_rud * vars.w_v / 100, 'm_v');
                            step = {
                                "variable": "m_v",
                                "dependencies": [
                                    "m_rud",
                                    "w_v"
                                ],
                                "value": vars.m_v,
                                "record": {
                                    "ru": "<div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>руды</sub></span></span> &times; 100%</div><div class='formula'>m" + substB + " = <span class='fraction'><span class='top'>m<sub>руды</sub>" + substB + " &times; ω" + substB + "</span><span class='bottom'>100%</span></span> = <span class='fraction'><span class='top'>" + vars.m_rud + " г &times; " + vars.w_v + "%</span><span class='bottom'>100%</span></span> = " + vars.m_v + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая массовую долю вещества (ω), массу вещества (m<sub>в-ва</sub>) и массу руды (m<sub>руды</sub>), записывается так:</div><div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>руды</sub></span></span> &times; 100%</div><div>Из этой формулы выразим массу вещества " + subst + ":</div><div class='formula'>m" + substB + " = <span class='fraction'><span class='top'>m<sub>руды</sub>" + substB + " &times; ω" + substB + "</span><span class='bottom'>100%</span></span> = <span class='fraction'><span class='top'>" + vars.m_rud + " г &times; " + vars.w_v + "%</span><span class='bottom'>100%</span></span> = " + vars.m_v + " г</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }

                    break;


                case 'm_r':

                    if (vars.m_r == undefined) {
                        if (vars.ro_r != undefined && vars.V_r != undefined) {
                            vars.m_r = roundValue(vars.ro_r * vars.V_r, 'm_r');
                            step = {
                                "variable": "m_r",
                                "value": vars.m_r,
                                "dependencies": [
                                    "ro_r",
                                    "V_r"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>m = ρ &times; V</div><div class='formula'>m<sub>р-ра " + subst + "</sub> = ρ<sub>р-ра " + subst + "</sub> &times; V<sub>р-ра " + subst + "</sub> = " + vars.ro_r + " г/дм<sup>3</sup> &times; " + vars.V_r + " дм<sup>3</sup> = " + vars.m_r + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая массу (m), плотность (ρ) и объём (V), записывается так:</div><div class='formula'>m = ρ &times; V</div><div>По этой формуле найдем массу раствора " + subst + ":</div><div class='formula'>m<sub>р-ра " + subst + "</sub> = ρ<sub>р-ра " + subst + "</sub> &times; V<sub>р-ра " + subst + "</sub> = " + vars.ro_r + " г/дм<sup>3</sup> &times; " + vars.V_r + " дм<sup>3</sup> = " + vars.m_r + " г</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.w_v != undefined && vars.m_v != undefined) {
                            vars.m_r = roundValue(vars.m_v * 100 / vars.w_v, 'm_r');
                            step = {
                                "variable": "m_r",
                                "dependencies": [
                                    "w_v",
                                    "m_v"
                                ],
                                "value": vars.m_r,
                                "record": {
                                    "ru": "<div class='formula'>ω<sub>в-ва</sub> = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>р-ра</sub></span></span> &times; 100%</div><div class='formula'>m<sub>р-ра " + subst + "</sub> = <span class='fraction'><span class='top'>m<sub>в-ва " + subst + "</sub></span><span class='bottom'>ω<sub>в-ва</sub>" + substB + "</span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.w_v + "%</span></span> &times; 100% = " + vars.m_r + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Так выглядит формула, связывающая массовую долю вещества (ω<sub>в-ва</sub>), массу вещества (m<sub>в-ва</sub>) и массу раствора (m<sub>р-ра</sub>):</div><div class='formula'>ω<sub>в-ва</sub> = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>р-ра</sub></span></span> &times; 100%</div><div>Из этой формулы выразим массу раствора " + subst + ":</div><div class='formula'>m<sub>р-ра " + subst + "</sub> = <span class='fraction'><span class='top'>m<sub>в-ва " + subst + "</sub></span><span class='bottom'>ω<sub>в-ва</sub>" + substB + "</span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.w_v + "%</span></span> &times; 100% = " + vars.m_r + " г</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'm_smesi':

                    if (vars.m_smesi == undefined) {
                        if (vars.ro_smesi != undefined && vars.V_smesi != undefined) {
                            vars.m_smesi = roundValue(vars.ro_smesi * vars.V_smesi, 'm_smesi');
                            step = {
                                "variable": "m_smesi",
                                "value": vars.m_smesi,
                                "dependencies": [
                                    "ro_smesi",
                                    "V_smesi"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>m = ρ &times; V</div><div class='formula'>m<sub>смеси " + subst + "</sub> = ρ<sub>смеси " + subst + "</sub> &times; V<sub>смеси " + subst + "</sub> = " + vars.ro_smesi + " г/дм<sup>3</sup> &times; " + vars.V_smesi + " дм<sup>3</sup> = " + vars.m_smesi + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая массу (m), плотность (ρ) и объём (V), записывается так:</div><div class='formula'>m = ρ &times; V</div><div>По этой формуле найдем массу смеси " + subst + ":</div><div class='formula'>m<sub>смеси " + subst + "</sub> = ρ<sub>смеси " + subst + "</sub> &times; V<sub>смеси " + subst + "</sub> = " + vars.ro_smesi + " г/дм<sup>3</sup> &times; " + vars.V_smesi + " дм<sup>3</sup> = " + vars.m_smesi + " г</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.w_v != undefined && vars.m_v != undefined) {
                            vars.m_smesi = roundValue(vars.m_v * 100 / vars.w_v, 'm_r');
                            step = {
                                "variable": "m_smesi",
                                "dependencies": [
                                    "w_v",
                                    "m_v"
                                ],
                                "value": vars.m_smesi,
                                "record": {
                                    "ru": "<div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>смеси</sub></span></span> &times; 100%</div><div class='formula'>m<sub>смеси " + subst + "</sub> = <span class='fraction'><span class='top'>m<sub>в-ва " + subst + "</sub></span><span class='bottom'>ω" + substB + "</span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.w_v + "%</span></span> &times; 100% = " + vars.m_smesi + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Так выглядит формула, связывающая массовую долю вещества (ω), массу вещества (m<sub>в-ва</sub>) и массу смеси (m<sub>смеси</sub>):</div><div class='formula'>ω = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>смеси</sub></span></span> &times; 100%</div><div>Из этой формулы выразим массу смеси " + subst + ":</div><div class='formula'>m<sub>смеси " + subst + "</sub> = <span class='fraction'><span class='top'>m<sub>в-ва " + subst + "</sub></span><span class='bottom'>ω" + substB + "</span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.w_v + "%</span></span> &times; 100% = " + vars.m_smesi + " г</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;

                case 'm_raspl':

                    if (vars.m_raspl == undefined) {
                        if (vars.ro_raspl != undefined && vars.V_raspl != undefined) {
                            vars.m_raspl = roundValue(vars.ro_raspl * vars.V_raspl, 'm_raspl');
                            step = {
                                "variable": "m_raspl",
                                "value": vars.m_raspl,
                                "dependencies": [
                                    "ro_raspl",
                                    "V_raspl"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>m = ρ &times; V</div><div class='formula'>m<sub>распл. " + subst + "</sub> = ρ<sub>распл. " + subst + "</sub> &times; V<sub>распл. " + subst + "</sub> = " + vars.ro_raspl + " г/дм<sup>3</sup> &times; " + vars.V_raspl + " дм<sup>3</sup> = " + vars.m_raspl + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая массу (m), плотность (ρ) и объём (V), записывается так:</div><div class='formula'>m = ρ &times; V</div><div>По этой формуле найдем массу расплава " + subst + ":</div><div class='formula'>m<sub>распл. " + subst + "</sub> = ρ<sub>распл. " + subst + "</sub> &times; V<sub>распл. " + subst + "</sub> = " + vars.ro_raspl + " г/дм<sup>3</sup> &times; " + vars.V_raspl + " дм<sup>3</sup> = " + vars.m_raspl + " г</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.w_v != undefined && vars.m_v != undefined) {
                            vars.m_raspl = roundValue(vars.m_v * 100 / vars.w_v, 'm_raspl');
                            step = {
                                "variable": "m_raspl",
                                "dependencies": [
                                    "w_v",
                                    "m_v"
                                ],
                                "value": vars.m_raspl,
                                "record": {
                                    "ru": "<div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>распл.</sub></span></span> &times; 100%</div><div class='formula'>m<sub>распл. " + subst + "</sub> = <span class='fraction'><span class='top'>m<sub>в-ва " + subst + "</sub></span><span class='bottom'>ω" + substB + "</span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.w_v + "%</span></span> &times; 100% = " + vars.m_raspl + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Так выглядит формула, связывающая массовую долю вещества (ω), массу вещества (m<sub>в-ва</sub>) и массу расплава (m<sub>распл.</sub>):</div><div class='formula'>ω = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>распл.</sub></span></span> &times; 100%</div><div>Из этой формулы выразим массу расплава " + subst + ":</div><div class='formula'>m<sub>распл. " + subst + "</sub> = <span class='fraction'><span class='top'>m<sub>в-ва " + subst + "</sub></span><span class='bottom'>ω" + substB + "</span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.w_v + "%</span></span> &times; 100% = " + vars.m_raspl + " г</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'm_rud':

                    if (vars.m_rud == undefined) {
                        if (vars.ro_rud != undefined && vars.V_rud != undefined) {
                            vars.m_rud = roundValue(vars.ro_rud * vars.V_rud, 'm_rud');
                            step = {
                                "variable": "m_rud",
                                "value": vars.m_rud,
                                "dependencies": [
                                    "ro_rud",
                                    "V_rud"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>m = ρ &times; V</div><div class='formula'>m<sub>руды " + subst + "</sub> = ρ<sub>руды " + subst + "</sub> &times; V<sub>руды " + subst + "</sub> = " + vars.ro_rud + " г/дм<sup>3</sup> &times; " + vars.V_rud + " дм<sup>3</sup> = " + vars.m_rud + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая массу (m), плотность (ρ) и объём (V), записывается так:</div><div class='formula'>m = ρ &times; V</div><div>По этой формуле найдем массу руды " + subst + ":</div><div class='formula'>m<sub>руды " + subst + "</sub> = ρ<sub>руды " + subst + "</sub> &times; V<sub>руды " + subst + "</sub> = " + vars.ro_rud + " г/дм<sup>3</sup> &times; " + vars.V_rud + " дм<sup>3</sup> = " + vars.m_rud + " г</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.w_v != undefined && vars.m_v != undefined) {
                            vars.m_rud = roundValue(vars.m_v * 100 / vars.w_v, 'm_r');
                            step = {
                                "variable": "m_rud",
                                "dependencies": [
                                    "w_v",
                                    "m_v"
                                ],
                                "value": vars.m_rud,
                                "record": {
                                    "ru": "<div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>руды</sub></span></span> &times; 100%</div><div class='formula'>m<sub>руды " + subst + "</sub> = <span class='fraction'><span class='top'>m<sub>в-ва " + subst + "</sub></span><span class='bottom'>ω" + substB + "</span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.w_v + "%</span></span> &times; 100% = " + vars.m_rud + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Так выглядит формула, связывающая массовую долю вещества (ω), массу вещества (m<sub>в-ва</sub>) и массу руды (m<sub>руды</sub>):</div><div class='formula'>ω = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>руды</sub></span></span> &times; 100%</div><div>Из этой формулы выразим массу руды " + subst + ":</div><div class='formula'>m<sub>руды " + subst + "</sub> = <span class='fraction'><span class='top'>m<sub>в-ва " + subst + "</sub></span><span class='bottom'>ω" + substB + "</span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.w_v + "%</span></span> &times; 100% = " + vars.m_rud + " г</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'n_v':
                    if (vars.n_v == undefined) {
                        if (vars.C_v != undefined && vars.V_r != undefined) {
                            vars.n_v = roundValue(vars.C_v * vars.V_r, 'n_v');
                            step = {
                                "variable": "n_v",
                                "value": vars.n_v,
                                "dependencies": [
                                    "C_v",
                                    "V_r"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>С = <span class='fraction'><span class='top'>n</span><span class='bottom'>V<sub>р-ра</sub></span></span></div><div class='formula'>n" + substB + " = С" + substB + " &times;  V<sub>р-ра</sub>" + substB + " = " + vars.C_v + " моль/дм<sup>3</sup> &times; " + vars.V_r + " дм<sup>3</sup> = " + vars.n_v + " моль</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Существует такая формула для нахождения молярной концентрации (С):</div><div class='formula'>С = <span class='fraction'><span class='top'>n</span><span class='bottom'>V<sub>р-ра</sub></span></span></div><div>Выразим из этой фомулы химическое количество (n) " + subst + " и подставим в нее молярную концентрацию " + subst + " (C) и объём раствора " + subst + " (V<sub>р-ра</sub>):</div><div class='formula'>n" + substB + " = С" + substB + " &times;  V<sub>р-ра</sub>" + substB + " = " + vars.C_v + " моль/дм<sup>3</sup> &times; " + vars.V_r + " дм<sup>3</sup> = " + vars.n_v + " моль</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.m_v != undefined && vars.M_v != undefined) {
                            vars.n_v = roundValue(vars.m_v / vars.M_v, 'm_r');
                            step = {
                                "variable": "n_v",
                                "value": vars.n_v,
                                "dependencies": [
                                    "m_v",
                                    "M_v"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>n = <span class='fraction'><span class='top'>m</span><span class='bottom'>M</span></span></div><div class='formula'>n" + substB + " = <span class='fraction'><span class='top'>m" + substB + "</span><span class='bottom'>M" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.M_v + " г/моль</span></span> = " + vars.n_v + " моль</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Химическое количество находится по формуле:</div><div class='formula'>n = <span class='fraction'><span class='top'>m</span><span class='bottom'>M</span></span></div><div>Подставим в эту формулу массу " + subst + " и молярную массу " + subst + " и вычислим химическое количество:</div><div class='formula'>n" + substB + " = <span class='fraction'><span class='top'>m" + substB + "</span><span class='bottom'>M" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.M_v + " г/моль</span></span> = " + vars.n_v + " моль</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.V_v != undefined && vars.V_n != undefined) {
                            vars.n_v = roundValue(vars.V_v / vars.V_n, 'n_v');
                            step = {
                                "variable": "n_v",
                                "value": vars.n_v,
                                "dependencies": [
                                    "V_v",
                                    "V_n"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>V<sub>n</sub> = <span class='fraction'><span class='top'>V</span><span class='bottom'>n</span></span></div><div class='formula'>n" + substB + " = <span class='fraction'><span class='top'>V" + substB + "</span><span class='bottom'>V<sub>n</sub> " + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.V_v + " дм<sup>3</sup></span><span class='bottom'>" + vars.V_n + " дм<sup>3</sup>/моль</span></span> = " + vars.n_v + " моль</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Таким образом записывается формула для нахождения молярного объема:</div><div class='formula'>V<sub>n</sub> = <span class='fraction'><span class='top'>V</span><span class='bottom'>n</span></span></div><div>Выразим из этого уравнения химическое количество (n) " + subst + " и подставим молярный объем " + subst + " (V<sub>n</sub>) и объем " + subst + " (V):</div><div class='formula'>n" + substB + " = <span class='fraction'><span class='top'>V" + substB + "</span><span class='bottom'>V<sub>n</sub> " + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.V_v + " дм<sup>3</sup></span><span class='bottom'>" + vars.V_n + " дм<sup>3</sup>/моль</span></span> = " + vars.n_v + " моль</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.V_v != undefined && subst != '' && gases.indexOf(subst) >= 0) {
                            vars.n_v = roundValue(vars.V_v / constants.V_m.value, 'n_v');
                            step = {
                                "variable": "n_v",
                                "dependencies": [
                                    "V_v"
                                ],
                                "value": vars.n_v,
                                "record": {
                                    "ru": "<div class='formula'>V = V<sub>n</sub> &times; n</div><div class='formula'>n" + substB + " = <span class='fraction'><span class='top'>V" + substB + "</span><span class='bottom'>V<sub>n</sub></span></span> = <span class='fraction'><span class='top'>" + vars.V_v + " дм<sup>3</sup></span><span class='bottom'>" + constants.V_m.record + " дм<sup>3</sup>/моль</span></span> = " + vars.n_v + " моль</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Объем газа находится по формуле:</div><div class='formula'>V = V<sub>n</sub> &times; n</div><div>Из этой формулы выразим химическое количество " + subst + " (n) и подставим в нее объем " + subst + " (V) и молярный объем газа при нормальных условиях (V<sub>n</sub>; это постоянная величина, которая равна 22,4 дм<sup>3</sup>):</div><div class='formula'>n" + substB + " = <span class='fraction'><span class='top'>V" + substB + "</span><span class='bottom'>V<sub>n</sub></span></span> = <span class='fraction'><span class='top'>" + vars.V_v + " дм<sup>3</sup></span><span class='bottom'>" + constants.V_m.record + " дм<sup>3</sup>/моль</span></span> = " + vars.n_v + " моль</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.N_v != undefined) {
                            vars.n_v = roundValue(vars.N_v / constants.N_a.value, 'n_v');
                            step = {
                                "variable": "n_v",
                                "dependencies": [
                                    "N_v"
                                ],
                                "value": vars.n_v,
                                "record": {
                                    "ru": "<div class='formula'>n = <span class='fraction'><span class='top'>N</span><span class='bottom'>N<sub>A</sub></span></span></div><div class='formula'>n" + substB + " = <span class='fraction'><span class='top'>N" + substB + "</span><span class='bottom'>N<sub>A</sub></span></span> = <span class='fraction'><span class='top'>" + vars.N_v + " </span><span class='bottom'>" + constants.N_a.record + " моль<sup>-1</sup></span></span> = " + vars.n_v + " моль</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Химическое количество находится по формуле:</div><div class='formula'>n = <span class='fraction'><span class='top'>N</span><span class='bottom'>N<sub>A</sub></span></span></div><div>Подставим в эту формулу число структурных единиц " + subst + " (N) и число Авогадро (N<sub>A</sub>; это постоянная величина, которая равна 6,02 &times; 10<sup>23</sup> моль<sup>-1</sup>) и вычислим химическое количество " + subst + ":</div><div class='formula'>n" + substB + " = <span class='fraction'><span class='top'>N" + substB + "</span><span class='bottom'>N<sub>A</sub></span></span> = <span class='fraction'><span class='top'>" + vars.N_v + " </span><span class='bottom'>" + constants.N_a.record + " моль<sup>-1</sup></span></span> = " + vars.n_v + " моль</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.P != undefined && vars.V_v != undefined && vars.T != undefined) {
                            vars.n_v = roundValue((vars.P * vars.V_v) / (constants.R.value * vars.T), 'n_v');
                            step = {
                                "variable": "n_v",
                                "dependencies": [
                                    "P",
                                    "V_v",
                                    "T"
                                ],
                                "value": vars.n_v,
                                "record": {
                                    "ru": "<div class='formula'>P &times; V = n &times; R &times; T</div><div class='formula'>n" + substB + " = <span class='fraction'><span class='top'>P" + substB + " &times; V" + substB + "</span><span class='bottom'>R &times; T" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.P + " кПа &times; " + vars.V_v + " дм<sup>3</sup></span><span class='bottom'>" + constants.R.record + " Дж/(моль&times;K) &times; " + vars.T + " К</span></span> = " + vars.n_v + " моль</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Запишем уравнение Менделеева-Клапейрона:</div><div class='formula'>P &times; V = n &times; R &times; T</div><div>Выразим из этого уравнения химическое количество (n) " + subst + " и подставим объем " + subst + " (V), давление газа (P), его температуру (T), а также газовую постоянную (R; это постоянная величина, которая равна " + constants.R.record + " Дж/(моль&times;K)):</div><div class='formula'>n" + substB + " = <span class='fraction'><span class='top'>P" + substB + " &times; V" + substB + "</span><span class='bottom'>R &times; T" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.P + " кПа &times; " + vars.V_v + " дм<sup>3</sup></span><span class='bottom'>" + constants.R.record + " Дж/(моль&times;K) &times; " + vars.T + " К</span></span> = " + vars.n_v + " моль</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;

                    /* Проверил до этой строчки */

                case 'V_v':
                    if (vars.V_v == undefined) {
                        if (vars.m_v != undefined && vars.ro_v != undefined) {
                            vars.V_v = roundValue(vars.m_v / vars.ro_v, 'V_v');
                            step = {
                                "variable": "V_v",
                                "value": vars.V_v,
                                "dependencies": [
                                    "m_v",
                                    "ro_v"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>m = ρ &times; V</div><div class='formula'>V" + substB + " = <span class='fraction'><span class='top'>m" + substB + "</span><span class='bottom'>ρ" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.ro_v + " г/дм<sup>3</sup></span></span> = " + vars.V_v + " дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Для нахождения массы через объем и плотность существует такая формула:</div><div class='formula'>m = ρ &times; V</div><div>Из этой формулы выразим объем " + subst + " (V) и вычислим его:</div><div class='formula'>V" + substB + " = <span class='fraction'><span class='top'>m" + substB + "</span><span class='bottom'>ρ" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.ro_v + " г/дм<sup>3</sup></span></span> = " + vars.V_v + " дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.P != undefined && vars.n_v != undefined && vars.T != undefined) {
                            vars.V_v = roundValue((vars.n_v * vars.T * constants.R.value) / vars.P, 'V_v');
                            step = {
                                "variable": "V_v",
                                "value": vars.V_v,
                                "dependencies": [
                                    "n_v",
                                    "T",
                                    "R"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>P &times; V = n &times; R &times; T</div><div class='formula'>V" + substB + " = <span class='fraction'><span class='top'>n " + substB + " &times; R &times; T" + substB + "</span><span class='bottom'>P" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.n_v + " моль &times; " + constants.R.record + " Дж/(моль&times;K) &times; " + vars.T + " К</span><span class='bottom'>" + vars.P + " кПа</span></span> = " + vars.V_v + " дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Запишем уравнение Менделеева-Клапейрона:</div><div class='formula'>P &times; V = n &times; R &times; T</div><div>Выразим из этого уравнения объем (V) " + subst + " и подставим химическое количество " + subst + " (n), давление газа (P), его температуру (T), а также газовую постоянную (R; это постоянная величина, которая равна " + constants.R.record + " Дж/(моль&times;K)):</div><div class='formula'>V" + substB + " = <span class='fraction'><span class='top'>n " + substB + " &times; R &times; T" + substB + "</span><span class='bottom'>P" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.n_v + " моль &times; " + constants.R.record + " Дж/(моль&times;K) &times; " + vars.T + " К</span><span class='bottom'>" + vars.P + " атм</span></span> = " + vars.V_v + " дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.n_v != undefined && subst != '' && gases.indexOf(subst) >= 0) {
                            vars.V_v = roundValue(vars.n_v * constants.V_m.value, 'V_v');
                            step = {
                                "variable": "V_v",
                                "value": vars.V_v,
                                "dependencies": [
                                    "n_v"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>V = V<sub>n</sub> &times; n</div><div class='formula'>V" + substB + " = V<sub>n</sub> &times; n" + substB + " = " + constants.V_m.record + "  дм<sup>3</sup>/моль &times; " + vars.n_v + " моль</span></span> = " + vars.V_v + " дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Объем газа находится по формуле:</div><div class='formula'>V = V<sub>n</sub> &times; n</div><div>Подставим в нее химическое количество " + subst + " (n) и молярный объем газа при нормальных условиях (V<sub>n</sub>; это постоянная величина, которая равна 22,4 дм<sup>3</sup>):</div><div class='formula'>V" + substB + " = V<sub>n</sub> &times; n" + substB + " = " + constants.V_m.record + "  дм<sup>3</sup>/моль &times; " + vars.n_v + " моль</span></span> = " + vars.V_v + " дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.fi != undefined && vars.V_smesi != undefined) {
                            vars.V_v = roundValue(vars.fi * vars.V_smesi / 100, 'V_v');
                            step = {
                                "variable": "V_v",
                                "value": vars.V_v,
                                "dependencies": [
                                    "fi",
                                    "V_r"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>φ = <span class='fraction'><span class='top'>V<sub>в-ва</sub></span><span class='bottom'>V<sub>смеси</sub></span></span> &times; 100%</div><div class='formula'>V<sub>в-ва</sub>" + substB + " = <span class='fraction'><span class='top'>V<sub>смеси</sub> &times; φ</span><span class='bottom'>100%</span></span> = <span class='fraction'><span class='top'>" + vars.V_smesi + " дм<sup>3</sup> &times; " + vars.fi + "%</span><span class='bottom'>100%</span></span> = " + vars.V_v + " дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Объемная доля газа (φ) показывает, какую часть общего объема смеси занимает данный газ, и находится по формуле:</div><div class='formula'>φ = <span class='fraction'><span class='top'>V<sub>в-ва</sub></span><span class='bottom'>V<sub>смеси</sub></span></span> &times; 100%</div><div>Отсюда выразим объем вещества (V<sub>в-ва</sub>) " + subst + " и подставим объем смеси (V<sub>смеси</sub>) и объемную долю вещества в ней (φ):</div><div class='formula'>V<sub>в-ва</sub>" + substB + " = <span class='fraction'><span class='top'>V<sub>смеси</sub> &times; φ</span><span class='bottom'>100%</span></span> = <span class='fraction'><span class='top'>" + vars.V_smesi + " дм<sup>3</sup> &times; " + vars.fi + "%</span><span class='bottom'>100%</span></span> = " + vars.V_v + " дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.V_n != undefined && vars.n_v != undefined) {
                            vars.V_v = roundValue(vars.V_n * vars.n_v, 'V_v');
                            step = {
                                "variable": "V_v",
                                "value": vars.V_v,
                                "dependencies": [
                                    "n_v",
                                    "V_n"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>V<sub>n</sub> = <span class='fraction'><span class='top'>V</span><span class='bottom'>n</span></span></div><div class='formula'>V" + substB + " = V<sub>n</sub>" + substB + " &times; n " + substB + " = " + vars.V_n + " дм<sup>3</sup>/моль &times; " + vars.n_v + " моль = " + vars.V_v + " дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Таким образом записывается формула для нахождения молярного объема:</div><div class='formula'>V<sub>n</sub> = <span class='fraction'><span class='top'>V</span><span class='bottom'>n</span></span></div><div>Выразим из этой формулы объем вещества (V) " + subst + " и подставим молярный объем " + subst + " (V<sub>n</sub>) и химическое количество " + subst + " (n):</div><div class='formula'>V" + substB + " = V<sub>n</sub>" + substB + " &times; n " + substB + " = " + vars.V_n + " дм<sup>3</sup>/моль &times; " + vars.n_v + " моль = " + vars.V_v + " дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'V_n':
                    if (vars.V_n == undefined) {
                        if (vars.n_v != undefined && vars.V_v != undefined) {
                            vars.V_n = roundValue(vars.V_v / vars.n_v, 'V_n');
                            step = {
                                "variable": "V_n",
                                "value": vars.V_n,
                                "dependencies": [
                                    "V_v",
                                    "n_v"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>V<sub>n</sub> = <span class='fraction'><span class='top'>V</span><span class='bottom'>n</span></span></div><div class='formula'>V<sub>n</sub>" + substB + " = <span class='fraction'><span class='top'>" + vars.V_v + " дм<sup>3</sup></span><span class='bottom'>" + vars.n_v + " моль</span></span> = " + vars.V_n + " дм<sup>3</sup>/моль</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Таким образом записывается формула для нахождения молярного объема:</div><div class='formula'>V<sub>n</sub> = <span class='fraction'><span class='top'>V</span><span class='bottom'>n</span></span></div><div>Подставим в записанную формулу химическое количество (n) " + subst + " и объем (V) " + subst + ":</div><div class='formula'>V<sub>n</sub>" + substB + " = <span class='fraction'><span class='top'>" + vars.V_v + " дм<sup>3</sup></span><span class='bottom'>" + vars.n_v + " моль</span></span> = " + vars.V_n + " дм<sup>3</sup>/моль</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;

                case 'V_r':
                    if (vars.V_r == undefined) {
                        if (vars.m_r != undefined && vars.ro_r != undefined) {
                            vars.V_r = roundValue(vars.m_r / vars.ro_r, 'V_r');
                            step = {
                                "variable": "V_r",
                                "value": vars.V_r,
                                "dependencies": [
                                    "m_r",
                                    "ro_r"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>m = ρ &times; V</div><div class='formula'>V<sub>р-ра</sub>" + substB + " = <span class='fraction'><span class='top'>m<sub>р-ра</sub>" + substB + "</span><span class='bottom'>ρ<sub>р-ра</sub>" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.m_r + " г</span><span class='bottom'>" + vars.ro_r + " г/дм<sup>3</sup></span></span> = " + vars.V_r + " дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Для нахождения массы через объем и плотность существует такая формула:</div><div class='formula'>m = ρ &times; V</div><div>Из этой формулы выразим объем раствора " + subst + " (V<sub>р-ра</sub>) и вычислим его:</div><div class='formula'>V<sub>р-ра</sub>" + substB + " = <span class='fraction'><span class='top'>m<sub>р-ра</sub>" + substB + "</span><span class='bottom'>ρ<sub>р-ра</sub>" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.m_r + " г</span><span class='bottom'>" + vars.ro_r + " г/дм<sup>3</sup></span></span> = " + vars.V_r + " дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.n_v != undefined && vars.C_v != undefined) {
                            vars.V_r = roundValue(vars.n_v / vars.C_v, 'V_r');
                            step = {
                                "variable": "V_r",
                                "value": vars.V_r,
                                "dependencies": [
                                    "C_v",
                                    "n_v"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>С = <span class='fraction'><span class='top'>n</span><span class='bottom'>V<sub>р-ра</sub></span></span></div><div class='formula'>V<sub>р-ра</sub> " + substB + " = <span class='fraction'><span class='top'>n" + substB + "</span><span class='bottom'>C" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.n_v + " моль</span><span class='bottom'>" + vars.C_v + " моль/дм<sup>3</sup></span></span> = " + vars.V_r + " дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Есть такая формула для нахождения молярной концентрации (С):</div><div class='formula'>С = <span class='fraction'><span class='top'>n</span><span class='bottom'>V<sub>р-ра</sub></span></span></div><div>Из этой формулы выразим объем раствора (V<sub>р-ра</sub>) " + subst + ":</div><div class='formula'>V<sub>р-ра</sub> " + substB + " = <span class='fraction'><span class='top'>n" + substB + "</span><span class='bottom'>C" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.n_v + " моль</span><span class='bottom'>" + vars.C_v + " моль/дм<sup>3</sup></span></span> = " + vars.V_r + " дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }
                        // здесь еще было фи, но оно для смесей

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'V_smesi':
                    if (vars.V_smesi == undefined) {
                        if (vars.m_smesi != undefined && vars.ro_smesi != undefined) {
                            vars.V_smesi = roundValue(vars.m_smesi / vars.ro_smesi, 'V_smesi');
                            step = {
                                "variable": "V_smesi",
                                "value": vars.V_smesi,
                                "dependencies": [
                                    "m_smesi",
                                    "ro_smesi"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>m = ρ &times; V</div><div class='formula'>V<sub>смеси</sub> = <span class='fraction'><span class='top'>m<sub>смеси</sub></span><span class='bottom'>ρ<sub>смеси</sub></span></span> = <span class='fraction'><span class='top'>" + vars.m_smesi + " г</span><span class='bottom'>" + vars.ro_smesi + " г/дм<sup>3</sup></span></span> = " + vars.V_smesi + " дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Для нахождения массы через объем и плотность существует такая формула:</div><div class='formula'>m = ρ &times; V</div><div>Из этой формулы выразим объем смеси (V<sub>смеси</sub>) и вычислим его:</div><div class='formula'>V<sub>смеси</sub> = <span class='fraction'><span class='top'>m<sub>смеси</sub></span><span class='bottom'>ρ<sub>смеси</sub></span></span> = <span class='fraction'><span class='top'>" + vars.m_smesi + " г</span><span class='bottom'>" + vars.ro_smesi + " г/дм<sup>3</sup></span></span> = " + vars.V_smesi + " дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.V_v != undefined && vars.fi != undefined) {
                            vars.V_smesi = roundValue(vars.V_v / vars.fi * 100, 'V_smesi');
                            step = {
                                "variable": "V_smesi",
                                "value": vars.V_smesi,
                                "dependencies": [
                                    "V_v",
                                    "fi"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>φ = <span class='fraction'><span class='top'>V<sub>в-ва</sub></span><span class='bottom'>V<sub>смеси</sub></span></span> &times; 100%</div><div class='formula'>V<sub>смеси</sub> = <span class='fraction'><span class='top'>V<sub>в-ва</sub>" + substB + "</span><span class='bottom'>φ" + substB + "</span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.V_v + " дм<sup>3</sup></span><span class='bottom'>" + vars.fi + "%</span></span> &times; 100% = " + vars.V_smesi + " дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Объемная доля газа (φ) показывает, какую часть общего объема смеси занимает данный газ, и находится по формуле:</div><div class='formula'>φ = <span class='fraction'><span class='top'>V<sub>в-ва</sub></span><span class='bottom'>V<sub>смеси</sub></span></span> &times; 100%</div><div>Отсюда выразим объем смеси (V<sub>смеси</sub>) " + subst + " и подставим объем вещества " + subst + " (V<sub>в-ва</sub>) и объемную долю вещества " + subst + " (φ) в этой смеси:</div><div class='formula'>V<sub>смеси</sub> = <span class='fraction'><span class='top'>V<sub>в-ва</sub>" + substB + "</span><span class='bottom'>φ" + substB + "</span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.V_v + " дм<sup>3</sup></span><span class='bottom'>" + vars.fi + "%</span></span> &times; 100% = " + vars.V_smesi + " дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;

                case 'V_raspl':
                    if (vars.V_raspl == undefined) {
                        if (vars.m_raspl != undefined && vars.ro_raspl != undefined) {
                            vars.V_raspl = roundValue(vars.m_raspl / vars.ro_raspl, 'V_raspl');
                            step = {
                                "variable": "V_raspl",
                                "value": vars.V_raspl,
                                "dependencies": [
                                    "m_raspl",
                                    "ro_raspl"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>m = ρ &times; V</div><div class='formula'>V<sub>распл.</sub> = <span class='fraction'><span class='top'>m<sub>распл.</sub></span><span class='bottom'>ρ<sub>распл.</sub></span></span> = <span class='fraction'><span class='top'>" + vars.m_raspl + " г</span><span class='bottom'>" + vars.ro_raspl + " г/дм<sup>3</sup></span></span> = " + vars.V_raspl + " дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Для нахождения массы через объем и плотность существует такая формула:</div><div class='formula'>m = ρ &times; V</div><div>Из этой формулы выразим объем расплава (V<sub>распл.</sub>) и вычислим его:</div><div class='formula'>V<sub>распл.</sub> = <span class='fraction'><span class='top'>m<sub>распл.</sub></span><span class='bottom'>ρ<sub>распл.</sub></span></span> = <span class='fraction'><span class='top'>" + vars.m_raspl + " г</span><span class='bottom'>" + vars.ro_raspl + " г/дм<sup>3</sup></span></span> = " + vars.V_raspl + " дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'V_rud':
                    if (vars.V_rud == undefined) {
                        if (vars.m_rud != undefined && vars.ro_rud != undefined) {
                            vars.V_rud = roundValue(vars.m_rud / vars.ro_rud, 'V_rud');
                            step = {
                                "variable": "V_rud",
                                "value": vars.V_rud,
                                "dependencies": [
                                    "m_rud",
                                    "ro_rud"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>m = ρ &times; V</div><div class='formula'>V<sub>руды</sub> = <span class='fraction'><span class='top'>m<sub>руды</sub></span><span class='bottom'>ρ<sub>руды</sub></span></span> = <span class='fraction'><span class='top'>" + vars.m_rud + " г</span><span class='bottom'>" + vars.ro_rud + " г/дм<sup>3</sup></span></span> = " + vars.V_rud + " дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Для нахождения массы через объем и плотность существует такая формула:</div><div class='formula'>m = ρ &times; V</div><div>Из этой формулы выразим объем руды (V<sub>руд.</sub>) и вычислим его:</div><div class='formula'>V<sub>руды</sub> = <span class='fraction'><span class='top'>m<sub>руды</sub></span><span class='bottom'>ρ<sub>руды</sub></span></span> = <span class='fraction'><span class='top'>" + vars.m_rud + " г</span><span class='bottom'>" + vars.ro_rud + " г/дм<sup>3</sup></span></span> = " + vars.V_rud + " дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'w_v':
                    if (vars.w_v == undefined) {
                        if (vars.m_r != undefined && vars.m_v != undefined) {
                            vars.w_v = roundValue(vars.m_v / vars.m_r * 100, 'w_v');
                            step = {
                                "variable": "w_v",
                                "value": vars.w_v,
                                "dependencies": [
                                    "m_v",
                                    "m_r"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>ω = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>р-ра</sub></span></span> &times; 100%</div><div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub>" + substB + "</span><span class='bottom'>m<sub>р-ра</sub>" + substB + "</span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.m_r + " г</span></span> = " + vars.w_v + "%</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая массовую долю вещества (ω), массу вещества (m<sub>в-ва</sub>) и массу раствора (m<sub>р-ра</sub>), записывается так:</div><div class='formula'>ω = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>р-ра</sub></span></span> &times; 100%</div><div>Подставим массу вещества " + subst + " и массу его раствора и найдем массовую долю (ω):</div><div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub>" + substB + "</span><span class='bottom'>m<sub>р-ра</sub>" + substB + "</span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.m_r + " г</span></span> = " + vars.w_v + "%</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.m_raspl != undefined && vars.m_v != undefined) {
                            vars.w_v = roundValue(vars.m_v / vars.m_raspl * 100, 'w_v');
                            step = {
                                "variable": "w_v",
                                "value": vars.w_v,
                                "dependencies": [
                                    "m_v",
                                    "m_raspl"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>ω = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>распл.</sub></span></span> &times; 100%</div><div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub>" + substB + "</span><span class='bottom'>m<sub>распл.</sub></span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.m_raspl + " г</span></span> = " + vars.w_v + "%</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая массовую долю вещества (ω), массу вещества (m<sub>в-ва</sub>) и массу распплава (m<sub>распл.</sub>), записывается так:</div><div class='formula'>ω = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>распл.</sub></span></span> &times; 100%</div><div>Подставим массу вещества " + subst + " и массу расплава и найдем массовую долю (ω):</div><div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub>" + substB + "</span><span class='bottom'>m<sub>распл.</sub></span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.m_raspl + " г</span></span> = " + vars.w_v + "%</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.m_rud != undefined && vars.m_v != undefined) {
                            vars.w_v = roundValue(vars.m_v / vars.m_rud * 100, 'w_v');
                            step = {
                                "variable": "w_v",
                                "value": vars.w_v,
                                "dependencies": [
                                    "m_v",
                                    "m_rud"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>ω = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>руды</sub></span></span> &times; 100%</div><div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub>" + substB + "</span><span class='bottom'>m<sub>руды</sub></span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.m_rud + " г</span></span> = " + vars.w_v + "%</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая массовую долю вещества (ω), массу вещества (m<sub>в-ва</sub>) и массу руды (m<sub>руды</sub>), записывается так:</div><div class='formula'>ω = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>руды</sub></span></span> &times; 100%</div><div>Подставим массу вещества " + subst + " и массу руды и найдем массовую долю (ω):</div><div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub>" + substB + "</span><span class='bottom'>m<sub>руды</sub></span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.m_rud + " г</span></span> = " + vars.w_v + "%</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.m_smesi != undefined && vars.m_v != undefined) {
                            vars.w_v = roundValue(vars.m_v / vars.m_smesi * 100, 'w_v');
                            step = {
                                "variable": "w_v",
                                "value": vars.w_v,
                                "dependencies": [
                                    "m_v",
                                    "m_smesi"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>ω = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>смеси</sub></span></span> &times; 100%</div><div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub>" + substB + "</span><span class='bottom'>m<sub>смеси</sub></span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.m_smesi + " г</span></span> = " + vars.w_v + "%</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая массовую долю вещества (ω), массу вещества (m<sub>в-ва</sub>) и массу смеси (m<sub>смеси</sub>), записывается так:</div><div class='formula'>ω = <span class='fraction'><span class='top'>m<sub>в-ва</sub></span><span class='bottom'>m<sub>смеси</sub></span></span> &times; 100%</div><div>Подставим массу вещества " + subst + " и массу смеси и найдем массовую долю (ω):</div><div class='formula'>ω" + substB + " = <span class='fraction'><span class='top'>m<sub>в-ва</sub>" + substB + "</span><span class='bottom'>m<sub>смеси</sub></span></span> &times; 100% = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.m_smesi + " г</span></span> = " + vars.w_v + "%</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }


                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;

                case 'w_vyh':
                    if (vars.w_vyh == undefined) {
                        if (vars.m_pract != undefined && vars.m_teor != undefined) {
                            vars.w_vyh = roundValue(vars.m_pract / vars.m_teor * 100, 'w_vyh');
                            step = {
                                "variable": "w_vyh",
                                "value": vars.w_vyh,
                                "dependencies": [
                                    "m_pract",
                                    "m_teor"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>ω<sub>вых.</sub> = <span class='fraction'><span class='top'>m<sub>практ.</sub></span><span class='bottom'>m<sub>теор.</sub></span></span> * 100%</div><div class='formula'>ω<sub>вых.</sub> = <span class='fraction'><span class='top'>" + vars.m_pract + " г</span><span class='bottom'>" + vars.m_teor + " г</span></span> = " + vars.w_vyh + "%</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Массовая доля выхода (или выход, обозначается как ω<sub>вых.</sub>) - это отношение реальной массы вещества на выходе к теоретически возможной. Находится ω<sub>вых.</sub> по формуле:</div><div class='formula'>ω<sub>вых.</sub> = <span class='fraction'><span class='top'>m<sub>практ.</sub></span><span class='bottom'>m<sub>теор.</sub></span></span> * 100%</div><div>Подставим практическую массу и теоретическую в формулу и посчитаем ω<sub>вых.</sub>:</div><div class='formula'>ω<sub>вых.</sub> = <span class='fraction'><span class='top'>" + vars.m_pract + " г</span><span class='bottom'>" + vars.m_teor + " г</span></span> = " + vars.w_vyh + "%</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'fi':
                    if (vars.fi == undefined) {
                        if (vars.V_v != undefined && vars.V_smesi != undefined) {
                            vars.fi = roundValue(vars.V_v / vars.V_smesi * 100, 'fi');
                            step = {
                                "variable": "fi",
                                "value": vars.fi,
                                "dependencies": [
                                    "V_v",
                                    "V_smesi"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>φ = <span class='fraction'><span class='top'>V<sub>в-ва</sub></span><span class='bottom'>V<sub>смеси</sub></span></span> &times; 100%</div><div class='formula'>φ" + substB + " = <span class='fraction'><span class='top'>" + vars.V_v + " дм<sup>3</sup></sub></span><span class='bottom'>" + vars.V_smesi + " дм<sup>3</sup></sub></span></span> &times; 100% = " + vars.fi + " %</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Объемная доля газа (φ) показывает, какую часть общего объема смеси занимает данный газ, и находится по формуле:</div><div class='formula'>φ = <span class='fraction'><span class='top'>V<sub>в-ва</sub></span><span class='bottom'>V<sub>смеси</sub></span></span> &times; 100%</div><div>Посчитаем по этой формуле объемную долю газа (φ):</div><div class='formula'>φ" + substB + " = <span class='fraction'><span class='top'>" + vars.V_v + " дм<sup>3</sup></sub></span><span class='bottom'>" + vars.V_smesi + " дм<sup>3</sup></sub></span></span> &times; 100% = " + vars.fi + " %</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;

                case 'fi_vyh':
                    if (vars.fi_vyh == undefined) {
                        if (vars.V_pract != undefined && vars.V_teor != undefined) {
                            vars.fi_vyh = roundValue(vars.V_pract / vars.V_teor * 100, 'fi_vyh');
                            step = {
                                "variable": "fi_vyh",
                                "value": vars.fi_vyh,
                                "dependencies": [
                                    "V_pract",
                                    "V_teor"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>φ<sub>вых.</sub> = <span class='fraction'><span class='top'>V<sub>практ.</sub></span><span class='bottom'>V<sub>теор.</sub></span></span> * 100%</div><div class='formula'>φ<sub>вых.</sub> = <span class='fraction'><span class='top'>" + vars.V_pract + " дм<sup>3</sup></span><span class='bottom'>" + vars.V_teor + " дм<sup>3</sup><</span></span> = " + vars.fi_vyh + "%</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Объемная доля выхода  (обозначается как φ<sub>вых.</sub>) - это отношение реального объема на выходе к теоретически возможному. Находится φ<sub>вых.</sub> по формуле:</div><div class='formula'>φ<sub>вых.</sub> = <span class='fraction'><span class='top'>V<sub>практ.</sub></span><span class='bottom'>V<sub>теор.</sub></span></span> * 100%</div><div>Подставим практический объем и теоретический в формулу и посчитаем φ<sub>вых.</sub>:</div><div class='formula'>φ<sub>вых.</sub> = <span class='fraction'><span class='top'>" + vars.V_pract + " дм<sup>3</sup></span><span class='bottom'>" + vars.V_teor + " дм<sup>3</sup><</span></span> = " + vars.fi_vyh + "%</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'ro_v':
                    if (vars.ro_v == undefined) {
                        if (vars.m_v != undefined && vars.V_v != undefined) {
                            vars.ro_v = roundValue(vars.m_v / vars.V_v, 'ro_v');
                            step = {
                                "variable": "ro_v",
                                "value": vars.ro_v,
                                "dependencies": [
                                    "m_v",
                                    "V_v"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>m = ρ &times; V</div><div class='formula'>ρ" + substB + " = <span class='fraction'><span class='top'>m" + substB + "</span><span class='bottom'>V" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.V_v + " дм<sup>3</sup></span></span> = " + vars.ro_v + " г/дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Для нахождения массы через объем и плотность существует такая формула:</div><div class='formula'>m = ρ &times; V</div><div>Из этой формулы выразим плотность " + subst + " (ρ) и вычислим ее:</div><div class='formula'>ρ" + substB + " = <span class='fraction'><span class='top'>m" + substB + "</span><span class='bottom'>V" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.V_v + " дм<sup>3</sup></span></span> = " + vars.ro_v + " г/дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (subst == 'H2O') {
                            vars.ro_v = constants.ro_h2o.value;
                            step = {
                                "variable": "ro_v",
                                "value": vars.ro_v,
                                "dependencies": [],
                                "record": {
                                    "ru": "<div>ρ(H<sub>2</sub>O) = " + constants.ro_h2o.record + " г/дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Плотность воды - величина всем известная, поэтому не так важно, что в условии о ней ничего не сказано. Плотность воды равна " + constants.ro_h2o.record + " г/дм<sup>3</sup>.</div><div>ρ(H<sub>2</sub>O) = " + constants.ro_h2o.record + " г/дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'ro_r':
                    if (vars.ro_r == undefined) {
                        if (vars.m_r != undefined && vars.V_r != undefined) {
                            vars.ro_r = roundValue(vars.m_r / vars.V_r, 'ro_r');
                            step = {
                                "variable": "ro_r",
                                "value": vars.ro_r,
                                "dependencies": [
                                    "m_r",
                                    "V_r"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>m = ρ &times; V</div><div class='formula'>ρ<sub>р-ра</sub> = <span class='fraction'><span class='top'>m<sub>р-ра</sub></span><span class='bottom'>V<sub>р-ра</sub></span></span> = <span class='fraction'><span class='top'>" + vars.m_r + " г</span><span class='bottom'>" + vars.V_r + " дм<sup>3</sup></span></span> = " + vars.ro_r + " г/дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Для нахождения массы через объем и плотность существует такая формула:</div><div class='formula'>m = ρ &times; V</div><div>Из этой формулы выразим плотность раствора (ρ<sub>р-ра</sub>) и вычислим ее:</div><div class='formula'>ρ<sub>р-ра</sub> = <span class='fraction'><span class='top'>m<sub>р-ра</sub></span><span class='bottom'>V<sub>р-ра</sub></span></span> = <span class='fraction'><span class='top'>" + vars.m_r + " г</span><span class='bottom'>" + vars.V_r + " дм<sup>3</sup></span></span> = " + vars.ro_r + " г/дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'ro_smesi':
                    if (vars.ro_smesi == undefined) {
                        if (vars.m_smesi != undefined && vars.V_smesi != undefined) {
                            vars.ro_smesi = roundValue(vars.m_smesi / vars.V_smesi, 'ro_smesi');
                            step = {
                                "variable": "ro_smesi",
                                "value": vars.ro_smesi,
                                "dependencies": [
                                    "m_smesi",
                                    "V_smesi"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>m = ρ &times; V</div><div class='formula'>ρ<sub>смеси</sub> = <span class='fraction'><span class='top'>m<sub>смеси</sub></span><span class='bottom'>V<sub>смеси</sub></span></span> = <span class='fraction'><span class='top'>" + vars.m_smesi + " г</span><span class='bottom'>" + vars.V_smesi + " дм<sup>3</sup></span></span> = " + vars.ro_smesi + " г/дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Для нахождения массы через объем и плотность существует такая формула:</div><div class='formula'>m = ρ &times; V</div><div>Из этой формулы выразим плотность смеси (ρ<sub>смеси</sub>) и вычислим ее:</div><div class='formula'>ρ<sub>смеси</sub> = <span class='fraction'><span class='top'>m<sub>смеси</sub></span><span class='bottom'>V<sub>смеси</sub></span></span> = <span class='fraction'><span class='top'>" + vars.m_smesi + " г</span><span class='bottom'>" + vars.V_smesi + " дм<sup>3</sup></span></span> = " + vars.ro_smesi + " г/дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'ro_raspl':
                    if (vars.ro_raspl == undefined) {
                        if (vars.m_raspl != undefined && vars.V_raspl != undefined) {
                            vars.ro_raspl = roundValue(vars.m_raspl / vars.V_raspl, 'ro_raspl');
                            step = {
                                "variable": "ro_raspl",
                                "value": vars.ro_raspl,
                                "dependencies": [
                                    "m_raspl",
                                    "V_raspl"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>m = ρ &times; V</div><div class='formula'>ρ<sub>распл.</sub> = <span class='fraction'><span class='top'>m<sub>распл.</sub></span><span class='bottom'>V<sub>распл.</sub></span></span> = <span class='fraction'><span class='top'>" + vars.m_raspl + " г</span><span class='bottom'>" + vars.V_raspl + " дм<sup>3</sup></span></span> = " + vars.ro_raspl + " г/дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Для нахождения массы через объем и плотность существует такая формула:</div><div class='formula'>m = ρ &times; V</div><div>Из этой формулы выразим плотность расплава (ρ<sub>распл.</sub>) и вычислим ее:</div><div class='formula'>ρ<sub>распл.</sub> = <span class='fraction'><span class='top'>m<sub>распл.</sub></span><span class='bottom'>V<sub>распл.</sub></span></span> = <span class='fraction'><span class='top'>" + vars.m_raspl + " г</span><span class='bottom'>" + vars.V_raspl + " дм<sup>3</sup></span></span> = " + vars.ro_raspl + " г/дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'ro_rud':
                    if (vars.ro_rud == undefined) {
                        if (vars.m_rud != undefined && vars.V_rud != undefined) {
                            vars.ro_rud = roundValue(vars.m_rud / vars.V_rud, 'ro_rud');
                            step = {
                                "variable": "ro_rud",
                                "value": vars.ro_rud,
                                "dependencies": [
                                    "m_rud",
                                    "V_rud"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>m = ρ &times; V</div><div class='formula'>ρ<sub>руды</sub> = <span class='fraction'><span class='top'>m<sub>руды</sub></span><span class='bottom'>V<sub>руды</sub></span></span> = <span class='fraction'><span class='top'>" + vars.m_rud + " г</span><span class='bottom'>" + vars.V_rud + " дм<sup>3</sup></span></span> = " + vars.ro_rud + " г/дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Для нахождения массы через объем и плотность существует такая формула:</div><div class='formula'>m = ρ &times; V</div><div>Из этой формулы выразим плотность руды (ρ<sub>руды</sub>) и вычислим ее:</div><div class='formula'>ρ<sub>руды</sub> = <span class='fraction'><span class='top'>m<sub>руды</sub></span><span class='bottom'>V<sub>руды</sub></span></span> = <span class='fraction'><span class='top'>" + vars.m_rud + " г</span><span class='bottom'>" + vars.V_rud + " дм<sup>3</sup></span></span> = " + vars.ro_rud + " г/дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'ma_v':
                    if (vars.ma_v == undefined) {
                        if (vars.m_v != undefined && vars.N_v != undefined) {
                            vars.ma_v = roundValue(vars.m_v / vars.N_v, 'ma_v');
                            step = {
                                "variable": "ma_v",
                                "value": vars.ma_v,
                                "dependencies": [
                                    "m_v",
                                    "N_v"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>N = <span class='fraction'><span class='top'>m</span><span class='bottom'>m<sub>атома</sub></span></span></div><div class='formula'>m<sub>атома</sub>" + substB + " = <span class='fraction'><span class='top'>m" + substB + "</span><span class='bottom'>N" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.N_v + "</span></span> = " + vars.ma_v + " г</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая количество структурных единиц (N), массу (m) и массу атома (m<sub>атома</sub>), записывается так:</div><div class='formula'>N = <span class='fraction'><span class='top'>m</span><span class='bottom'>m<sub>атома</sub></span></span></div><div>Из этой формулы выразим массу атома вещества " + subst + ":</div><div class='formula'>m<sub>атома</sub>" + substB + " = <span class='fraction'><span class='top'>m" + substB + "</span><span class='bottom'>N" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.N_v + "</span></span> = " + vars.ma_v + " г</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'N_v':
                    if (vars.N_v == undefined) {
                        if (vars.n_v != undefined) {
                            vars.N_v = roundValue(vars.n_v * constants.N_a.value, 'N_v');
                            step = {
                                "variable": "N_v",
                                "value": vars.N_v,
                                "dependencies": [
                                    "n_v"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>n = <span class='fraction'><span class='top'>N</span><span class='bottom'>N<sub>A</sub></span></span></div><div class='formula'>N" + substB + " = n" + substB + " &times; N<sub>A</sub> = " + vars.n_v + " моль &times; " + constants.N_a.record + " моль<sup>-1</sup> = " + vars.N_v + "</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Одна из формул для нохождения химического количества выглядит так:</div><div class='formula'>n = <span class='fraction'><span class='top'>N</span><span class='bottom'>N<sub>A</sub></span></span></div><div>Выражаем из нее число структурных единиц " + subst + " (N) и подставляем число Авогадро (N<sub>A</sub>; это постоянная величина, которая равна 6,02 &times; 10<sup>23</sup> моль<sup>-1</sup>) и химическое количество " + subst + " (n):</div><div class='formula'>N" + substB + " = n" + substB + " &times; N<sub>A</sub> = " + vars.n_v + " моль &times; " + constants.N_a.record + " моль<sup>-1</sup> = " + vars.N_v + "</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        } else if (vars.m_v != undefined && vars.ma_v != undefined) {
                            vars.N_v = roundValue(vars.m_v / vars.ma_v, 'N_v');
                            step = {
                                "variable": "N_v",
                                "value": vars.N_v,
                                "dependencies": [
                                    "m_v",
                                    "ma_v"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>N = <span class='fraction'><span class='top'>m</span><span class='bottom'>m<sub>атома</sub></span></span></div><div class='formula'>N" + substB + " = <span class='fraction'><span class='top'>m" + substB + "</span><span class='bottom'>m<sub>атома</sub>" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.ma_v + " г</span></span> = " + vars.N_v + "</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Формула, связывающая количество структурных единиц (N), массу (m) и массу атома (m<sub>атома</sub>), записывается так:</div><div class='formula'>N = <span class='fraction'><span class='top'>m</span><span class='bottom'>m<sub>атома</sub></span></span></div><div>Подставим в формулу массу атома вещества и массу вещества, ведь они нам известны, и найдем количество структурных единиц:</div><div class='formula'>N" + substB + " = <span class='fraction'><span class='top'>m" + substB + "</span><span class='bottom'>m<sub>атома</sub>" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.m_v + " г</span><span class='bottom'>" + vars.ma_v + " г</span></span> = " + vars.N_v + "</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'P':
                    if (vars.P == undefined) {
                        if (vars.n_v != undefined && vars.V_v != undefined && vars.T != undefined) {
                            vars.P = roundValue((vars.n_v * vars.T * constants.R.value) / vars.V_v, 'P');
                            step = {
                                "variable": "P",
                                "value": vars.P,
                                "dependencies": [
                                    "n_v", "T", "V_v"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>P &times; V = n &times; R &times; T</div><div class='formula'>P" + substB + " = <span class='fraction'><span class='top'>n" + substB + " &times; R &times; T" + substB + "</span><span class='bottom'>V" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.n_v + " моль &times; " + constants.R.record + " Дж/(моль&times;K) &times; " + vars.T + " К</span><span class='bottom'>" + vars.V_v + " дм<sup>3</sup></span></span> = " + vars.P + " кПа</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Запишем уравнение Менделеева-Клапейрона:</div><div class='formula'>P &times; V = n &times; R &times; T</div><div>Выразим из этого уравнения давление " + subst + " (P) и подставим объем " + subst + " (V), температуру газа (T), его химическое количество (n), а также газовую постоянную (R; это постоянная величина, которая равна " + constants.R.record + " Дж/(моль&times;K)):</div><div class='formula'>P" + substB + " = <span class='fraction'><span class='top'>n" + substB + " &times; R &times; T" + substB + "</span><span class='bottom'>V" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.n_v + " моль &times; " + constants.R.record + " Дж/(моль&times;K) &times; " + vars.T + " К</span><span class='bottom'>" + vars.V_v + " дм<sup>3</sup></span></span> = " + vars.P + " кПа</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'T':
                    if (vars.T == undefined) {
                        if (vars.n_v != undefined && vars.V_v != undefined && vars.P != undefined) {
                            vars.T = roundValue((vars.P * vars.V_v) / (vars.n_v * constants.R.value), 'T');
                            step = {
                                "variable": "T",
                                "value": vars.T,
                                "dependencies": [
                                    "n_v", "P", "V_v"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>P &times; V = n &times; R &times; T</div><div class='formula'>T" + substB + " = <span class='fraction'><span class='top'>P" + substB + " &times; V" + substB + "</span><span class='bottom'>R &times; n" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.P + " кПа &times; " + vars.V_v + " дм<sup>3</sup></span><span class='bottom'>" + constants.R.record + " Дж/(моль&times;K) &times; " + vars.n_v + " моль</span></span> = " + vars.T + " К</div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Запишем уравнение Менделеева-Клапейрона:</div><div class='formula'>P &times; V = n &times; R &times; T</div><div>Выразим из этого уравнения температуру " + subst + " (T) и подставим объем " + subst + " (V), давление газа (P), его химическое количество (n), а также газовую постоянную (R; это постоянная величина, которая равна " + constants.R.record + " Дж/(моль&times;K)):</div><div class='formula'>T" + substB + " = <span class='fraction'><span class='top'>P" + substB + " &times; V" + substB + "</span><span class='bottom'>R &times; n" + substB + "</span></span> = <span class='fraction'><span class='top'>" + vars.P + " кПа &times; " + vars.V_v + " дм<sup>3</sup></span><span class='bottom'>" + constants.R.record + " Дж/(моль&times;K) &times; " + vars.n_v + " моль</span></span> = " + vars.T + " К</div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'C_v':
                    if (vars.C_v == undefined) {
                        if (vars.n_v != undefined && vars.V_r != undefined) {
                            vars.C_v = roundValue(vars.n_v / vars.V_r, 'C_v');
                            step = {
                                "variable": "C_v",
                                "value": vars.C_v,
                                "dependencies": [
                                    "n_v", "V_r"
                                ],
                                "record": {
                                    "ru": "<div class='formula'>С = <span class='fraction'><span class='top'>n</span><span class='bottom'>V<sub>р-ра</sub></span></span></div><div class='formula'>С = <span class='fraction'><span class='top'>" + vars.n_v + " моль</span><span class='bottom'>" + vars.V_r + " дм<sup>3</sup></span></span> = " + vars.C_v + " моль/дм<sup>3</sup></div>",
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": "<div>Есть такая формула для нахождения молярной концентрации (С):</div><div class='formula'>С = <span class='fraction'><span class='top'>n</span><span class='bottom'>V<sub>р-ра</sub></span></span></div><div>Нам известно химическое количество (n) " + subst + " и  объем раствора (V<sub>р-ра</sub>), поэтому можем вычислить молярную концентрацию " + subst + " (C):</div><div class='formula'>С = <span class='fraction'><span class='top'>" + vars.n_v + " моль</span><span class='bottom'>" + vars.V_r + " дм<sup>3</sup></span></span> = " + vars.C_v + " моль/дм<sup>3</sup></div>",
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'D_h':
                    if (vars.D_h == undefined) {
                        if (vars.M_v != undefined) {
                            vars.D_h = roundValue(vars.M_v / constants.M_h.value, 'D_h');
                            step = {
                                "variable": "D_h",
                                "value": vars.D_h,
                                "dependencies": [
                                    "M_v"
                                ],
                                "record": {
                                    "ru": '<div><span class="formula">D<sub>по H<sub>2</sub></sub> = <span class="fraction"><span class="top">M<sub>в-ва</sub></span><span class="bottom">M(H<sub>2</sub>)</span></span></span> = <span class="fraction"><span class="top">' + vars.M_v + ' г/моль</span><span class="bottom">' + constants.M_h.record + ' г/моль</span></span> = ' + vars.D_h + '</span></div>',
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": '<div>Относительная плотность вещества по водороду - это отношение молярной массы этого вещества к молярной массе водорода. Формула для расчета относительной плотности по водороду:</div><div><span class="formula">D<sub>по H<sub>2</sub></sub> = <span class="fraction"><span class="top">M<sub>в-ва</sub></span><span class="bottom">M(H<sub>2</sub>)</span></span></span></div><div>Молярную массу вещества и молярную массу водорода мы знаем, так что выразим из этой формулы относительную плотность по водороду и найдем её:</div><div>D<sub>по H<sub>2</sub></sub> = <span class="fraction"><span class="top">' + vars.M_v + ' г/моль</span><span class="bottom">' + constants.M_h.record + ' г/моль</span></span> = ' + vars.D_h + '</span></div>',
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;


                case 'D_vozd':
                    if (vars.D_vozd == undefined) {
                        if (vars.M_v != undefined) {
                            vars.D_vozd = roundValue(vars.M_v / constants.M_vozd.value, 'D_vozd');
                            step = {
                                "variable": "D_vozd",
                                "value": vars.D_vozd,
                                "dependencies": [
                                    "M_v"
                                ],
                                "record": {
                                    "ru": '<div><span class="formula">D<sub>по возд.</sub> = <span class="fraction"><span class="top">M<sub>в-ва</sub></span><span class="bottom">M(возд.)</span></span></span> = <span class="fraction"><span class="top">' + vars.M_v + ' г/моль</span><span class="bottom">' + constants.M_vozd.record + ' г/моль</span></span> = ' + vars.D_vozd + '</span></div>',
                                    "en": "n = m / M; m = n dfM = ..."
                                },
                                "explanation": {
                                    "ru": '<div>Относительная плотность вещества по воздуху - это отношение молярной массы этого вещества к молярной массе воздуха. Формула для расчета относительной плотности по воздуху:</div><div><span class="formula">D<sub>по возд.</sub> = <span class="fraction"><span class="top">M<sub>в-ва</sub></span><span class="bottom">M(возд.)</span></span></span></div><div>Молярную массу вещества и молярную массу воздуха мы знаем, так что выразим из этой формулы относительную плотность по по воздуху и найдем её:</div><div>D<sub>по возд.</sub> = <span class="fraction"><span class="top">' + vars.M_v + ' г/моль</span><span class="bottom">' + constants.M_vozd.record + ' г/моль</span></span> = ' + vars.D_vozd + '</span></div>',
                                    "en": "Noe we should..."
                                }
                            };
                        }

                        if (step.variable != undefined) {
                            steps.push(step);
                        }
                    }
                    break;

            }
        }



        /*
          <------------
        РЕШЕНИЕ ЗАДАЧ С РЕАКЦИЯМИ
                    ----------->
        */

        // -> Объект для работы с работы с реакцией
        var reactParser = {};

        // форматирование реакции
        reactParser.getFormatReaction = function(react) {
            // удаляем все теги
            var formattedReaction = react.replace(/<[^>]+>/g, '');
            // удаляем пробелы
            formattedReaction = formattedReaction.replace(/\s+/g, '');
            if (formattedReaction.charAt(0) == '=' || formattedReaction.charAt(0) == '+') {
                formattedReaction = formattedReaction.substr(1);
            }
            if (formattedReaction.charAt(formattedReaction.length - 1) == '=' || formattedReaction.charAt(formattedReaction.length - 1) == '+') {
                formattedReaction = formattedReaction.substr(0, formattedReaction.length - 1);
            }
            //$log.info(formattedReaction);
            return formattedReaction;
        };

        // получение коэффициента перед веществом из записи типа "32NaCl"
        reactParser.getCoef = function(subst) {
            var coef = 1;
            for (var i = 0; i < subst.length; i++) {
                if (!isNaN(subst.substr(0, i + 1) * 1)) {
                    coef = subst.substr(0, i + 1) * 1;
                } else break;
            }
            return coef;
        };

        // получение в-ва без коэффициента из записи типа "32NaCl"
        reactParser.getPureSubst = function(subst) {
            var coef = reactParser.getCoef(subst) + '';
            return (subst.substr(subst.indexOf(coef + '') + coef.length));
        };

        reactParser.createObject = function(react) {
            var object = [];

            var reaction = reactParser.getFormatReaction(react);

            var reactParts = reaction.split('=');
            var reactLeftSubsts = reactParts[0].split('+');
            var reactRightSubsts = reactParts[1].split('+');

            for (var i = 0; i < reactLeftSubsts.length; i++) {
                var substance = {
                    "subst": reactParser.getPureSubst(reactLeftSubsts[i]),
                    "coef": reactParser.getCoef(reactLeftSubsts[i]),
                    "side": "left"
                };
                object.push(substance);
            }
            for (var i = 0; i < reactRightSubsts.length; i++) {
                var substance = {
                    "subst": reactParser.getPureSubst(reactRightSubsts[i]),
                    "coef": reactParser.getCoef(reactRightSubsts[i]),
                    "side": "right"
                };
                object.push(substance);
            }
            //$log.info(object);
            return object;
        };

        // проверка на возможность вычисления молярной массы каждого из веществ в реакции
        reactParser.isSuitableReact = function(react) {
            var isSuitable = true;
            var reaction = reactParser.createObject(react);

            // расчет молярной массы
            function getMolarMass(substance) {
                var list = []
                list.parse = $rootScope.parse;
                var M = 0;
                var subst = substance.replace(/\s+/g, '');
                list.parse(subst, 1);
                for (var i = 0; i < list.length; i++) {
                    M += Math.round(list[i]["coef"] * $rootScope.table["table"][list[i]["elements"]]["atomMass"]);
                }
                return M;
            }

            for (var i = 0; i < reaction.length; i++) {
                if (getMolarMass(reaction[i].subst) <= 0) {
                    isSuitable = false;
                    break;
                }
            }
            return isSuitable;
        }
        //$log.info(reactParser.isSuitableReact('<h4 class="panel-title ng-binding" ng-bind-html="x.reaction"><div class="nobr"><i>N</i><sub>2</sub><i>O</i><sub>3</sub></div> + <div class="nobr"><s><u>3</u><i>Cu</i></s></div> = <div class="nobr"><i>N</i><sub>2</sub></div> + <div class="nobr"><s><u>3</u><i>Cu</i><i>O</i></s></div></h4>'));
        $scope.reactParser = reactParser;


        // -> Объект для работы с поиском реакций
        $scope.reactSearch = {};

        $scope.reactSearch.error = {
            "show": false,
            "text": ""
        };

        $scope.reactSearch.captcha = {
            "show": false,
            "key": "",
            "captcha": "",
            "url": ""
        };

        $scope.reactSearch.captcha.send = function() {
            $scope.reactSearch.captcha.captcha = document.getElementById('captcha-text').value;
            if ($scope.reactSearch.captcha.captcha == '' || $scope.reactSearch.captcha.captcha == undefined) {
                $scope.reactSearch.error.text = 'Вы не ввели код с картинки!';
                $scope.reactSearch.captcha.show = true;
            } else {
                $http.get('http://react.chemistryx10.com/unban?captcha=' + $scope.reactSearch.captcha.captcha + '&key=' + $scope.reactSearch.captcha.key + '&url=' + $scope.reactSearch.captcha.url).then(function(response) {
                    $scope.reactSearch.captcha.show = false;
                }).error(function() {
                    $scope.reactSearch.error.text = 'Вы неправильно ввели код с картинки!';
                    $scope.reactSearch.error.show = true;
                });
            }
        };
        $scope.reactSearch.searchField = {
            "show": true
        };
        $scope.reactSearch.examples = {
            "show": true
        };
        $scope.reactSearch.list = {
            "data": [],
            "show": false
        }
        // генерация запроса поиска реакции на сервер
        $scope.reactSearch.loading = {
            "show": false
        };
        $scope.reactSearch.noConnectField = {
            "show": false
        }
        $scope.reactSearch.enterFullReactField = {
            "show": true
        };
        $scope.reactSearch.hintField = {
            "show": true
        }

        $scope.reactSearch.search = function() {
            var input = document.getElementById('reaction-input');

            $scope.reactSearch.error.show = false;


            if ($scope.reactParser.getFormatReaction(input.value) != '') {
                $scope.reactSearch.list.data = [];
                var reaction = reactParser.getFormatReaction(input.value);

                $scope.reactSearch.loading.show = true;
                $scope.reactSearch.enterFullReactField.show = false;
                $scope.reactSearch.noConnectField.show = false;
                $scope.reactSearch.hintField.show = false;
                $scope.reactSearch.list.show = false;

                var showReactions = function(response) {
                    $scope.reactSearch.loading.show = false;
                    $scope.reactSearch.enterFullReactField.show = true;

                    if (response == null) {
                        $scope.reactSearch.error.text = 'Не удалось найти уравнение реакции. Проверьте правильность ввода';
                        $scope.reactSearch.error.show = true;
                        $scope.reactSearch.hintField.show - true;
                    } else if (response.status == 'error') {
                        switch (response.error_code) {
                            case 1:
                                $scope.reactSearch.error.text = 'То, что вы ввели, не похоже на реакцию! Проверьте правильность ввода и попробуйте найти реакцию еще раз. ';
                                break;
                            default:
                                $scope.reactSearch.error.text = 'Ошибка! Попробуйте позже или введите реакцию вречную. ';
                                break;
                        }
                        $scope.reactSearch.searchField.show = false;
                        $scope.reactSearch.error.show = true;
                        $scope.reactSearch.hintField.show = true;
                        $scope.reactSearch.examples.show = true;
                    } else {
                        $scope.reactSearch.searchField.show = false;
                        // удаление русских слов в реакциях,типа: (раств.), (катод, анод)
                        for (var i = 0; i < response.reactions.length; i++) {
                            response.reactions[i].reaction = response.reactions[i].reaction.replace(/[а-яА-Я]/g, '');
                            response.reactions[i].reaction = response.reactions[i].reaction.replace(/\(\)/g, '');
                            response.reactions[i].reaction = response.reactions[i].reaction.replace(/\( \)/g, '');
                            response.reactions[i].reaction = response.reactions[i].reaction.replace(/\(.\)/g, '');
                            response.reactions[i].reaction = response.reactions[i].reaction.replace(/\(., .\)/g, '');
                            response.reactions[i].reaction = response.reactions[i].reaction.replace(/&#[0-9]+;/g, '');
                        }

                        // заносим в $scope.reactSearch.list.data только подходящие реакции
                        for (var i = 0; i < response.reactions.length; i++) {
                            if ($scope.reactParser.isSuitableReact(response.reactions[i].reaction)) {
                                $scope.reactSearch.list.data.push(response.reactions[i]);
                            }
                        }
                        if ($scope.reactSearch.list.data.length != 0) {
                            $scope.reactSearch.list.show = true;
                        } else {
                            $scope.reactSearch.hintField.show = false;
                            $scope.reactSearch.error.text = 'Не удалось найти ни одной подходящей реакции. Попробуйте написать реакцию вручную';
                            $scope.reactSearch.error.show = true;
                        }
                    }
                }

                $reactions.solveReaction(reaction).then(showReactions, function(e) {
                    $scope.reactSearch.loading.show = false;
                    $scope.reactSearch.noConnectField.show = true;
                    $scope.reactSearch.error.text = 'Не удалось соединиться с сервером, проверьте соединение с интернетои или попробуйте позже. ';
                    $scope.reactSearch.error.show = true;
                    $scope.reactSearch.searchField.show = false;
                    $scope.reactSearch.examples.show = true;
                });
            } else {
                $scope.reactSearch.error.text = 'Вы не ввели реакцию!';
                $scope.reactSearch.error.show = true;
            }
        };

        $scope.reactSearch.reaction = {
            "example": "Ca + H2O",
            "record": "",
            "object": []
        };

        $scope.reactSearch.setReaction = function(reaction) {
            $scope.reactSearch.reaction.record = reaction;
            $scope.reactSearch.reaction.object = $scope.reactParser.createObject(reaction);
        };

        $scope.reactSearch.chooseReaction = function(reaction) {
            $scope.reactSearch.setReaction(reaction);
            $scope.showActivity('simpleProblemGiven');
        };



        /* Объект для работы с полностью введенной реакцией */
        $scope.reactEntering = {};
        $scope.reactEntering.examples = [
            "H2 + O2 = H2O",
            "C2H5OH = CO2 + H2O"
        ];
        $scope.reactEntering.error = {
            "show": false,
            "text": ""
        };
        $scope.reactEntering.validate = function(react) {
            var errorText = '';
            var reaction = $scope.reactParser.getFormatReaction(react);
            if (reaction.indexOf('=') < 0) {
                errorText = 'Необходимо ввести полную реакцию с левой и правой частью. Например: "H2 + O2 = H2O"';
            } else if (reaction.indexOf('+') < 0) {
                errorText = 'Не найдено ни одного знака "+" в вашей реакции.';
            } else if (!$scope.reactParser.isSuitableReact(reaction)) {
                errorText = 'В вашей реакции присутствуют неопознанные вещества. Элементы в веществах должны начинаться с большой буквы, например: "NaCl"';
            }

            if (errorText != '') {
                return errorText;
            } else return 0;
        };

        // для расстановки коэффициентов
        $http.get("./json/ions.json").then(function(response) {
            $scope.oxidation = response;
            //$log.info($scope.oxidation["ions"]);
        });

        $scope.refresh = function() {
            $scope.coefs = [];
            $scope.subsL = [];
            $scope.subsR = [];
            $scope.balance = [];
            $scope.errors = '';
        }

        $scope.reactEntering.enter = function() {
            var input = document.getElementById('reaction-full-input');
            $scope.reactEntering.error.show = false;
            if ($scope.reactParser.getFormatReaction(input.value) != '') {
                if ($scope.reactEntering.validate(input.value) == 0) {
                    // расставить коэффициенты
                    $scope.equation = $scope.reactParser.getFormatReaction(input.value);
                    $rootScope.alignment($scope);

                    // записали реакцию с коэффициентами, которые поставил юзер
                    $scope.reactSearch.setReaction($scope.reactParser.getFormatReaction(input.value));

                    // проверяем, поставил ли вообще юзер коэффициенты сам или оставил по стандарту единицы
                    var coefsByDefault = true;
                    for (var i = 0; i < $scope.reactSearch.reaction.object.length; i++) {
                        if ($scope.reactSearch.reaction.object[i].coef != 1) {
                            coefsByDefault = false;
                            break;
                        }
                    }

                    // если нет ошибок в автоматической расстановке коэффициентов и юзер сам не расставлял коэффициенты, то пишем автокоэффициенты
                    if ($scope.errors == '' && coefsByDefault) {
                        for (var i = 0; i < $scope.coefs.length; i++) {
                            $scope.reactSearch.reaction.object[i].coef = $scope.coefs[i];
                        }
                    }
                    $log.info($scope.reactSearch.reaction);
                    $scope.showActivity('simpleProblemGiven');
                } else {
                    $scope.reactEntering.error.text = $scope.reactEntering.validate(input.value);
                    $scope.reactEntering.error.show = true;
                }
            } else {
                $scope.reactEntering.error.text = 'Вы не ввели реакцию!';
                $scope.reactEntering.error.show = true;
            }
        };

        $scope.reactEntering.hintField = {
            "show": true
        };
    }

    SimpleProblemsController.$inject = ['$scope', '$rootScope', '$http', '$log', '$window', 'appConfigurator', '$reactions', '$periodic_table'];
    angular.module('ChemistryX10').controller('SimpleProblemsController', SimpleProblemsController);
})();

},{"lodash":6}],27:[function(require,module,exports){
(function () {
  
  var _ = require('lodash');

  function SolubilityTableCtrl($scope, $rootScope, $http, allowTouchmoveDefault, $ions) {
  
    var solubilityBlock = document.getElementById('table');
    allowTouchmoveDefault(solubilityBlock);

    $scope.cations = $ions.getCations();
    $scope.anions = $ions.getAnions();

    $scope.loadTable = function(){
      $http.get("./json/tableOfSolubility.json").then(function(response)
      {
        $scope.solubilityTable = response.data;
      }); 
    }
    $scope.getKey = function(obj){
      return Object.keys(obj)[0];
    }

    function getCoords(elem) { // кроме IE8-
      var box = elem.getBoundingClientRect();

      return {
        top: box.top + pageYOffset,
        left: box.left + pageXOffset
      };

    }
    var top = getCoords(document.getElementById("cations")).top+25;
    var bottom = document.documentElement.clientHeight;

    var size = (bottom-top)/13;

    $scope.setSizeAnion = function(i)
    {  
      //$log.info(document.getElementById("periods").getElementsByTagName("div")[i-1]);
      var node = document.getElementById("anions").getElementsByTagName("div")[i];
      node.style.heigh = size + "px";
      node.style["line-height"] = size + "px";
    }
    $scope.setSizeCation = function(i)
    {  
      var node = document.getElementById("cations").getElementsByTagName("div")[i];
      node.style.width = size * 2 + "px";
      //node.style["line-height"] = size + "px";
    }
    $scope.setSizeRow = function(i)
    {  
      //$scope.k=i;
      var node = document.getElementsByClassName("solubility-table-row")[i];
      node.style.height = size + "px";
      //node.style.width = (size * 2 * 20) + "px";
      //$log.info(document.getElementsByClassName("periodic-table-row")[i]);
      node.style["line-height"] = size + "px";
    }
    $scope.setSizeElement = function(i, j)
    {  
      var element = document.getElementsByClassName("elInSolubilityTable")[i*20+j];
      element.style.height = size + "px";
          //.style["line-height"] = size + "px";
      element.style.width = size * 2 + "px";
      element.innerText = i*20+j;
    }

    $scope.setMinWidthCationBlock = function(i)
    {  
      var groupBlock = document.getElementById('cations');
      groupBlock.style.minWidth = (size * 2 * 20) + 75 + "px";
    }

    $scope.setMinWidthTableBlock = function(i)
    {  
      var tableBlock = document.getElementsByClassName('solubilityTable')[0];
      tableBlock.style.minWidth = (size * 2 * 20) + "px";
    }
    
    $scope.hideTableOverflow = function() {
      var table = document.getElementById('table');
      table.style.overflowX = 'hidden';
      table.style.overflowY = 'hidden';
    };

    $scope.showTableOverflow = function() {
      var table = document.getElementById('table');
      table.style.overflowX = 'auto';
      table.style.overflowY = 'hidden';
    };  
    
    $scope.showTableOverflow();
  }

  SolubilityTableCtrl.$inject = ['$scope', '$rootScope', '$http', 'allowTouchmoveDefault', '$ions'];
  angular.module('ChemistryX10').controller('SolubilityTableCtrl', SolubilityTableCtrl);
})();

},{"lodash":6}],28:[function(require,module,exports){
(function () {

  var _ = require('lodash');

  function TableCtrl($scope, $periodic_table, $state, allowTouchmoveDefault, appConfigurator, gettextCatalog) {

    var fullTableBlock = document.getElementById('table');

    allowTouchmoveDefault(fullTableBlock);
    $scope.lang = appConfigurator.getLang();
    $scope.group = $periodic_table.getGroups();
    $scope.period = $periodic_table.getPeriods();
    $scope.table = $periodic_table.getDisplayedTable();
    $scope.lanthanides = _.filter($periodic_table.getAll(), {subclass: gettextCatalog.getString('Лантаноиды')});
    $scope.actinides = _.filter($periodic_table.getAll(), {subclass: gettextCatalog.getString('Актиноиды')});

    $scope.hideTableOverflow = function() {
      var table = document.getElementById('table');
      table.style.overflowX = 'hidden';
      table.style.overflowY = 'hidden';
    };

    $scope.showTableOverflow = function() {
      var table = document.getElementById('table');
      table.style.overflowX = 'auto';
      table.style.overflowY = 'hidden';
    };

    $scope.showTableOverflow();

    $scope.showDescription = function(elem){

      switch(elem['element'])
      {
        case 'empty':
          break;
        case '57-71':
          $scope.showLantinoids = true;
          break;
        case '89-103':
          $scope.showActinoids = true;
          break;
        default:
          // убрать проркрутку у самой таблицы
          $scope.hideTableOverflow();
          $state.go(".elemDescription", {element_id: elem['id']});
      }
    }
  }

  angular.module('ChemistryX10').controller('TableCtrl', ['$scope', '$periodic_table', '$state', 'allowTouchmoveDefault', 'appConfigurator', 'gettextCatalog', TableCtrl]);
})();

},{"lodash":6}],29:[function(require,module,exports){
(function () {
	function TableInfoController($scope, $state) {  
		$scope.gotoTable = function() {
		  $state.go('table');
		};
		$scope.isTableInfoController = true;
	}

	angular.module('ChemistryX10').controller('TableInfoController', ['$scope', '$state', TableInfoController]);
})();

},{}],30:[function(require,module,exports){
// Контроллер стартовой страницы раздела с теорией (таблицы, шпоры, формулы)
(function () {
	angular.module('ChemistryX10').controller('TheoryController', ['$scope', '$rootScope', function($scope, $rootScope) {
	  $scope.btnHeight = $rootScope.getBtnHeight(3) + 'px';
	}]);
})();

},{}],31:[function(require,module,exports){
(function() {

    var _ = require('lodash');

    var app = angular.module('ChemistryX10');
    // Компиляция в html-код с поддержкой ng-click
    app.directive('bindHtmlCompile', ['$compile', function($compile) {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                scope.$watch(function() {
                    return scope.$eval(attrs.bindHtmlCompile);
                }, function(value) {
                    // Incase value is a TrustedValueHolderType, sometimes it
                    // needs to be explicitly called into a string in order to
                    // get the HTML string.
                    element.html(value && value.toString());
                    // If scope is provided use it, otherwise use parent scope
                    var compileScope = scope;
                    if (attrs.bindHtmlScope) {
                        compileScope = scope.$eval(attrs.bindHtmlScope);
                    }
                    $compile(element.contents())(compileScope);
                });
            }
        };
    }]);

    app.directive('dynamicWidth', ['$log', '$timeout', function($log, $timeout) {
        return function (scope, element, attrs) {
            var block = angular.element(document.getElementById(attrs.fromBlock))[0];
            if (_.isNil(block)) {
                block = element[0];
            }
            element.css({ width: (block.offsetHeight / 7 * attrs.count) + 'px' });
        }
    }]);

    app.filter('translatePath', ["$log", "appConfigurator", function($log, appConfigurator) {
        return function(path) {
            //$log.info(appConfigurator.getLang());
            return path.replace("partials", "partials/" + appConfigurator.getLang());
        }
    }]);

    app.directive('ngClickStart', ["$parse", function($parse) {
        return {
            restrict: 'A',
            link: function(scope, elem, attrs) {
                elem.bind("touchstart click", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    scope.$apply(attrs["ngClickStart"]);
                });
            }
        }
    }]);

    // Кнопка "Назад"
    app.directive('back', ['$window', function($window) {
        return {
            restrict: 'A',
            link: function(scope, elem, attrs) {
                elem.bind('click', function() {
                    history.go(-1);
                });
            }
        };
    }]);

    app.filter("text", ["$log", function($log) {
        return function(str) {
            var e = angular.element('<span>').html(str);
            return e[0].innerText;
        }
    }]);

    app.filter("divided", ["$log", function($log) {
        return function(str) {
            if (typeof str == "undefined") return;
            $log.info(str);
            str = str.split(" ");
            return str;
        }
    }]);

    app.filter("reverse", function() {
        return function(str) {
            return (str + "").split("").reverse().join("");
        }
    });

    app.filter("getLocation", ["$log", function($log) {
        return function(str) {
            if (str === "empty" || str[2] === "-") return " ";
            return str;
        }
    }]);

    //замена дериктивы substruction потому что нужно быстро починить
    app.filter("substruction", ["$log", function($log) {
        return function(value) {
            var str = value;
            //$log.info(str);
            var newSpan = "<span>";
            //element.append(newSpan);
            //if(typeof attrs["coefficient"] !== undefined && attrs["coefficient"] != 1) newSpan.append(attrs["coefficient"]);
            for (var i = 0; i < str.length; i++)
                if (str[i] >= "0" && str[i] <= "9")
                    newSpan += '<sub>' + str[i] + '</sub>';
                else newSpan += str[i];
            newSpan += "</span>";
            return newSpan;
        }
    }]);

    // убирает badparse в bind-html
    app.filter('toTrusted', ["$sce", function($sce) {
        return function(value) {
            return $sce.trustAsHtml(value);
        };
    }]);

    app.filter("replaceOne", function() {
        return function(value) {
            return (value == "1") ? "" : value;
        }
    });

    app.filter("formatNmb", function() {
        return function(value) {
            return (value > 0) ? "+" + value : value;
        }
    });

    app.directive("substruction", ["$rootScope", "$log", function($rootScope, $log) {
        return {
            scope: {
                substruct: '@',
                coefficient: '@'
            },
            transclude: true,
            template: "<span ng-bind='coefficient | replaceOne'></span><span ng-bind-html='substruct | substruction'></span>",
            restrict: "E"
        }
    }]);

    app.directive("formula", ["$log", function($log) {
        return {
            link: function(scope, element, attrs) {
                var s = attrs.left;
                if (s == "NA") s = "N<sub>A</sub>";
                if (s == "Vm") s = "V<sub>m</sub>";
                var left = angular.element('<span>').html(s + " = ");
                element.append(left);
                var rightObj = angular.fromJson(attrs.right);
                if (rightObj.const) {
                    element.append(angular.element('<span>').text(rightObj.const));
                    return;
                }
                var top = "";
                var bottom = "";
                //$log.info(rightObj);
                for (i in rightObj.top) {
                    if (rightObj.top[i] == "NA" || rightObj.top[i] == "Vm") top += rightObj.top[i][0] + "<sub>" + rightObj.top[i][1] + "</sub>" + " × ";
                    else top += rightObj.top[i] + " × ";
                }
                var right;
                var numerator = angular.element('<div>').addClass("top"); //.text(top);
                top = top.substring(0, top.length - 3);
                numerator[0].innerHTML = top;
                if (!rightObj.bottom) {
                    element.append(angular.element('<span>').innerHTML = top);
                    return;
                }
                var fraction = angular.element('<div>').addClass("fraction");
                for (i in rightObj.bottom) {
                    if (rightObj.bottom[i] == "NA" || rightObj.bottom[i] == "Vm") bottom += rightObj.bottom[i][0] + "<sub>" + rightObj.bottom[i][1] + "</sub>" + " × ";
                    else bottom += rightObj.bottom[i] + " × ";
                }
                bottom = bottom.substring(0, bottom.length - 3);
                var denominator = angular.element('<div>').addClass("bottom"); //.text(bottom);
                denominator[0].innerHTML = bottom;
                //$log.info(denominator);
                fraction.append(numerator);
                fraction.append(denominator);
                element.append(fraction);
            },
            restrict: "E"
        }
    }]);
})();

},{"lodash":6}],32:[function(require,module,exports){
/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { Expression: peg$parseExpression },
      peg$startRuleFunction  = peg$parseExpression,

      peg$c0 = function(terms) {
        		var result = [];

        		for (var i = 0; i < terms.length; i++) {
        			result = result.concat(terms[i]);
        		} 
        		return distinct(result); 
          },
      peg$c1 = function(fact, coef) { 
        		return fact.map(function (comp) {
      			return new Element(comp.element, comp.coef * (coef !== null ? coef : 1));
      		});
        	},
      peg$c2 = function(el) { return [new Element(el ,1)];},
      peg$c3 = "(",
      peg$c4 = peg$literalExpectation("(", false),
      peg$c5 = ")",
      peg$c6 = peg$literalExpectation(")", false),
      peg$c7 = function(expr) { return expr; },
      peg$c8 = "[",
      peg$c9 = peg$literalExpectation("[", false),
      peg$c10 = "]",
      peg$c11 = peg$literalExpectation("]", false),
      peg$c12 = peg$otherExpectation("string"),
      peg$c13 = /^[A-Z]/,
      peg$c14 = peg$classExpectation([["A", "Z"]], false, false),
      peg$c15 = /^[a-z]/,
      peg$c16 = peg$classExpectation([["a", "z"]], false, false),
      peg$c17 = function(el) { return el.join(""); },
      peg$c18 = peg$otherExpectation("integer"),
      peg$c19 = /^[0-9]/,
      peg$c20 = peg$classExpectation([["0", "9"]], false, false),
      peg$c21 = function(digits) { return parseInt(digits.join(""), 10); },
      peg$c22 = peg$otherExpectation("whitespace"),
      peg$c23 = /^[ \t\n\r]/,
      peg$c24 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseExpression() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseTerm();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseTerm();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTerm() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseFactor();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseInteger();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFactor() {
    var s0, s1;

    s0 = peg$parseFactorPartial1();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFactorPartial2();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseElement();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c2(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseFactorPartial1() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c5;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFactorPartial2() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseExpression();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c10;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c7(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseElement() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    if (peg$c13.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c14); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$c15.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      if (s3 !== peg$FAILED) {
        if (peg$c15.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c17(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c12); }
    }

    return s0;
  }

  function peg$parseInteger() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c19.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c20); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c19.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c21(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c23.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c24); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$c23.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c22); }
    }

    return s0;
  }


  	function Element(element, coefficient) {
  		return {
  			element: element,
  			coef: coefficient !== null ? coefficient : 1
  		};
  	}

  	function distinct(current) {
  		var result = [];
  		for (var i = 0; i < current.length; i++) {
  			var append = true;
  			for (var j = 0; j < result.length; j++) {
  				if (current[i].element == result[j].element) {
  					result[j].coef += current[j].coef;
  					append = false;
  					break;
  				}
  			}
  			if (append) {
  				result.push(new Element(current[i].element, current[i].coef));
  			}
  		}
  		return result;
  	}


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};

},{}],33:[function(require,module,exports){
(function() {
    var _ = require('lodash');

    function AlignmentCoefficientService($ions, $periodic_table, $equation_parser) {
        this.alignment = function(equation) {
            var result = {
                errors: [],
            };

            if (!(equation.includes('=') && equation.includes('+'))) {
                result.errors = ['Неправильное уравнение'];
                return result;
            }

            var subsL = equation.replace(/\s+/g, '').split("=")[0].split("+");
            var subsR = equation.replace(/\s+/g, '').split("=")[1].split("+");
            var elems = {};

            function NOD(a, b) {
                a = Math.abs(a);
                b = Math.abs(b);
                while (a && b) {
                    if (a > b)
                        a %= b;
                    else b %= a;
                }
                return a + b;
            }

            function elemsCmp(a, b) {
                if (a.elements > b.elements) return 1;
                else return -1;
            }

            function combine(arr) {
                var anions = $ions.getAnions();
                var cations = $ions.getCations();

                _.each(anions, function(anion) {
                    _.each(cations, function(cation) {

                    });
                });

                for (ii in scope.oxidation["ions"]["vertical"])
                    for (ji in scope.oxidation["ions"]["horizontal"]) {
                        var tmpArr = [];
                        tmpArr.parse = $rootScope.parse;
                        var key_i = Object.keys(scope.oxidation["ions"]["vertical"][ii])[0];
                        var key_j = Object.keys(scope.oxidation["ions"]["horizontal"][ji])[0];
                        var p_i = scope.oxidation["ions"]["vertical"][ii][key_i];
                        var p_j = scope.oxidation["ions"]["horizontal"][ji][key_j];
                        tmpArr.parse("(" + key_i + ")" + Math.abs(p_j) / NOD(p_j, p_i) + "(" + key_j + ")" + Math.abs(p_i) / NOD(p_j, p_i), 1);
                        var isEquels = (tmpArr.length == arr.length);
                        var l = 0;
                        tmpArr.sort(elemsCmp);
                        arr.sort(elemsCmp);
                        while (isEquels && (l < tmpArr.length)) {
                            isEquels = (tmpArr[l].elements == arr[l].elements && tmpArr[l].coef == Math.abs(arr[l].coef));
                            l++;
                        }
                        if (isEquels) {
                            /*$log.info(arr);
                            $log.info(tmpArr);
                            $log.info("\n");*/
                            return [{ sub: key_i, p: p_i, c: Math.abs(p_j) / NOD(p_j, p_i) }, { sub: key_j, p: p_j, c: Math.abs(p_i) / NOD(p_j, p_i) }];
                        }
                    }
                return 0;
            }

            function isSimpleElement(arr, i, j) {
                //$log.info(arr[i][j]);
                for (var e in arr) {
                    if ((arr[e][j].c != 0 || arr[e][j].p != 0) && e != i) return 0;
                }
                return 1;
            }

            var parsed = $equation_parser.parse(equation);
            console.log(parsed);

            function setPower(sumPower, subs, multiplier, index) {
                //$log.info(subs + " " + sumPower);
                var arr = new Array();
                arr.parse = $rootScope.parse;
                arr.parse(subs, multiplier);
                console.log(arr);
                //$log.info(arr);
                if (typeof arr.err != "undefined" && scope.errors.indexOf(arr.err) == -1) scope.errors.concat(arr.err);
                var ionsArr = combine(arr);

                if (ionsArr) {
                    for (var i = 0; i < ionsArr.length; i++)
                        setPower(ionsArr[i].p, ionsArr[i].sub, ionsArr[i].c * multiplier, index);
                } else {
                    //$log.info(arr);
                    for (var j = 0; j < arr.length; j++) {
                        //alert($rootScope.table["table"][arr[arr.length - 1 - j]["elements"]]["element"]);
                        arr[j].p = 0;
                        //$log.info(arr[j]);
                        if (arr.length == 1) {
                            arr[j].p = sumPower;
                            continue;
                        }
                        if (arr.length == 2) {
                            if (arr[j]["elements"] == 0)
                                if ($rootScope.table["table"][arr[arr.length - 1 - j]["elements"]]["class"] == "METALS")
                                    arr[j].p = -1;
                                else arr[j].p = 1;
                            else if (arr[j]["elements"] == 7)
                                if (arr[arr.length - 1 - j]["elements"] == 8)
                                    arr[j].p = 2;
                                else if (arr[arr.length - 1 - j]["elements"] == 0 && arr[j]["coef"] == 2)
                                arr[j].p = -1;
                            else arr[j].p = -2;
                            else if ($rootScope.table["table"][arr[j]["elements"]]["group"] == "7 A" && $rootScope.table["table"][arr[j]["elements"]]["period"] >= 3 && $rootScope.table["table"][arr[j]["elements"]]["period"] <= 6)
                                if ($rootScope.table["table"][arr[arr.length - 1 - j]["elements"]]["class"] == "METALS" || arr[arr.length - 1 - j] == 0)
                                    arr[j].p = -1;
                                else if ($rootScope.table["table"][arr[j]["elements"]]["group"] == "6 A" && $rootScope.table["table"][arr[j]["elements"]]["period"] >= 3 && $rootScope.table["table"][arr[j]["elements"]]["period"] <= 6)
                                if ($rootScope.table["table"][arr[arr.length - 1 - j]["elements"]]["class"] == "METALS" || arr[arr.length - 1 - j] == 0)
                                    arr[j].p = -2;
                                else if ($rootScope.table["table"][arr[j]["elements"]]["group"] == "5 A" && $rootScope.table["table"][arr[j]["elements"]]["period"] >= 2 && $rootScope.table["table"][arr[j]["elements"]]["period"] <= 5)
                                if ($rootScope.table["table"][arr[arr.length - 1 - j]["elements"]]["class"] == "METALS" || arr[arr.length - 1 - j] == 0)
                                    arr[j].p = -3; //*tmpArr[j]["coef"];
                        } else {
                            if (arr[j]["elements"] == 7) arr[j].p = -2; //*tmpArr[j]["coef"];
                            else if (arr[j]["elements"] == 0) arr[j].p = 1; //tmpArr[j]["coef"];
                        }
                        if ($rootScope.table["table"][arr[j]["elements"]]["group"] === "1 A" && arr[j]["elements"] != 0) arr[j].p = 1; //tmpArr[j]["coef"];
                        else if ($rootScope.table["table"][arr[j]["elements"]]["group"] === "2 A") arr[j].p = 2; //*tmpArr[j]["coef"];
                        else if ($rootScope.table["table"][arr[j]["elements"]]["group"] === "3 A" && $rootScope.table["table"][arr[j]["elements"]]["period"] <= 3) arr[j].p = 3; //*tmpArr[j]["coef"];
                        else if (arr[j]["elements"] == 8) arr[j].p = -1; //*tmpArr[j]["coef"];
                    }
                    var p = -1,
                        sum = 0;
                    for (var i = 0; i < arr.length; i++) {
                        //$log.info(arr[i]);
                        //$log.info(multiplier);
                        sum += arr[i].p * arr[i].coef / multiplier;
                        if (arr[i].p == 0) {
                            p = i;
                            // $log.info(p)
                        }
                        //$log.info("\n");
                    }
                    if (p >= 0) {
                        arr[p].p = (sumPower - sum) / Math.abs(arr[p].coef / multiplier);
                    }

                    for (var j = 0; j < arr.length; j++) {
                        if (typeof elems[arr[j]["elements"]] === "undefined") {
                            //$log.info(tmpArr[j]["elements"]);
                            elems[arr[j]["elements"]] = new Array();
                        }
                        if (typeof elems[arr[j]["elements"]][index] === "undefined") elems[arr[j]["elements"]][index] = { c: arr[j]["coef"], p: arr[j].p };
                        else elems[arr[j]["elements"]][index].c += arr[j].coef;
                    }
                }

            }
        };
    };
    angular.module('ChemistryX10').service('$alignment_coefficient', [
        '$ions', '$periodic_table', '$equation_parser', AlignmentCoefficientService
    ]);
})();

var alignment = function(equation) {
    scope.refresh();
    if (scope.equation.indexOf('=') == -1 || scope.equation.indexOf('+') == -1) {
        scope.errors = ['Неправильное уравнение'];
        return;
    }


    for (var i = 0; i < subsL.length; i++) {
        //$log.info(i);
        setPower(0, subsL[i], 1, i);
    }
    for (var i = 0; i < subsR.length; i++) {
        setPower(0, subsR[i], -1, i + subsL.length);
    }
    //$log.info($scope.errors);
    if (scope.errors != "") return;
    var max = 0;
    for (var i in elems) {
        max = (max > elems[i].length) ? max : elems[i].length;
    }

    for (var i in elems) {
        for (var j = 0; j < max; j++)
            if (typeof elems[i][j] == "undefined")
                elems[i][j] = { c: 0, p: 0 };
    }
    //$log.info(elems);
    scope.balance = new Array();
    var powerIndex = new Array(); //тут, короче, степень изменяется иногда в одном веществе, поэтому покумекать нужно, эта ерунда не всегда работает
    //$log.info(elems);
    for (var i in elems) {
        var powerArr = new Array();
        var coefsArr = new Array();
        for (var j = 0; j < elems[i].length; j++) {
            if (elems[i][j].c != 0 && powerArr.indexOf(elems[i][j].p) == -1) {
                powerArr.push(elems[i][j].p);
                if (isSimpleElement(elems, i, j))
                    coefsArr.push(Math.abs(elems[i][j].c));
                else coefsArr.push(1);
            }
        }
        //$log.info(elems);
        if (powerArr.length == 2) {
            var j = 0;
            //$log.info(elems[i]);
            while (elems[i][j].c == 0) {
                j++;
            }
            powerIndex.push(j);
            var x = { el: $rootScope.table["table"][i]["element"], powerL: powerArr[0], powerR: powerArr[1], cl: coefsArr[0], cr: coefsArr[1] };
            x.razn = x.cl * x.cr * (x.powerL - x.powerR);
            if (x.razn > 0) {
                x.process = [gettextCatalog.getString('Восстановитель'), gettextCatalog.getString('Окислитель')];
            } else {
                x.process = [gettextCatalog.getString('Окислитель'), gettextCatalog.getString('Восстановитель')];
            }
            scope.balance.push(x);
        }
    }
    //$log.info(elems);
    scope.coefs = new Array();
    var matrix = new Array();

    var ni = 0;
    for (var i in elems) {
        //$log.info(elems[i]);
        matrix[ni] = new Array();
        for (var j in elems[i]) {
            matrix[ni].push(elems[i][j].c);
        }
        ni++;
    }
    $log.info(scope.balance.length == 2);
    if (matrix[matrix.length - 1].length - matrix.length > 1 && scope.balance.length == 2) {
        matrix[matrix.length] = new Array();
        //$log.info(matrix.length);
        for (var i = 0; i < matrix[0].length; i++)
            matrix[matrix.length - 1][i] = 0;
        for (var i = 0; i < powerIndex.length; i++) {
            matrix[matrix.length - 1][powerIndex[i]] = scope.balance[i].razn;
        }
    }
    //$log.info(matrix);
    function arrCmp(a, b) {
        var aToS = "";
        for (var i = 0; i < a.length; i++) {
            aToS += Math.abs(a[i]);
        }
        var bToS = "";
        for (var i = 0; i < b.length; i++) {
            bToS += Math.abs(b[i]);
        }
        if (aToS < bToS) return 1;
        return -1;
    }

    function zeroStr(arr) {
        for (var i = 0; i < arr.length; i++)
            if (arr[i] != 0) return true;
        return false;
    }

    //$log.info(matrix);

    //прямой ход

    for (var i = 0; i < matrix.length - 1; i++) {
        /*matrix.forEach(value=>$log.info(value.toString()));
        $log.info("________");*/
        matrix.sort(arrCmp);
        var a = matrix[i][i];
        for (var j = i + 1; j < matrix.length; j++) {
            var b = matrix[j][i];
            if (b !== 0) {
                for (var k = i; k < matrix[j].length; k++)
                    matrix[j][k] = matrix[i][k] - matrix[j][k] * a / b;
            }
        }
    }
    //$log.info(matrix);

    for (var i = 0; i < matrix[0].length; i++)
        scope.coefs[i] = 0;
    scope.coefs[scope.coefs.length - 1] = 1;

    //$log.info($scope.coefs);
    while (!zeroStr(matrix[matrix.length - 1])) matrix.length--;
    //обратный ход
    for (var i = matrix.length - 1; i >= 0; i--) {
        var sum = 0;
        for (var j = i + 1; j < matrix.length; j++)
            sum += matrix[i][j] * scope.coefs[j];
        sum = matrix[i][matrix.length] - sum;
        //$log.info(sum/matrix[i][i]);
        scope.coefs[i] = scope.coefs[scope.coefs.length - 1] * sum / matrix[i][i];
    }
    for (var i = 0; i < scope.coefs.length; i++) {
        scope.coefs[i] = Math.abs(scope.coefs[i]);
    }
    //$log.info($scope.coefs);
    scope.coefs.allInteger = function() {
        for (var i = 0; i < this.length; i++) {
            //if(this[i]+"" == "NaN") return true;
            if (!isInteger(this[i])) return false;
        }
        return true;
    }
    var k = 2;
    if (scope.coefs.indexOf(0) != -1) {
        scope.errors = ['Не удалось расставить коэффициенты', 'Возможно, уравнение не существует'];
        return;
    }
    while (!scope.coefs.allInteger()) {
        //$log.info($scope.coefs);
        for (var i = 0; i < scope.coefs.length; i++) {
            if (scope.coefs[i] + "" == "NaN") {
                scope.errors = ['Не удалось расставить коэффициенты', 'Возможно, уравнение не существует'];
                return;
            }
            scope.coefs[i] /= k - 1;
            scope.coefs[i] *= k;
        }
        k++;
    }

    scope.nod = NOD;

    scope.subsL = subsL;
    scope.subsR = subsR;
}
},{"lodash":6}],34:[function(require,module,exports){
(function () {

  function AppConfigurator() {

    var $http = angular.injector(['ng']).get('$http');
    var $timeout = angular.injector(['ng']).get('$timeout');
    var _this = this;

    this.config = {
      // язык (en / ru)
      'lang': 'ru',
      // опandroidерационная система (ios / android)
      'os': 'ios',
      // цена приложения
      'price': '0.99$',
      // куплена ли Pro-версия
      'isPurchased': true,
      // включено ли описание для родителей
      'isParentsDesc': false,
      // ограничение на количество попыток в разных разделах
      'limits': {
        // органичения в поиске реакций
        'reactions': {
          'limit': 20,
          'date': null,
          'count': 0
        }
      },
      // обновляемое модальное окно для экстренных сообщений с сервера
      'modal': {
        'show': false,
        'title': '',
        'content': '',
        'timeout': 6000,
        'isFirstTime': true,
        'block': {
          'show': false
        }
      }
    };
    this.config.limits.getTodayDate = function() {
      var today = new Date();
      return (today.getDate() + '/' + (today.getMonth()*1 + 1) + '/' + today.getFullYear());
    };
    this.config.modal.check = function() {
      if (localStorage.getItem('configModalIsFirstTime') != undefined) {
        if (localStorage.getItem('configModalIsFirstTime') == 'true') {
          _this.config.modal.isFirstTime = true;
        }
        else if (localStorage.getItem('configModalIsFirstTime') == 'false') {
          _this.config.modal.isFirstTime = false;
        }
      }
      if (_this.config.modal.show && _this.config.modal.isFirstTime) {
        _this.config.modal.isFirstTime = false;
        localStorage.setItem('configModalIsFirstTime', 'false');
        $timeout(function() {
          _this.config.modal.block.show = true;
        }, _this.config.modal.timeout);
      }
    }

    this.$get = function() {
          var config = _this.config;
          return {
            getLang: function() {
              return config.lang;
            },
            getOs: function() {
              return config.os;
            },
            isPurchased: function() {
              return config.isPurchased;
            },
            isParentsDesc: function() {
              return config.isParentsDesc;
            },
            getPrice: function() {
              return config.price;
            },
            toggleParentsDesc: function() {
              config.isParentsDesc = !config.isParentsDesc;
              localStorage.setItem('isParentsDesc', config.isParentsDesc + '');
            },
            saveParentsDescMode: function() {
              //сохранение, включена или выключена защита, в localstorage
              localStorage.setItem('isParentsDesc', config.isParentsDesc + '');
            },
            getLimits: function() {
              return {
                reactions: {
                  limit: config.limits.reactions.limit,
                  date: config.limits.reactions.date,
                  count: config.limits.reactions.count
                }
              };
            },
            getModal: function() {
              return {
                show: config.modal.show,
                title: config.modal.title,
                content: config.modal.content,
                timeout: config.modal.timeout,
                isFirstTime: config.modal.isFirstTime,
                block: {
                  show: config.modal.block.show
                }
              };
            },
            incrementReactionsLimitCount: function(){
              if (!config.isPurchased) {
                config.limits.reactions.count++;
                localStorage.setItem('reactionsLimitsCount', config.limits.reactions.count + '');
              }
            },
            isReactionsLimit: function() {
              return (config.limits.reactions.count >= config.limits.reactions.limit);
            },
            setLang: function(newLang) {
              config.lang = newLang;
              localStorage.setItem('lang', config.lang);
            }

          }
      };

    this.updateLang = function() {
      var lang = localStorage.getItem('lang');
      if(lang) {
        this.config.lang = lang;
      } else {
        this.config.lang = 'en';
        localStorage.setItem('lang', this.config.lang);
      }
      return this;
    }

    this.updateParentsDesc = function() {
      var isParentsDesc = localStorage.getItem('isParentsDesc');
      if (isParentsDesc == 'true') {
        isParentsDesc = true;
      }
      else isParentsDesc = false;
      return this;
    }

    this.updateReactionsLimit = function() {
      var todayDate = _this.config.limits.getTodayDate();
      // загружать данные из localstorage будем, если дата сегодняшняя
      if (localStorage.getItem('reactionsLimitsDate') == todayDate) {
        if (localStorage.getItem('reactionsLimitsCount') != undefined) {
          _this.config.limits.reactions.count = localStorage.getItem('reactionsLimitsCount') * 1;
        }
        else {
          _this.config.limits.reactions.count = 0;
          localStorage.setItem('reactionsLimitsCount', '0');
        }
      }
      else {
        localStorage.setItem('reactionsLimitsDate', todayDate);
        localStorage.setItem('reactionsLimitsCount', '0');
      }
      return this;
    }

    this.updateFromLocalStorage = function() {
      if (localStorage.getItem('configPrice') != undefined) {
        _this.config.price = localStorage.getItem('configPrice');
      }

      if (localStorage.getItem('configModalShow') != undefined) {
        if (localStorage.getItem('configModalShow') == 'true') {
          _this.config.modal.show = true;
        }
        else if (localStorage.getItem('configModalShow') == 'false') {
          _this.config.modal.show = false;
        }
      }
      if (localStorage.getItem('configModalTitle') != undefined) {
        _this.config.modal.title = localStorage.getItem('configModalTitle');
      }
      if (localStorage.getItem('configModalContent') != undefined) {
        _this.config.modal.content = localStorage.getItem('configModalContent');
      }
      if (localStorage.getItem('configModalTimeout') != undefined) {
        _this.config.modal.timeout = localStorage.getItem('configModalTimeout') * 1;
      }
      if (localStorage.getItem('configModalIsFirstTime') != undefined) {
        if (localStorage.getItem('configModalIsFirstTime') == 'true') {
          _this.config.modal.isFirstTime = true;
        }
        else if (localStorage.getItem('configModalIsFirstTime') == 'false') {
          _this.config.modal.isFirstTime = false;
        }
      }
    }

    this.updateFromServer = function() {
      var jsonPath = 'http://chemistryx10.com/app/config/' + _this.config.os + '.json';
      $http({
        url: 'http://chemistryx10.com/app/get_json.php?url=' + jsonPath,
        method: 'GET'
      }).then(function(response) {
        var serverConfig = response;

        if (serverConfig.price != undefined) {
          localStorage.setItem('configPrice', serverConfig.price + '');
          _this.config.price = serverConfig.price;
        }

        if (serverConfig.modal != undefined) {
          if (serverConfig.modal.show != undefined) {
            localStorage.setItem('configModalShow', serverConfig.modal.show + '');
            _this.config.modal.show = serverConfig.modal.show;
          }
          if (serverConfig.modal.title != undefined) {
            // если заголовок не такой, как старый в localStorage, то считаем, что модалка будет показываться в первый раз
            if (localStorage.getItem('configModalTitle') != undefined && serverConfig.modal.title != localStorage.getItem('configModalTitle')) {
              _this.config.modal.isFirstTime = true;
              localStorage.setItem('configModalIsFirstTime', 'true');
            }
            localStorage.setItem('configModalTitle', serverConfig.modal.title + '');
            _this.config.modal.title = serverConfig.modal.title;
          }
          if (serverConfig.modal.content != undefined) {
            localStorage.setItem('configModalContent', serverConfig.modal.content + '');
            _this.config.modal.content = serverConfig.modal.content;
          }
          if (serverConfig.modal.timeout != undefined) {
            localStorage.setItem('configModalTimeout', serverConfig.modal.timeout + '');
            _this.config.modal.timeout = serverConfig.modal.timeout;
          }
        }
        _this.config.modal.check();
      }, function() {
        // если не удается подключиться к серверу, грузим информацию из локальной памяти
        _this.updateFromLocalStorage();
        _this.config.modal.check();
      });
      //console.log(this.config.modal.check());
      return this;
    }

  }

  angular.module('ChemistryX10').provider('appConfigurator', AppConfigurator);
})();

},{}],35:[function(require,module,exports){
(function () {
  //Провайдер для работы с конфигами приложения вместо $rootScope.config
  angular.module('ChemistryX10').service('$equation_parser', ['gettextCatalog',
    function(gettextCatalog) {

      var parser = require('../parsers/substunce_parser.js');
      var _ = require('lodash');
      var self = this;

      this.parse = function(equation) {
        return _.chain(_.split(equation, '='))
                .zip([1, -1])
                .each(side => side[0] = _.split(side[0], '+'))
                .each(substunces => substunces[1] = _.fill(Array(substunces[0].length), substunces[1]))
                .map(substunces => _.zip(substunces[0], substunces[1]))
                .flatten()
                .each(substunce => substunce[0] = _.trim(substunce[0]))
                .each(substunce => substunce[0] = parser.parse(substunce[0]))
                .map(substunce => _.each(substunce[0], s => s.coef *= substunce[1]))
                .flatten()
                .value();
      }
    
  }]);
})();


},{"../parsers/substunce_parser.js":32,"lodash":6}],36:[function(require,module,exports){
(function () {
  var _ = require('lodash');

  function IonsService(ions) {

    var self = this;

    this.getAnions = function () {
      return _.cloneDeep(_.filter(ions, function (ion) {
        return _.lt(ion.charge, 0);
      }));
    }

    this.getCations = function () {
      return _.cloneDeep(_.filter(ions, function (ion) {
        return _.gt(ion.charge, 0);
      }));
    }

  }

  angular.module('ChemistryX10').service('$ions', ['ions', IonsService]);
})();

},{"lodash":6}],37:[function(require,module,exports){
(function () {

  var _ = require('lodash');

  function PeriodicTableService(periodic_table, $http, $q) {

    var groups_labels = ['1 A', '2 A', '3 B', '4 B', '5 B', '6 B', '7 B', '8 B', '8 B', '8 B', '1 B', '2 B', '3 A', '4 A', '5 A', '6 A', '7 A', '8 A'];
    var periods = ['1', '2', '3', '4', '5', '6', '7'];
    var self = this;

    this.getGroups = function () {
      return _.clone(groups_labels);
    }

    this.getPeriods = function () {
      return _.clone(periods);
    }

    this.getAll = function () {
      return _.cloneDeep(periodic_table);
    }

    this.getElements = function (dict) {
      return _.cloneDeep(_.filter(periodic_table, dict));
    }
    
    this.getElementById = function (id) {
      return _.cloneDeep(_.find(periodic_table, {'id': _.parseInt(id)}));
    }

    this.getElementsByGroup = function (group) {
      return _.cloneDeep(_.filter({'group': group}));
    }

    this.getElementsByPeriod = function (period) {
      return _.cloneDeep(_.filter({'period': period}));
    }

    this.getDetailedElementInfo = function (id) {
      var element = self.getElementById(_.toNumber(id));
      var deffered = $q.defer();
      var path = './json/elements/' + element['element'].toLowerCase().replace(/[()]/g, '') + '.json';

      $http.get(path).then(function (resp) {
        deffered.resolve(_.merge(resp.data, element));
      }, function (e) {
        deffered.reject(e);
      });
      return deffered.promise;
    }

    this.getDisplayedTable = function () {
      var displayed_table = []
      var groups = _.uniq(groups_labels);

      function getFakeElement (title, p, g) {
        return {
          element: title, 
          group: g, 
          period: p, 
          atomMass: 0, 
          elnegativity: 0, 
          elconf: 0, 
          color: 'black', 
          val: [], 
          name: {
            ru: 'emp',
            en: 'emp'
          }
        };
      }

      function getElemByGroupAndPeriod(p, g) {
        var element_mapping = {
          57: '57-71',
          89: '89-103'
        };
        var e = self.getElements({
          'period': p,
          'group': g
        });
        if (_.isEmpty(e)) {
          return g != '8 B' ? getFakeElement('empty', p, g) : [getFakeElement('empty', p, g), getFakeElement('empty', p, g), getFakeElement('empty', p, g)];
        }
        var title = _.get(element_mapping, _.first(e).id, null);
        if (!_.isNil(title)) return getFakeElement(title, p, g);
        return e;
      }

      _.each(periods, function (period) {
        var elements = self.getElementsByPeriod(period);
        var row = [];
        _.each(groups, function (group) {
          row = _.concat(row, getElemByGroupAndPeriod(period, group));
        });
        displayed_table.push(row);
      });

      return displayed_table;
    }

  }

  angular.module('ChemistryX10').service('$periodic_table', ['periodic_table', '$http', '$q', PeriodicTableService]);
})();

},{"lodash":6}],38:[function(require,module,exports){
(function () {

  var _ = require('lodash');

  function ReactionsService($http, $q) {

    var apiUrl = 'http://chemistryx10.com/api/{action}/solve';

    function checkNoReact(reactions) {
      return reactions.success ? null : 'Reaction is not found';
    }

    function buildUrl(url, params) {

      var path = url;

      for (var param in params) {

        if (path.includes('{' + param + '}')) {
          path = path.replace('{' + param + '}', encodeURIComponent(params[param]));
        } else if (typeof params[param] !== 'undefined') {
          path += path.includes('?') ? '&' : '?';
          path += param + "=" + encodeURIComponent(params[param]);
        }

      }
      return path;
    }

    function prepareChain (steps, chain) {
      var response = {
        'reactions': [],
        'status': steps.success ? 'success' : 'error',
        'react_string': chain
      };

      _.each(steps.chain, function (step) {
        if (step.solving.success) {
          response['reactions'].push(prepareReaction(_.first(_.get(step, ['solving', 'reactions'], []))));
        }
      });

      return response;
    }

    function prepareReaction (react) {
      if (!_.isNil(react)) {
        var preparedReaction = {};
        preparedReaction['reaction'] = react['reaction'];
        if (!_.isNil(react['cond'])) {
          preparedReaction['condition'] = react['conditions'];
        }
        if (!_.isNil(react['ion'])) {
          preparedReaction['ion'] = react['ion'];
        }
        return preparedReaction;
      } else {
        return null;
      }
    }

    function prepareReactions (reactions) {
      var response = {
        'reactions': [],
        'status': 'success'
      };
      var checkError = checkNoReact(reactions);
      if (checkError) {
        response['status'] = 'error';
        response['why'] = checkError;
      } else {
        _.each(reactions.reactions, function (reaction) {
          var preparedReaction = prepareReaction(reaction);

          if (preparedReaction) {
            response['reactions'].push(preparedReaction);
          }
        });
      }
      return response;
    }

    this.solveReaction = function (reaction) {
      var query = buildUrl(apiUrl, {
        action: 'reaction',
        reaction: reaction,
        size: 10
      });

      var deffered = $q.defer();

      $http({
        url: query,
        method: 'GET',
      }).then(function(response) {
        deffered.resolve(prepareReactions(response.data));
      }, function(error) {
        deffered.reject(error);
      });

      return deffered.promise;
    }

    this.solveChain = function (chain) {
      var query = buildUrl(apiUrl, {
        action: 'chain',
        chain: chain,
        size: 1
      });

      var deffered = $q.defer();

      $http({
        url: query,
        method: 'GET',
      }).then(function(response) {
        deffered.resolve(prepareChain(response.data, chain));
      }, function(error) {
        deffered.reject(error);
      });

      return deffered.promise;
    }
  }

  angular.module('ChemistryX10').service('$reactions', ['$http', '$q', ReactionsService]);
})();

},{"lodash":6}]},{},[8])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

//# sourceMappingURL=app.js.map
